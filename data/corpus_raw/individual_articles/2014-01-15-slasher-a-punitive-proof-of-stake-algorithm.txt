Titre: Slasher: A Punitive Proof-of-Stake Algorithm\nAuteur: Vitalik Buterin\nDate: January 15, 2014\nURL: https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm\nCatégorie: Non catégorisé\n\n==================================================\n\nhe purpose of this post is not to say that thereum will be using lasher in place of agger as its main mining function. ather, lasher is a useful construct to have in our war chest in case proof of stake mining becomes substantially more popular or a compelling reason is provided to switch. lasher may also benefit other cryptocurrencies that wish to eist independently of thereum. pecial thanks to tacotime for some inspiration, and for ack alker for improvement suggestions.nnroof of stake mining has for a long time been a large area of interest to the cryptocurrency community. he first proof-of-stake based coin, oin, was releasd by unny ing in , and has consistently remained among the top five alternative currenciesnnby monetary basennsince then. nd for good reason proof of stake has a number of advantages over proof of work as a mining method. irst of all, proof of stake is much more environmentally friendly while proof of work requires miners to effectively burn computational power on useless calculations to secure the network, proof of stake effectively simulates the burning, so no real-world energy or resources are ever actually wasted. econd, there are centralization concerns. ith proof of work, mining has been essentially dominated by specialized hardware (“application-specific integrated circuits” / s), and there is a large risk that a single large player such as ntel or a major bank will take over and de-facto monopolize the market. emory-hard mining algorithms like crypt and nownnaggernnmitigate this to a large etent, but even still not perfectly. nce again, proof of stake, if it can be made to work, is essentially a perfect solution.nnowever, proof of stake, as implemented in nearly every currency so far, has one fundamental flaw as one prominent itcoin developer put it, “there’s nothing at stake”. he meaning of the statement becomes clear when we attempt to analyze what eactly is going on in the event of an attempted % attack, the situation that any kind of proof-of-work like mechanism is intended to prevent. n a % attack, an attacker  sends a transaction from  to , waits for the transaction to be confirmed in block  (with parent ), collects a product from , and then immediately creates another block  on top of  – with a transaction sending the same bitcoins but this time from  to . t that point, there are two blockchains, one from block  and another from block . f  can add blocks on top of  faster than the entire legitimate network can create blocks on top of , the  blockchain will win – and it will be as if the payment from  to  had never happened. he point of proof of work is to make it take a certain amount of computational power to create a block, so that in order for  to outrace   would have to have more computational power than the entire legitimate network combined.nnn the case of proof of stake, it doesn’t take computational power to create a work – instead, it takes money. n oin, every “coin” has a chance per second of becoming the lucky coin that has the right to create a new valid block, so the more coins you have the faster you can create new blocks in the long run. hus, a successful % attack, in theory, requires not having more computing power than the legitimate network, but more money than the legitimate network. ut here we see the difference between proof of work and proof of stake in proof of work, a miner can only mine on one fork at a time, so the legitimate network will support the legitimate blockchain and not an attacker’s blockchain. n proof of stake, however, as soon as a fork happens miners will have money in both forks at the same time, and so miners will be able to mine on both forks. n fact, if there is even the slightest chance that the attack will succeed, miners have the incentive to mine on both. f a miner has a large number of coins, the miner will want to oppose attacks to preserve the value of their own coins in an ecosystem with small miners, however, network security potentially falls apart in a classic public goods problem as no single miner has substantial impact on the result and so every miner will act purely “selfishly”.nnhe olutionnnome have theorized that the above argument is a deathblow to all proof of stake, at least without a proof of work component assisting it. nd in a contet where every chain is only aware of itself, this is indeed provably true. owever, there is actually one clever way to get around the issue, and one which has so far been undereplored make the chain aware of other chains. hen, if a miner is caught mining on two chains at the same time, that miner can be penalized. owever, it is not at all obvious how to do this with a oin-like design. he reason is this mining is a random process. hat is to say, a miner with .% of the stake has a .% chance of mining a valid block on block , and a .% chance of mining a valid block on block , but only a .% chance of mining a valid block on both. nd in that case, the miner can simply hold back the second block – because mining is probabilistic, the miner can still gain .% of the benefit of mining on the second chain.nnhe following proposal, however, outlines an algorithm, which we are calling lasher to epress its harshly punitive nature, for avoiding this proposal. he design description given here uses address balances for clarity, but can easily be used to work with “unspent transaction outputs”, or any other similar abstraction that other currencies may use.nnlocks are mined with proof of work. owever, we make one modification. hen creating a block , a miner must include the value (n) for some random n generated by the miner. he miner must claim the reward by releasing a transaction uncovering n between block + and +. he proof of work reward is very low, ideally encouraging energy usage equal to about % of that of itcoin. he target block time is  seconds.nnuppose the total money supply is , and ni] is the n value at block i. t block +, an address  with balance  gains a “signing privilege” if sha(n] + n+] + ... + n+] + )  ^ *  *  / . ssentially, an address has a chance of gaining a signing privilege proportional to the amount of money that it has, and on average  signing privileges will be assigned each block.nnt block +, miners with signing privileges from block  have the opportunity to sign the block. he number of signatures is what determines the total length of one blockchain versus another.  signature awards the signer a reward that is substantially larger than the proof of work reward, and this reward will unlock by block +.nnuppose that a user detects two signatures made by address  on two distinct blocks with height +. hat node can then publish a transaction containing those two signatures, and if that transaction is included before block + it destroys the reward for that signature and sends % to the user that ratted the cheater out.nnhe key to this design is how the signing privileges are distributed instead of the signing privilege being randomly based on the previous block, the signing privilege is based on the block two thousand blocks ago. hus, in the event of a fork, a miner that gets lucky in one chain will also get lucky in the other, completely eliminating the probabilistic dual-mining attack that is possible with oin. nother way of looking at it is that because lasher uses proof-of-stake--blocks-ago instead of proof-of-stake now, and forks will almost certainly not last  blocks, there is only one currency supply to mine with, so there is indeed “something at stake”. he penalty of block reward loss ensures that every node will take care to sign only one block at each block number.nnhe use of  pre-committed random numbers is an idea taken from provably fair gambling protocols the idea is that powerful miners have no way of attempting to create many blocks and publishing only those that assign their own stake a signing privilege, since they do not know what any of the other random data used to determine the stakeholder is when they create their blocks.nnhe system is not purely proof-of-stake some minimal proof-of-work will be required to maintain a time interval between blocks. owever, a % attack on the proof of work would be essentially inconsequential, as proof of stake signing is the sole deciding factor in which blockchain wins. urthermore, the energy usage from proof of work can be made to be -% lower, resolving the environmental concern with proof of work.