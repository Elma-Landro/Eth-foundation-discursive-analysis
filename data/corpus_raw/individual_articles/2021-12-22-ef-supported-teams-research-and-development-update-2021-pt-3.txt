Titre: EF-Supported Teams: Research & Development Roundup\nAuteur: Ethereum Foundation Team\nDate: Team on December 22, 2021\nURL: https://blog.ethereum.org/2021/12/22/ef-supported-teams-research-and-development-update-2021-pt-3\nCatégorie: Non catégorisé\n\n==================================================\n\ne all have a lot to be thankful for this holiday season, from the first birthday of the beacon chain, to the successful upgrades over the past year and the incredible progress across the entire thereum ecosystem.nns a highly productive year draws to a close, there are a few final gifts to deliver in the form of updates from many (+!!) -supported teams that are always working to improve the network. nd there's annlotnnof substantive material here, so take some time to sort through the table of contents, and dig in!nns always, this roundup series focuses on -supported teams whose members are working to grow and improve thereum as a whole. ncluded in this edition are updates from many teams highlighted innnthe previous reportnn, and other new and rotating groups.nnnjoy! 🦄nnonsensus & (aka  esearch eam)nnuthored by siao-ei angnnn the second half of this year, the milestones in thereum consensus & includednneliverednnthe first beacon chain hard fork ltair on ctober thnn. he main features arennsync committees to support light clientsnnincentive accounting reforms to reduce spec compleitynnpenalty parameter updates towards their planned maimally punitive valuesnneliverednnhe ergennconsensus-layer specs fornninteropsnnandnntestnetsnnnno align withnnhe reat enamingnn, we shifted components to “onsensus ayer” from “th” for clearer communication in the long term.nnn early , our team will focus on helping to deliver the “he erge”, the most significant consensus protocol upgrade ever. ortunately, we have great support from client teams, and others in the community working to make this a reality! n the meantime, we will be continuing our research work on data availability,  scaling, and the features of the “clean up” fork after he erge.nncosystem upport rogramnnuthored by  eamnne published ournn llocation pdatennwith grants totalling $,, for the quarter - and  is coming soon! ou can also check out recent monthly roundupsnnherennandnnherennfor more detailed progress updates from a few of our fabulous grantees.nnehind the scenes, we’re working on a major website overhaul which should make it easier than ever to understand ’s mission and priorities, and for eligible builders to apply for funding or other support. e can’t wait to launch the new site in early !nnthereum.orgnnuthored by am ichardsnno make our work more accessible and to foster more community collaboration, our team publishes an overview of our quarterly roadmap goals. ee ournn product roadmap herenn.nnappy holidays to all from thennethereum.orgnnteam 😀🎄 s always,nnour vision with ethereum.orgnnis to create the best portal for thereum’s growing community and to serve as the front door to thereum for millions of new visitors each month.nnontent updatesnnthereum moves fast! s well as updating hundreds of pages to ensure our content stays up to date and accurate, we’ve also released a bunch of new contentnnommunity hubnnntroduction to smart contractsnnthereum security and scamsnnntroduction to thereum governancennntro to thernnnnnd many new developer tutorialsnnommunity growthnnthereum.orgnneists thanks to hundreds of content and code contributors from the community. n /, we put emphasis on ways to increase contributions and acknowledge the community for the work they were doingnnome stats (ug - ec)nnurnnitubnncontributors increased by %, from  to  😲nnurnniscord communitynnnearly doubled, from , to , members 🎉nne’ve hosted twonncommunitynncallsnnand started office-hours for contributorsnne added  new community guides (trusted members answering questions and moderating chat) 😎nne introduced tiered s to gamify contributions for content, code, and translationsnnranslation rogramnnince hiring our new ranslation ead in uly,nnthe ranslation rogram has really ramped upnn!nnome statsnnetween uly and ovember, the community collectively translated ,, words fornnethereum.orgnn, over  the amount of this same period last year! o put this in perspective, this is equivalent to translating the entirety of almost  books 📚!nne've received translation support from over , community contributors 🤯nne have  languages live onnnethereum.orgnn🌍nne launched an initiative to betternnacknowledge our translatorsnn, including a leaderboard and translator certificates!nn fundingnne're supporting annclr.fundnnround on ayer ! fter over  months of contributing to clr.fund's quadratic funding stack, we've merged our changes to the upstream repo, which adds  network support and a variety of web app enhancements.nnclr.fundnnplans to deploy a funding round on rbitrum ne geared towards the staking ecosystem in anuary, and the  is ecited to offer matching funds to the round. e hope you participate! tay tuned for details. ay public goods!nne've been building on the shoulders of giants. hank you to thennclr.fundnnteam, the  team & clr.fund's community of contributors who continue to push innovations in the  & quadratic funding space.nnhat's netnncreating a learning hub to allow non-technical users to become proficient thereum usersnnbuilding additional resources on running nodes and staking to improve accessibilitynnfurther automating our translation pipeline to release translated content out fasternnepanding the ranslation rogram beyondnnethereum.orgnnupdating content to transition away from thennthnnterminology as the merge approachesnnow does that soundnne appreciate feedback on our roadmap. ur guiding principles are based on delivering the most value in the shortest time, so if there’s something you think we should work on, please let us know! e welcome ideas and contributions from anyone in the community.nnore on contributingnnpsilonnnuthored by le eregszaszinne have created annteam websitennto provide a clear eplainer and to comprehensively list our current and past work.nnt is easy to tell from the following headers that in the second half of the year the team mostly focused on the . t’s also important to mention that we have teamed up with the eth eam to improve the performance of the  interpreter.nn bject ormat ()nnhe first step towards this,nn-nn, went live with ondon and we havennconducted a surveynnacross many testnets and  chains to find a fitting prefi for .nnontinued clarifications were made tonn-nn(including the chosen prefi), and we also proposed further work building on top of itnn-nnto introduce code validation at deploy timenn-nnto replacennnnopcodes with a -tablenn-nnto introduce two new opcodes,nnnnandnnnn, facilitating static jumpsnnuring ctober we presented  atnnisconnn(nnslides herenn, but the recording is not available) and at thennthereum eetup in erlinnn(nnslidesnn,nnrecordingnn).nnther snn- (nnimit account nonce to ^-nn)nnne of our old proposals,nn-nn, was accepted duringnn#nn. t codifies a restriction, which was already (partially) implemented in practice in most clients. fter acceptance we have etended the thereum tate ests suite and adjusted the geth implementation.nn- (nn instructionnn)nn-nnproposes to introduce annnninstruction which pushes  onto the stack. his is a frequently used feature, mostly accomplished today via inefficient or repurposed instructions.nnur analysis found that substantial resources could have been saved with this opcodenno put the “waste” into perspective, across eisting accounts ,, bytes are wasted on   instructions, which means ,,, gas was spent to deploy them.nn- (nnimit and meter initcodenn)nn-nnis a proposal to set a boundary and introduce metering for initcode. his would allow for more optimised analysis and eecution, because implementations would need to deal with less unknowns.nngethnns a collaboration with the eth eam, we started to work on measuring and improving the performance of the  interpreter in geth.nnn the analysis side two reports are noteworthynneth vs evmonenncompares the speed of eth and evmone using the benchmarking suite in evmone.nneth & o compilernneplores the effect of the o compiler version on the speed of geth.nnased on these initial results, we have looked into profiling geth, and finally contributing several improvements to the codebase, most of which has been already merged.  non-comprehensive list of relevant snnnn,nnnn,nnnn,nnnn,nnnn,nnnn,nnnn,nnnn.nnollownnthis linknnto see every . e plan to continue this work in the net quarter.nnevmonennwo bugfi releases of evmone were madenn..nnandnn..nn.nnethashnnhe team also maintains ann++ ethash/keccak librarynn, which is used by evmone and ilkworm.nnhe latestnn.. releasennintroduces a new method for verifying the final thash hashes against the block difficulty. his is both a usability and speed improvement. he method has beennnposted on thresear.chnn.nndditionally, rogo has been deprecated in the library.nnizzynnhe team also participated in thennasm in ebnnconference during eptember. e gave two presentationsnnizzy —  deterministic interpreternn(nnslidesnn) gave a comprehensive overview of what izzy is, how it compares to other engines, and also eplains the reasoning behind many of the design choices we made.nneird quirks while testing ebssemblynnshows a good selection of edge cases we have encountered while developing izzy. he talk also gives some potential solutions and eplainers for these edge cases, as well as how we have etended the official ebssembly test suite to cover them.nnormal erificationnnuthored by eo ltnnn the second half of the year the  team continued to focus on our eisting toolsnnctnne finally released ct .! ou can read the amazing tutorial atnnhttps//fv.ethereum.org////act-./nnto check what’s possible currently and how to use it.nne’re currently refactoring error handling to improve usability.nnevmnnheckernnrack the balances of contracts precisely, includingnnmsg.valuennsent to and from the analyzed contracts.nnlso support the low-levelnncallnnfunction as an unsafe eternal call.nnmprove countereamples by reportingnnblock.*nn,nnmsg.*nnandnnt.*nnvalues that are important for failed verification targets.nneport contract and reentrancy inductive invariants back to the user.nnethnnuthored by eli angennn the second half of , we published  geth releases. s usual, our time has been split between  review/implementation, client optimization/maintenance and reviewing code changes proposed by the community.nnn uly, the ondon hard fork, which included -, was activated. he new gas pricing scheme defined by this  required many changes across all subsystems of geth. e are still discovering and fiing corner-case issues related to - now, si months after its introduction.nnwo security vulnerabilities were discovered in the past si months. or both of them, we followed our security advisory policy we immediately assigned a  number to the issue and published a hotfi release. echnical details about the vulnerability were published - weeks later.nnn the last quarter of , our work has mostly shifted towards implementation and testing ofnnhe ergenn. e are on track to turn geth into the 'eecution layer client' of the merged eecution+consensus (fmr. “eth+eth”) layers. n preparation for he erge, we have re-written much of the sync code to operate under control of the consensus layer. eth also participates in erge testnets.nndditionally, the geth team has been working on several long-term projects, such as implementation of erkle rees, a beacon chain light client, and a new database storage scheme for the thereum state.nnavascript eamnnuthored by olger rewesnnn the last two quarters of , preparations for “the big transitions” on the thereum network was a strong focus of our work. e participated in the erge nterop in reece and released the first erge-testnet ready versions of our client,  and related libraries (see e.g. the thereum client v. release). e also started on an eciting eperiment with the o-thereum erkle/tateless team to natively test stateless block eecution based on a verkle proof served along a modified block header via devpp within our client. f you are interested you can see the followingnntracking issuennto watch our progress.nn bit more applicable for the end usernnright nownn the support of our libraries for the emerging  networks like olygon, rbitrum or ptimism has been improved. hese and some other networks can now directly be referenced to e.g. send a transaction to a certain  network. ee e.g. the ommonnnv..nnrelease for the latest ptimism  network integration.nnnd last but not least there is a  rrowlacier releasennavailablennand on the thers.js front. ichard has just posted an eciting overview on the upcoming thers.js v library changes and updates on hisnnblognn.nnrivacy & caling plorationsnnuthored by hore ildebrandtnnhe rivacy & caling plorations team works to bridge the gap between cutting-edge research in zero-knowledge proofs, and application development on thereum.nnzknnhe goal ofnnzknnis to run smart contracts in a zk-rollup. nfortunately, the  was not designed to run in a zk circuit which makes it a challenge. e want to implement the full set of  opcodes directly into the zk circuits so a smart contract running on  can be deployed to  with minimal modifications. his will allow full compatibility with eisting tooling and enable us to leverage knowledge of the  that the ecosystem has built up over the past years. e are making good progress on specification of the opcodes and implementation of the circuits, and we have early benchmarks and an important goal going forward to bring prover time down.nnnn (zk-optimistic-rollup) is a layer- scaling solution for private transactions using zk- and optimistic rollup. t supports private transfers and private atomic swaps within the layer- network between ,  and . t also provides instant withdrawal with pay-in-advance features and compliance compatibility using spending key and viewing keys. nnhas recently launchednnon testnet - go ahead and check it out. e're working on improving sync-times and on a private echange feature.nnnirep & nirep ocialnnniepnnis a private and non-repudiable reputation system. sers can receive positive and negative reputation from attesters, and voluntarily prove that they have at least a certain amount of reputation without revealing the eact amount. oreover, users cannot refuse to receive reputation from an attester. e are using nirep to buildnnnirep ocialnn a eddit-like platform that allows users to privately accumulate karma. uilding the nirep ocial website was our focus in the past months. roofs in nirep are now indeed so that they can be referred many times and prevent one proof from being submitted twice. nirep can now handle an initial reputation airdrop and user state transition airdrop. e are also improving the efficiency in generating user state and nirep state.nnasic functions, frontend design, frontend and backend of nirep ocial are complete, and we are planning a closed pre-alpha release. heck outnnthis blogpostnnif you want to learn more.nn.fund for veryonennhe goal of the project is to make it easy for any community to run their own  round with clr.fund. his project has been very busy. ou can now deploy your own quadratic funding application with the clr.fundnneployernn. mpower your community to choose and fund its own future, in a fully decentralized manner. heck out ournnubgraphnnandnnocumentationnn.nnnterepnneputation is the key to trust. eople spend years building up their reputation on centralized social platforms, but they have to start from nothing whenever they start using a new app. nterep aims to make reputation portable to epand the compounding benefits of trusted human interactions across the web.nnheck out this blogpostnnfor the initial announcement andnnthe reponn. n the past quarter we have epanded the range of social proof sources, to  and email and have curated groups on-chain, and off-chain via a elegram bot. e are doing a  redesign, improving interaction with client applications and preparing for a live launch.nnemaphore / -eepernnemaphorennis a zero-knowledge gadget which allows users to prove their membership of a set without revealing their original identity. t the same time, it allows users to signal their endorsement of an arbitrary string. t is designed to be a simple and generic privacy layer for thereum dpps. se cases include private voting, whistleblowing, miers, and anonymous authentication. ith -eeper we are focussing on keeping emaphore up to date with the latest zk tools and integrating it with other projects like nterep. e have new libs for handling semaphore proofs and identities. mplementation is now done on top of alo and we’re getting it ready to be used in the browser.nnnn (ate imiting ullifier) is a construct based on zero-knowledge proofs that enables spam prevention for decentralized, anonymous environments. n anonymous environments, the identity of the entities is unknown. e have recently published annneplanatory blog postnnto get more people ecited about the idea. e have finished research around “easibility analysis for  alidator privacy using ”. e're working on productionalizing the “rivate instant chat app using  and nterrep” project. e're also helping to integrate the -eeper plugin into the  projects.nnrotocol upportnnuthored by im eikonnhe rotocol upport () team was formed in  to grow the number of ways in which the teams building or interacting with the thereum base layer are supported. he team’s main focus is enabling core developers to ship network upgrades on thereum’s eecution layer.nno this effect,nnerlinnn,nnondonnnandnnrrow laciernnwere deployed this year. eyond these,  spent significant efforts working towards he erge, first withnnayonismnn, then thennmphora workshopnnand now thennintsugi evnetnn!nnhis accelerating pace and scope of change has required more outreach to the thereum community, which led our team to organize frequent ommunity alls. uring these, application, infrastructure and tooling developers were invited to discuss how to best support protocol upgrades and provide a smooth transition for their users. longside these calls, the team has given several talks and published several posts about the changing thereum roadmap, such asnnthis recent all core devs updatenn,nnthis piece in anklessnnandnnthis recent post on the erge and the application layer in the  lognn.nneyond protocol upgrades, the  team has taken on two major initiatives to ensure clients teams are well supported. irst, annlient ncentive rogramnnwas announced to give teams thereum-aligned long-term incentives. he program provides client teams with a set of  validators that they must run using their software. ssuming teams keep meeting certain performance benchmarks on mainnet, these validators are gradually vested to the teams, which are free to either liquidate them or keep them running to collect rewards and fees. his program aligns teams with thereum, ensures they are “dogfooding” their clients on mainnet, and that they keep delivering performant software.nnecond, annore eveloper pprenticeship rogramnnwas launched. his program provided stipends and mentorship to self-directed individuals who wanted to dive deep into protocol development.  was launched as an eperiment which proved to be incredibly successful! wo cohorts were run, with over  participants. f these, at least  are now working full time in the ecosystem. hese initial cohorts have taught us a lot about what was good and what could be improved with the program. pect a revamped  in !nnastly, the team eperimented with providing infrastructure to the client teams and broader community. o that end,nncrawler.ethereum.orgnnwas shipped and open-sourced. e hope that having an additional crawler running and available for the community to improve, modify or fork helps provide better views of the network’s topology.nneminnuthored by ob tupaynnver the past  months, the emi team has unscrewed the back of our app to do some etensive rewiring. irst among these changes was continued work on moving our code to eact. e also epanded our reach by dialing in some effective channels to new communities, and onboarding new users with a basic product “tour” of our . e’ve plugged in projects into our “eperience”, integrating lither, and ardhat, as well as updating the emi ode etension.nnnd, if that’s not enough, we jammed on some tools for collaborative coding, improving ecentralized  and integrating ithub. ast but not least, we’ve updated our eisting plugins. n short, we’ve maed it out to .nnee more details in our articlenn.nnobust ncentives roupnnuthored by arnabe onnotnnhe  (obust ncentives roup) welcomed new team members and participated in many important milestones for the thereum protocol. or a quick refresher on what the  is and what we care about, you can check outnnrotocol cryptoeconomics with the nn, presented bynnarnabénnat th in uly.nnn the roof-of-take consensus side,nnasparnn, who joined us as full-time research scientist earlier this year, found an issue with the current fork choice, written up asnnhree attacks on roof-of-take thereumnn. ortunately, there is a strong candidate fi that wasnnrecently mergednnin the consensus specs, after many productive discussions with tanford'snnse abnn, who co-authored the "hree attacks" paper. aspar and others also proposed a different mitigation ("nnproposer view mergenn"), that is still under research. heck outnnaspar at isconnnpresenting his results!nnhyamnn, who joined us first as research intern last summer and is now a research assistant at the , releasednna series of notebooksnneploring the beacon chain statistics from many unique angles, includingnnoceanic gamesnnandnninequalitynn. hyam has also been working on an etension to ournneacon runnernno simulation engine that includes reinforcement learning. heck outnnhis talk at nn!nnlock ,,, ugust th,   , was an important date for us the ondon hard fork activated, and with it, -. ver the last year, we've released a series of notebooks presentingnnvarious simulationsnnof the new fee market mechanism, which set the stage for further analysis after launch. arnabé reported some resultsnnearly afternn, and with co-authors (including hyam) wrote up a longer-form paper,nnransaction ees on a oneymoon thereum's - ne onth aternn. he paper is motivated by the behaviour of the  update rule in the real world, and opens new research directions for improvements to the rule.nnhe  was also closely working with thenncad dunnteam in preparingnnan online masterclass in validator economicsnn, supported by a fully etensiblennmodel of thereum economicsnn(in ython).nnnake harmers ython cosystem]nnuthored by eri lowesnnn the second half of , the nake harmers team completed the changes needed across the ecosystem to support the ondon hard fork. his involved wide-ranging, fundamental changes throughout our stack, especially in y-, thereum ester,nneb.pynn, and eth-account. here were also two bug bounties submitted for y- that have been fied. e’ve ramped up efforts to generate educational content, and placed a bigger emphasis on developer relations. nd as always, there is ongoing community support, issue triage, and bug squashing across our ython tools.nne-langnnuthored by rant uerkernnver the past  months, the e team has cut the following releasesnn..-alpha “arlite” (--)nnmulti-file supportnnfunction definitions on structsnnv..-alpha “ade” (--)nnmodule-level constants and functionsnnunsafe supportnnv..-alpha “ridium” (--)nnself declarations in function signaturesnnv..-alpha “aonite” (--)nnquery-based analysis usingnnalsann..-alpha “alaite” (--)nnolidity  decoding checksnn..-alpha “eldspar” (--)nnno notable featuresnnf you would like to know more about our progress over the last  months, you can checkout the following resourcesnnrelease pagennblognn goalsnnortalnnuthored by iper erriamnnhis year has been a big year for thennortal etworknn. e started this year with an idea and only a loose plan for how to build a peer-to-peer network that could deliver lightweight access to the thereum protocol. e now have three independent teams and implementations and are well underway to launching the initial testnet which should evolve into a fully functional network by the end of .nnhe  ortal team has been working hard onnnrinnn, a portal client written in ust. he  avascript team has also been working onnnltralightnn, a portal client written in ypescript aimed at being runnable in the browser. he team fromnntatus.imnnhas also been working onnnluffynn, a portal client intended for integration with the tatus ethereum client and wallet solutions.nnuring this year we have solved the previously unsolved problem of how to distribute the current thereum tate in a manner that is conducive to efficient storage and retrieval. e established thennortal ire rotocolnn, an etensible base protocol that is the foundation of all of the networks making up the ortal etwork. e also had the pleasure of working with multiple participants of the ore eveloper pprenticeship rogram who used the ortal etwork projects as a jumping off point for getting into ore rotocol development.nnecurity ecurity / onsensus ests]nnuthored by ecurity (ecurity / onsensus ests) eamnnn the security and testing side, a lot of attention has been given to the ondon upgrade and the upcoming merge. e’ve made updates on tooling for test authoring and continued to improve the reference tests.nnoliditynnuthored by ranziska eintelnnn the second half of this year, we released olidity versions .., .., .. and ..nnolidity ..nnbrings younnuser defined value typesnnas a major new feature. t also improves overriding interface functions, reading from immutables, and more.nnolidity ..nnis a pure bugfi release and fies two important, but low severity, bugsnnigned mmutables ugnnser efined alue ypes ugnnolidity ..nncontains eternal function call optimizations, enables the new  code generator for pure ul mode and can report contract invariants and reentrancy properties through the hecker.nnolidity ..nnadds a first implementation of a anguage erver and allows a safer way to perform -encoding.nnoreover, several olidity team members presented at lobal’s eveloper ool ummitnnari withnn“hat’s ew in olidity”nnranzi withnn“et evel ource erification with ourcify”nnhe olidity documentation got a few upgrades, most notably, we...nnupdated thennresources sectionnnwith general resources, thereum s, editor integrations, olidity tools, olidity parsers and grammars.nnadded the functionality tonnopen code eamplesnnin the documentation directly in emi.nnastly, wennlaunchednnour yearly olidity eveloper urvey. f you are a olidity developer,nnplease take  minutes to share your feedback and take part in the surveynnherenn. he survey will be open until st of ecember .nnh and we’re hiring!nnave a look at ournn++ ngineer oliditynnopening.nnoratesnnuthored by hibaut chaeffernnn the second half of , orates advanced on different frontsnnanguagennype aliasing, as well as the ability to make function calls in constant definitionsnnupport for the ternary epression syntannnable constant generics on structsnnroof systemsnneduction of the deployment cost for some olidity verifiersnnpose recursive verification in the standard librarynndd support for roth  ceremonies (coming soon)nnompiler performancenntensive work on reducing memory and time requirements of the compiler (coming soon with metrics!)nnor a full list of the changes, check out thennchangelog