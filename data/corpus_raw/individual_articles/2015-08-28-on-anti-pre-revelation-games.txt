Titre: On Anti-Pre-Revelation Games\nAuteur: Vitalik Buterin\nDate: August 28, 2015\nURL: https://blog.ethereum.org/2015/08/28/on-anti-pre-revelation-games\nCatégorie: Non catégorisé\n\n==================================================\n\nn increasing number of proposed applications on top of thereum rely on some kind of incentivized, multi-party data provision - whether voting, random number collection, or other use cases where getting information from multiple parties to increase decentralization is highly desirable, but also where there is a strong risk of collusion.   can certainly provide random numbers with much higher cryptoeconomic security than simple block hashes - and certainly better thannndeterministic algorithms with publicly knowable seedsnn, but it is not infinitely collusion-proof if % of participants in a  collude with each other, they can set the result to whatever they want.  much more controversial eample is the prediction marketnnugurnn, where decentralized event reporting relies on a highly advanced version of annchelling schemenn, where everyone votes on the result and everyone in the majority gets rewarded. he theory is that if you epect everyone else to be honest, your incentive is also to be honest to be in the majority, and so honesty is a stable equilibrium the problem is, however, that is more than % of the participants collude, the system breaks.nnhe fact that ugur has an independent token provides a partial defense against this problem if the voters collude, then the value of ugur's token can be epected to decrease to near-zero as the system becomes perceived as useless and unreliable, and so the colluders lose a large amount of value. owever, it is certainly not a total defense. aul ztorc's ruthcoin (and also ugur) includes a further defense, which is quite economically clever. he core mechanism is simple rather than simply awarding a static amount to everyone in the majority, the amount awarded depends on the level of disagreement among the final votes, and the more disagreement there is the more majority voters get, and minority voters get an equally large amount taken out of their security deposit.nnhe intent is simple if you get a message from someone saying "hey,  am starting a collusion even though the actual answer is , let's all vote ", in a simpler scheme you may be inclined to go along. n ztorc's scheme, however, you may well come to the conclusion that this individual isnnactuallynngoing to vote , and is trying to convincennonly a few percentnnof people to vote , so as to steal some of their money. ence, it creates a lack of trust, making collusions harder. owever, there is a problem precisely because blockchains are such ecellent devices for cryptographically secure agreements and coordination, it's very hard to make it impossible to colludennprovablynn.nno see how, consider the simplest possible scheme for how reporting votes in ugur might work there is a period during which everyone can send a transaction supplying their vote, and at the end the algorithm calculates the result. owever, this approach is fatally flawed it creates an incentive for people to wait as long as possible to see what all the other players' answers are before answering themselves. aking this to its natural equilibrium, we would have everyone voting in the last possible block, leading to the miner of the last block essentially controlling everything.  scheme where the end comes randomly (eg. the first block that passes  the usual difficulty threshold) mitigates this somewhat, but still leaves a great amount of power in the hands of individual miners.nnhe standard cryptographer's response to this problem is the hash-commit-reveal scheme every playernni]nndetermines their responsenni]nn, and there is a period during which everyone must submitnnh(i])nnwherennhnncan be any pre-specified hash function (eg. ). fter that, everyone must submitnni]nn, and the values are checked against the previously provided hashes. or two-player rock paper scissors, or any other game which is purely zero-sum, this works great. or ugur, however, it still leaves open the opportunity for credible collusion users can voluntarily revealnni]nnbefore the fact, and others can check that this indeed matches the hash values that they provided to the chain. llowing users to change their hashes before the hash submitting period runs out does nothing users can always lock up a large amount of money in a specially crafted contract that only releases it if no one provides a erkle tree proof to the contract, culminating with a previous blockhash, showing that the vote was changed, thereby committing not to change their vote.nn ew olutionnnowever, there is also another path to solving this problem, one that has not yet been adequately eplored. he idea is this instead of making pre-revelation for collusion purposes costly within the primary game itself, wennintroduce a parallel gamenn(albeit a mandatory one, backed by the oracle participants' security deposits) where anyone who pre-reveals any information about their vote to anyone else opens themselves up to the risk of being (probabilistically) betrayed,nnwithout any way to provennthat it was that specific person who betrayed them.nnhe game, in its most basic form, works as follows. uppose that there is a decentralized random number generation scheme where users must all flip a coin and supply either  or  as inputs. ow, suppose that we want to disincentivize collusion. hat we do is simple we allownnanyonennto register a bet againstnnany playernnin the system (note the use of "anyone" and "any player" non-players can join as long as they supply the security deposit), essentially stating " am confident that this person will vote  with more than / probability", where  can be  or . he rules of the bet are simply that if the target supplies  as their input then  coins are transferred from them to the bettor, and if the target supplies the other value then  coins are transferred from the bettor to the target. ets can be made in an intermediate phase between commitment and revelation.nnrobabilistically speaking,nnanynnprovision of information to any other party is now potentially etremely costly even if you convince someone else that you will vote  with % probability, they can still take coins from you probabilistically, and they will win out in the long run as such a scheme gets repeated. ote that the other party can bet anonymously, and so can always pretend that it was a passerby gambler making the bets, and not them. o enhance the scheme further, we can say that younnmustnnbet against  different players at the same time, and the players must be pseudorandomly selected from a seed if you want to target a specific player, you can do so by trying different seeds until you get your desired target alongside a few others, but there will always be at least some plausible deniability. nother possible enhancement, though one which has its costs, is to require players to only register their bets between commitment and revelation, only revealing and eecuting the bets long after many rounds of the game have taken place (we assume that there is a long period before security deposits can be taken out for this to work).nnow, how do we convert this into the oracle scenario onsider once again the simple binary case users report either  or , and some portion , unknown before the end of the process, will report  and the remaining - will report . ere, we change the scheme somewhat the bets now say " am confident that this person will vote  with more than  probability". ote that the language of the bet should not be taken to imply knowledge of  rather, it implies an opinion that,nnwhatever the probability a random user will vote  isnn, the one particular user that the bettor is targeting will vote  with higher probability than that. he rules of the bet, processed after the voting phase, are that if the target votes  then  * ( - ) coins are transferred from the target to the bettor, and otherwise  *  coins are transferred from the bettor to the target.nnote that, in the normal case, profit here is even more guaranteed than it is in the binary  eample above most of the time, if  is the truth,nneveryonennvotes for , so the bets would be very low-risk profit grabs even if comple zero-knowledge-proof protocols were used to only givennprobabilisticnnassurance that they will vote for a particular value.nnide technical note if there are only two possibilities, then why can't you determinenni]nnfromnnh(i])nnjust by trying both options he answer is that users are actually publishingnnh(i], n)nnandnn(i], n)nnfor some large random noncennnnnthat will get discarded, so there is too much space to enumerate.nns another point, note that this scheme is in a sense a superset of aul ztorc's counter-coordination scheme described above if someone convinces someone else to falsely vote  when the real answer is , then they can bet against them with this information secretly. articularly, profiting from others' moral turpitude would now be no longer a public good, but rather a private good an attacker that tricks someone else into a false collusion could gain % of the profit, so there would be even more suspicion to join a collusion that's not cryptographically provable.nnow, how does this work in the linear case uppose that users are voting on the / price, so they need to supply not a choice between  and , but rather a scalar value. he lazy solution is simply to apply the binary approach in parallel to every binary digit of the price an alternative solution, however, is range betting. sers can make bets of the form " am confident that this person will vote between  and  with higher probability than the average person" in this way, revealing even roughly what value you are going to be voting to anyone else is likely to be costly.nnroblemsnnhat are the weaknesses of the scheme erhaps the largest one is that it opens up an opportunity to "second-order grief" other players although one cannot, in epectation, force other players to lose money to this scheme, one can certainly epose them to risk by betting against them. ence, it may open up opportunities for blackmail "do what  want or 'll force you to gamble with me". hat said, this attack does come at the cost of the attacker themselves being subjected to risk.nnhe simplest way to mitigate this is to limit the amount that can be gambled, and perhaps even limit it in proportion to how much is bet. hat is, if   ., allow bets up to $ saying " am confident that this person will vote  with more than . probability", bets up to $ saying " am confident that this person will vote  with more than . probability", etc (mathematically advanced users may note that devices like logarithmic market scoring rules are good ways of efficiently implementing this functionality) in this case, the amount of money you can etract from someone will be quadratically proportional to the level of private information that you have, and performing large amounts of griefing is in the long run guaranteed to cost the attacker money, and not just risk.nnhe second is that if users are known to be using multiple particular sources of information, particularly on more subjective questions like "vote on the price of token  / token " and not just binary events, then those users will be eploitable for eample, if you know that some users have a history of listening to itstamp and some to itfine to get their vote information, then as soon as you get the latest feeds from both echanges you can probabilistically etract some amount of money from a participant based on your estimation of which echange they are listening to. ence, it remains a research problem to see eactly how users would respond in that case.nnote that such events are a complicated issue in any case failure modes such as everyone centralizing on one particular echange are very likely to arise even in simple ztorcian schemes without this kind of probabilistic griefing. erhaps a multi-layered scheme with a second-layer "appeals court" of voting at the top that is invoked so rarely that the centralization effects never end up taking place may mitigate the problem, but it remains a highly empirical question.