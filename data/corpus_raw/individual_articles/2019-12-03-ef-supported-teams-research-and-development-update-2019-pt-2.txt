Titre: EF-Supported Teams: Research & Development Update\nAuteur: Ethereum Foundation Team\nDate: Team on December 3, 2019\nURL: https://blog.ethereum.org/2019/12/03/ef-supported-teams-research-and-development-update-2019-pt-2\nCatégorie: Non catégorisé\n\n==================================================\n\nriends,nnince the last -upported eams report, progress has been made across the board. rom improved network conditions, to the coming stanbul release and th. and th development, all areas core to the functionality and sustainability of thereum are advancing.nnhis series focuses on teams and efforts from the oundation and larger thereum ecosystem that are working to grow and improve thereum as a whole. n this edition, we're covering updates from many teams highlighted innnthe previous reportnn, fully supported projects that are core elements of the thereum ecosystem like th. esearch, eth and olidity, and other ecosystem efforts.nnnjoy!nnleth / ++ thereumnnuthored by ndrei aiborodannhe leth team was one of the client teams working on stanbul upgrade to the th. chain, andnnleth ..nnwas released with full support for stanbul.nn & other consensusnnmportant milestones for the evmone projectnnfter the initial release of this eperimental fast  implementation, we focused on squeezing even more performance out of it. henn..nnrelease is ~% faster than the previous one. ollowing this, thenn..nnrelease brought evmone to compatibility with the stanbul spec. or those more interested in the concepts evmone tries to eplore and for more information about optimizing , please see the slides from thennptimization techniques for  implementationsnnevcon presentation and thennfficient gas calculation algorithm for nnarticle.nnhe  project (the cross-language  for  implementations) has received required updates with support for stanbul. ll this is packaged as thenn ..nnrelease.nnhere were a number of optimizations in the aleth-interpreter to get rid of unnecessary state access in the implementation of some opcodes. hese inefficiencies become apparent thanks to the great  test suite provided bynnevmone projectnn.nnhe aleth-interpreter also switched from using boostmultiprecision tonnint librarynn. his is a step towards shipping aleth-interpreter without boost dependency, but also allowed to do some interesting benchmarks to see how inefficient boost implementation of -bit integer was for our needs.nnfter stanbul, we opted to implement a couple of s proposed for the future hard fork (erlin)nn-nneduced gas cost for call to self andnn-nneduced gas cost for static calls made to pre-compiles. hese implementations now can be activated in the testeth tool, see belownnetworkingnne have implemented an optimization that has for a while been adopted by other mainnet clients propagating new blocks to peers immediately after o check instead of waiting for a full validation and eecution. e've also set a cap on the number of previously dropped transactions that are remembered by the transaction pool (now it's  such transactions).nnhe client version reported during devpp handshake was fied, and allowed leth's version to be correctly shown onnnethernodesnn.nnnne've made a number of fies to better conform to input/output formats used in  interfaces of other clients. any methods got a significant performance boost thanks to a fi getting rid of unnecessary block transaction re-eecutions. his may be noticed in use cases with many frequent  requests, for eample when usingnnretestethnnwith aleth.nnatabasennebuilding the indices from eisting blocks database was fied and optimized, this will allow us to optimize and modify the layout of the inde database in the future.nnesteth toolnnonsensus tests folder structure was reorganized by the testing team, and testeth now supports it - all the tests covering fork rules before stanbul are in egacyests suite.nntate tests can now be generated and run with a string like "orkame+_number" in place of a regular fork name in epect section. his allows for anyone planning to prototype new s in aleth to generate tests for them before  is accepted for the fork - this is the basic idea of thenn-centric forking processnn, being adopted currently by ll ore evs community. s an eample of the mechanism, two new  mentioned above (- and -) can be activated in testeth, and we've created a couple ofnnstatenntestsnnto illustrate this feature.nne've also fied and streamlined the feature of testeth to run any custom test file (outside of predefined consensus test structure) and made it's output to be more conformant with the evm tool of go-ethereum. his allowed us to integrate testeth intonngoevmlabnnproject, and now aleth's  implementation is participating in cross-fuzzing effort alongside  other major clients' s.nnmong other improvementsnnetter build process for those building aleth from sources.nnmprovements to docker image.nncosystem upport rogramnnuthored by  eamnnaiwan-pecific rantsnne recentlynnawardednna round of five grants ofnnnn,nnnn−nn,-nnnn,nnnn−nn, atnnrosslink aipeinn. his is the most recent in a series of local-specific waves intended to recognize the contributions of communities around the world.nnrowing on-inancial upportnne're continuing to epand our definition of "support" for projects where a regular grant is not the right fit. ome of the non-financial support we've provided is feedback rounds with epert advisors, connecting teams that are working on similar things,  credit, invitations to participate in events and more.nnebsite mprovementsnnur new websitennhttps//cosystem.upport/nnis growing! e've started small with a  section and some changes to the front page - we'll follow with a grants showcase and dedicated blog for regular updates.nne don't want valuable skills going to waste, so we've revamped our inquiry forms to be a bit more open-ended, including anndedicated pathwaynnfor people who are interested in contributing to the ecosystem but aren't sure yet where they fit. eel free to take a look around, and to apply!nnwasmnnuthored by le eregszaszi and aul worzanskinnince the last update, the wasm team's focus has shifted towards research on th ., working in close collaboration with other teams.nns the launch of th . phase  approaches, the phase  eecution layer is under active development, in parallel with the development of phases  and . ultiple proposals have been made for the architecture of phase . he wasm team has been working on informing designs with prototypes and benchmarks, building upon a minimal foundation in cout.nncoutnnhenncout specificationnnis a minimal interface for s (ecution nvironments). his minimal interface is just enough to prototype stateless s, which are needed to validate the stateless model, and to inform the design of wasm and phase .nncout has three implementationsnnscoutnnin ust, designed for rapid prototyping and collaboration (it uses a asm interpreter with support for profiling),nnscout.tsnnin ypescript for rapid prototyping and browser support,nnandnncoutnennin ++, designed for performance and production use, to be embeddable by th . clients.nnecution nvironmentsnnnlike the th  stateful model which has known scaling problems, th  is proposed to be stateless, where state is stored off-chain, and only a hash representing the state is stored on-chain, with witnesses passed as part of the transactions.nnhe stateless model presents new challenges. rototypes and measurements are needed to validate its viability.nnhe wasm team has put great effort into prototyping and measuring stateless s, which we classify as followsnnn  which must be compatible with th  data structures and eecution.nn (tateless erkle atricia rie) using  to serialise the witness and transaction data, and using the th signature scheme.nnn  implementation in ssemblyscript.nnbiturbonn(previously known as urbooken), using ultiproof to more efficiently encode witness data and also supporting  eecution.nnesigns without the need for backwards compatibility.nn (atajainen akinen erkle) okennn which is optimized for witness size and eecution time.nnroth verifier implementation for supporting zk-s within th .nn verifier implementation.nnf notable interest is the active research in the interaction between the th  and th  chains. o aid the evaluation of the "switchover" proposal, where th  is moved into a  on th , the th  s mentioned above were prototyped. he team is also actively evaluating proposals bridging the two networks, and their implications on  design.nnur ultimate goal is to provide a good developer eperience for eisting and new pps.nnhis  work has been feeding back into the design of cout and th .nnast ryptographynnor wasm to be successful, we must eecute epensive crypto on-chain. uckily, crypto often has runtime bottlenecks in bigint arithmetic. irst we have benchmarked various implementations of cryptographic primitives to identify bottlenecks. hen we designed a fast native bigint  to address these bottlenecks. inally we augmented the highly optimisednnwebsnarknnlibrary, in collaboration of its creators, to call this bigint .nnhe results are encouraging with this bigint  implemented in interpreters, we approach native speeds on elliptic curve operations (!), which are building blocks for lots of crypto. e can now eecute pairings at near-native speeds. his is the biggest recent success story of wasm.nnhis work has allowed the  prototypes above to operate within the performance constraints of th .nnpeed, etering, izennwasm has many other projects related to speed, metering (reducing metering runtime overhead and approimating runtime accurately), and bytecode size. rom asm engine optimization, to metering analysis, to bytecode transformations, the wasm team is working hard to design the best eecution system possible.nnoolingnne are continuously working on tooling for wasm.nnindings for th  and bigint s are provided fornnssemblyscriptnnandnnustnn.nnf a asm bytecode requires augmentation, an etensible tool namednnchiselnnis developed to provide various transformations (such as bytecode size reduction and adjustments of imports/eports) needed by both wasm and non-wasm use cases.nnormal erificationnnuthored by eo ltnnhe new ormal erification team is working on tools, supporting other oundation teams with formal models and proofs, and combining efforts with members of the thereum  community.nnpecifically recent work has focused onnnolidity's hecker, an unbounded model checker for olidity smart contracts.nnul, ul semantics in . ul is further used to support the olidity compiler by computing bisimulation proofs for non optimized and optimized ul code.nneading the development of a smart contract specification language with support from various members of the  community. he specification language, used to describe contract properties, aims at being simple and supported by many  tools.nnupporting the th research team and untime erification in the eacon hain verification efforts.nnaintaining  (together with apphub), a fully compliant askell  implementation.nnupporting the esting team etending the coverage of the thereum tests with the gaps discovered in different  implementations.nnethnnuthored by éter zilágyinnith the v.. release out in uly, the eth team has been mostly busy iterating on the eisting code base fiing anything issues discovered andnnprepping the client for the stanbul hard forknn. part from these maintenance changes - totalling  releases - the team's also been laying the groundwork for some new things to come.nne've built up a treasure trove of  s revolving around s (thereum ode ecords) to be used in networking and peer discovery. ith the help of these, eth nodes have been gradually etended to advertise a lot more information about themselves than the eisting protocols allowed (v and v addresses, thereum network affiliation, configured and applied forks, light server capabilities, etc). he fork id work has already been deployed on top of the eth protocol, permitting eth nodes to cleanly partition the network between incompatible machines. he records are also being indeed by a new discovery service eposed over  (not yet finalized), which makes eclipse attacks eponentially harder and will permit thereum to run in environments where  is locked down ( over ).nnerformance wise, we are working on multiple fronts. n one end of the spectrum, we are trying to reduce the load on the network by making transactions (and maybe even blocks) propagate smarter whilst on the other end we are working on a state snapshotter that can follow the live chain and act as an acceleration structure for  eecution as well state sync. n between, we are working on various configuration options for eth that would permit users to discard parts of the database that are of no use for them (without impacting network health), saving precious  capacity. hese are all promising paths and we'll be sharing some numbers in the near future.nn significant amount of work went into the light client infrastructure too, permitting server operators to assign and manage client priorities and resource allowances via the  . hilst long term, light client incentivization is planned to work through the peer-to-peer protocol, the current feature set already permits an operator to gather payments outside of eth and synchronize those with eth's internal accounting. his should immediately allow anyone to create a paid light server service (though be aware, that this is at a prototype phase). ork is currently being done towards the fully  payment layer.nnavascript eamnnuthored by amuel urter, olger rewes, arc arreau, verton raga, ichard oorennou might have already heard, as it was no secret, but will take the occasion of this  ev eport to officially announcennthe  has formed a powerful new avacript teamnnwhich brings together the following well-established projects under one roofnneb.jsnn.nnthers.jsnn.nnthereumnn.nnridnn.nneople from these different teams have already started to contribute across project lines and tonndiscuss interoperability issuesnnand we epect strong synergies to unfold in the mid-term future. e used this first quarter as a new team to grow together, build trust and set up necessary organizational structures. pect to hear more in  when we will present and eecute on a coherent strategy and vision to maimize our impact to support the thereum avacript/ypecript developer ecosystem (you are very much invited tonnjoin the discussionnn). his will go beyond the reach of the former single projects.nnhe current projects will not be forgotten, however. e are very much aware that we have to care for and further develop on tools which are widely used within the community. o here are the respective updates to shine some light on what happened within these projects during the last quarter.nneb.jsnne have released multiple patches fornneb.jsnnsince the last  blog post and switched over to semantic versioning. hose patches added ypecript support, etended the transaction signing functionalities, added the transaction confirmation workflow properties, added the long-outstanding - methodnngethaindnn, added thennconnectednnevent to the subscriptions, etended the provider interface with the methodnnsupportsubscriptionnnand additional utility functions to work with bloom filters.nnurther details about the new features and improvements can be seen in our release announcements onnnitubnn.nnurrently, we're focused on reducing the bundle size, improving performance, adding reconnection for thennebsocketrovidernn, and improving the ypecript .nnn top of all of these great improvements, we've also had the chance to welcomennhrisnnto the - eam. hris currently supportsnneb.jsnndevelopment, but will be involved in all other - packages as well.nnthers.jsnne've been gettingnnvnnready for public consumption, and adoption has been steadily growing.  huge thanks to everyone trying it out and reporting issues.nnhe focus on v has been adding etensibility and improving the  for framework developers, including a new framework, ethers-app, with a focus on dapp developers.nnince the number of new issues has dropped off, we epect to launch v to production quite soon, with just a few small changes in the pipeline and a couple of nodes left in the completely revamped documentation.nnthereumnnost noteworthy on thennthereumnnside are the releases of the different components targetingnnstanbulnnsupport the  has gotten a largernnv..nnupdate in eptember and we are currentlynnironing outnnthe last bugs to make the  fully compliant with the official test suite. ther updates to be mentioned in thennstanbulnncontet are the releases on thenntransactionnn,nnblocknnandnncommonnn(hardfork and network logic) libraries.nnridnnince the last  blog post update, several major upgrades were made tonnthereum ridnn. he app now lives in your operating system taskbar and provides a simple  to download, configure and run thereum clients and tools. he plugin system continues to be refined with each new integration, but equally eciting are rid pps. pps have been made available for testing  methods, querying block data via eth's raph implementation, signing transactions with lef, and more. he team has been busy writing tutorials for what you can do using rid, which you can find on thennedium publicationnn.nnython cosystem y/rinity/eb.py/yper]nnuthored by iper erriamnneb.pynnecent work has been towards improved stability and documentation. urrent focus is on adding async support for the library.nnrinitynnhe rinity client is working towards a beta release which would include the newly developed "eam ync" (nnhttps//medium.com/jason.carver/intro-to-beam-sync-afdbeann). e are also focusing on collaborative efforts with the broader ecosystem of client teams to try and tackle some of the larger problems like state bloat and figuring out a migration path for th . into the . world.nnthnne continue to focus on ecosystem tooling. hennethpm-clinncontinues to improve allowing installation of packages from various sources as well as constructing and publishing packages.nneminnuthored by ann evreaunnegarding emi, we have quite a lot of updates to share. n recent months, our team has been at worknnmproving emi lugin and working with the communities in various ways -nnrandchtroumpfnn.nnmplementing a ebocket lugin for di inovcic's github integration.nnelp uorum to integrate their emi plugins.nnork with affle (thworks) on their plugins.nnork with the ode ethereum team to integrate the plugin engine as a ode etension.nnwitch loading plugin resources to be fully decentralized ( for the moment).nnemi librariesnnniketnnjoined the team recently for improving, maintaining and promoting the remi libraries repositorynnhttps//github.com/ethereum/reminn. hat includes the critical work in remi-debug (transaction debugging), remi-tests, remi-solidity, remi-analyzer (new module added warning for ether transfer in loop)nnemi libraries finalizing remi-simulator and adding more tests to remi-debugnniurimatiasnnmproving the 's file eplorer for supporting folders and standard features. orking with thworks on new themes. sing the onaco editor. et compiler version according the olidity pragma -nnianahus ryestew niket randchtroumpfnne introduced emi desktop herennhttps//medium.com/remi-ide/remi-desktop-ceeeenn, and we are now finalizing it. eep an eye out for a release very soon! -nnyann lianahusnnemi orkshop is a plugin running within the emi plugin .nnt allows for creating tutorials, registering tutorials, and for students and learners to practically run tutorials. he scope of tutorials being made is very broad (olidity, yper, general therum concept, etc...). t depends on the tutorials creators! he first  was successful and we are now moving toward releasing a first version with the help of different teams from the community for receiving advice and feedback. -nnrandchtroumpf ryestewnnorkshops and outreach beyond the community one aspect of our work is also to contribute in the educational effort through various ways. e epect this to take more importance in . -nnryestew niket randchtroumpf teamnnrganize workshops / meetups (, onsensys, evcon, appcon).nneet with organisations and people from outside of the community. ot necessarily to onboard them technically, but more to give a first impression of what is blockchain, ethereum and more.nnractically build a tool for that (see emi workshop)nnesearch ]nnuthored by ditya sgaonkarnnor the asper  team, our focus as of late has been onnnescribing the minimal  asper protocol along with validator strategies for liveness in a unified framework (named alid abeled tate transition & essage production system, ). ublic document is , will be released soon.nnormal verification of nnsing  asper elements to improve the th. design, such asnnhttps//ethresear.ch/t/cross-shard-messaging-system/nnommunity outreach efforts such as this nnhttps//www.reddit.com/r/ethereum/comments/dsizj/ama_we_are_the_cbc_casper_research_team/nntay tuned for more soon!nnesearch lasma]nnuthored by lasma roupnnince ay, we have been hard at work furthering advancements in scaling technology. here are  different teams in the ecosystem building out the eneralized lasma spec for multiple blockchains, including mise, atic, ryptoeconomics ab and lasm. s many of our peers are working hard on production payments, we began to look into slightly less researched areas for scaling, such as application development and general composability. evelopments on this front include the ptimistic irtual achine - a universal dispute language for layer constructions, as well as our demo with niswap for evcon - a scalable payments and echange game that can be found atnnnipig changenn. he game is built on an optimistic rollup chain - a design which emerged from conversations with arry hitehat & italik at the caling thereum conference in early une.nns we wrap up the end of the year, we are preparing to push out a paper for the , as well as writing up more in-depth documentation for ptimistic ollup. or now, those who are interested in learning about it can find a description of it on our blog where we describe how to build it for arbitrary smart contracts, along with some early documentation outlining the path from plasma to optimistic rollup onnnur orumnnhttps//plasma.build/t/rollup-plasma-for-mass-eits-comple-disputes//nnn ithubnnhttps//gist.github.com/karlfloersch/bfabfeaacaadcnnlasma allnnhttps//youtu.be/po_tnnesearch erenity / th]nnuthored by  eamnnollowing evcon, anny and the th research team began work on a weekly series of th uick pdates, and recently on a series focusing on validating in th. or the latest news and progress as we draw nearer to the launch of hase , see the links below, and stay tuned to thenn lognn!nnn general, progress continues toward hase  testnets and mainnet launch. hase  specifications and prototypes move in parallel, while hase  continues active and fruitful &.nnalidated taking on th #nn- --nnth uick pdate #nn- --nnth uick pdate #nn- --nnth uick pdate #nn- --nnth uick pdate #nn- --nnecurity ecurity / onsensus ests]nnuthored by artin olst wendennn the security side, there has been a lot of action regarding the stanbul hard-fork. he old python-based fuzzer (vmlab)nnhas been rewritten in onn, and has been used to create -targeted fuzzers. hese fuzzers have been used to generate test-cases (finding implementation flaws in both esu and ethermind) and used to run millions of test-cases comparing eth and arity - and as of late ovember, we also got leth and ethermind s running on the same fuzzer framework. o we are now up to four s doing differential fuzzing!nneanwhile, we are also running libfuzzer-based fuzzers on eth and arity, an effort that is being led bynncryptomentalnn.nn while ago, it was announced on the ounty page thatnnnnnnnnnnnnwnnannsnnannlnnlnnonncnnanntnnenndnntnnonnwnnannrnndnnsnnsnnenncnnunnrnninntnnynnannunndnninntnnsnnonnfnnnnnnnnsnn.nnnnunntnnonnfnntnnhnninnsnn,nnwnnennhnnannvnnennannwnnannrnndnnenndnn  was allocated towards security audits of s. ut of this, we have awardednnnnnnnnnnnnwnnannsnnannllnnocnnanntnnenndnntnnonnwnnannrnndnnssecnnunnrnninntnnynnannunndnninntnnsonnfnnnnnnnnsnn.nnnnunntnnonnfnntnnhinnsnn,nnwnnennhannvnnennannwnnannrnndnnenndnn each to eville retchnncontract-library.comnnand ubert itzdorf (hainsecurity) for their work helping to assess the security impact of -.nneveral other bounties have been awarded, most of which will be shared publicly soon.nnoliditynnuthored by hristian eitwiessnernnhe olidity language and compiler continues to stabilize and add features requested by the community. hese include options to output olidity code for use in a variety of fleible formats, stability and security changes. he team is working on a new .. release as well as updates to the .. brach.nnebassemblynnolidity supports eperimental preview output of webassembly code using the --ewasm switch. e etended most of the ul optimizer stages to cope with easm code, are working on the glue code that translates -flavoured ul to easm-flavoured ul and have a working prototype for easm binary code generation which is needed to deploy contracts.nnolidity ..nne are almost finished with implementing breaking changes and can hopefully release olidity .. later this year. ome of the new changes includennequire eplicit "virtual" and "override" keywords for overriding functions.nnncoder is no longer eperimental.nn fallback function is split into a "receive ether" function and an actual "fallback" function.nnbstract contracts have to (and can be) marked "abstract".nntructs and enums can be defined at file-level.nnisallow setting the length of a storage array arbitrarily.nnupport push() to add new default-initialized element to dynamic storage array.nndd "leave" statement to ul / nline ssembly to return from current function.nnupport multiple return values in atpec.nnetter error message formatting on the commandline.nnetadata hash is now  by default and can be switched to warm or removed.nnllow "revert reason strings" to be removed from the binary.nn heckernnhe hecker has a new model-checking engine that supports loops and allows checking assertions considering an unbounded number of transactions. ead more information about the changes herennhttps//medium.com/leonardoalt/smtchecker-toward-completeness-acenn.nne are currently working on supporting function calls in the new engine, which will enable multi-contract analysis even when the called code is unknown.nnul ptimizernnhe ul optimizer can now take side-effect-free-ness of user-defined functions into account and thus optimize across such function calls. t is able to remove redundant sload and mload calls and can take conditional local values of variables into account.nnompiler nterfacennf standard-json is used, the compiler only generates bytecode for the selected contract or stop after parsing and analysis if no bytecode is requested.nnhe option --error-recovery can be used to recover from most parser errors so that you can create something like an  also for invalid input.nnpart from the changes listed above, we implemented numerous small bugfies and features.nntate hannel esearchnnuthored by iam ornennver the last several months thereum's state channels & community has made rapid progress.nnost ecitingly, state channels are live on mainnet.nnonnetnn, a micropayments service built on top of our work, has been live in production since eptember . he scalability and  enhancements brought by state channels are no longer theoretical, they're benefiting users right now.nno try it out!nnehind the scenes, & has been busy over the last  months. his summer, the two primary state channel research groups - ounterfactual and agmo - unified their work into a single project and protocol, simply called "tatehannels". his unification has allowed us to move at a faster rate, and also provide an easier eperience for thereum's application developers, who do not need to think about which channels standard they intend to support.nnore specifically, over the last few months we havennompletednnmerging  and agmo codebasesnn.nnmplemented a lient  documentednnherennand documented the protocolnnherenn.nne-wrote our olidity contract codebase to yield significant gas savings for both the "happy case" ( → ) and the "challenge case" ( → ).nnitten thennorceove protocol in a formal specification languagenncalled +. his allowed us to find many interesting optimizations to the protocol and identify unintuitive attack vectors.nnou can read more about that on our research forumnn.nnhat's net for state channelsnne're working on  demo applications, built entirely on top of the lient  and run in the browser through our reference hub.nnn-boarding new projects, recruiting new contributors, and continuing to make state channels etremely developer friendly.nnoratesnnuthored by acob berhardtnne're ecited to share a significant new update on progress toward making orates a powerful, yet user-friendly toolkit for zks on thereum.nnreat news for orates developers n-browser development of orates code is now supported innneminn. ou can find the orates plugin through the plugin manager in the left tab.nn long standing request was a richer type system, and with our last release, we shipped eactly that orates now supports comple user-defined types in the form of structs as well as multi-dimensional arrays. o enable seamless interaction with orates programs using these new types from the outside world, we've added a -, which allows easy programmatic access.nnn an effort to make orates more readable, we refactored our module system and changed file endings of orates source code files tonn.zoknn. nternally, the parser re-implementation based on a formal  grammar ---mentioned in our last update post--- was completed successfully.nninally, more optimizations were introduced on compiled programs to reduce eecution and proof generation time. o educate the community, we presented these results as well as applications using orates at evcon  in saka!