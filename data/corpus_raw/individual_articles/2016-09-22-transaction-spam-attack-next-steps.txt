Titre: Transaction spam attack: Next Steps\nAuteur: Vitalik Buterin\nDate: September 22, 2016\nURL: https://blog.ethereum.org/2016/09/22/transaction-spam-attack-next-steps\nCatégorie: Non catégorisé\n\n==================================================\n\noday the network was attacked by a transaction spam attack that repeatedly called the  opcode (see trace samplennherenn), thereby creating blocks that take up to ~- seconds to validate due to the ~, disk fetches needed to process the transaction. he result of this was a ~- reduction in the rate of block creation while the attack was taking place there was  consensus failure (ie. network fork) and neither the network nor any client at any point fully halted. he attack has since, as of the time of this writing, mostly halted, and the network has for the time being recovered.nnhe short-term fi is for users, including miners, enterprise users (including echanges) and individuals to run geth with the flagsnn--cache  --targetgaslimit  --gasprice nnr arity with the flagsnn--cache-size-db  --gas-floor-target  --gasprice  --gas-cap nnhis (i) increases the cache size, reducing the number of disk reads that nodes need to make, and (ii) votes the gas limit down by ~, reducing the maimum processing time of a block by a similar factor.nnn the medium term (ie. several days to a week), we are actively working on several fies for the o client that should both provide a more stable resolution for the present issue and mitigate the risk of similar attacks, includingnn change to miner software that automatically temporarily cuts the gas limit target by  when the miner sees a block that takes longer than  seconds to process, allowing for adjustments similar to what was coordinated today to happen automatically (seennherennfor a pull request note that this is a miner strategy change and  a soft fork or hard fork)nnumerical tweaks to cache settingsnndding additional cachesnndding an additional cache for  specifically (as it is likely that  reads are several times slower than other -heavy operations since the contracts that are being read are ~  long)nnn on-disk cache of state values that allows them to be more quickly (ie.nn(log(n))nnspeedup) accessednne are also eploring the option of replacing the leveldb database with something more performant and optimized for our use case, though such a change would not come soon. he arity team is working on their own performance improvements.nnn the longer term, there are low-level protocol changes that can also be eplored. or eample it may be wise to add a feature to etropolis to increase the gas costs of opcodes that require reads of account state (, , , etc), and especially read operations that read eternal accounts increasing the gas cost of all of these operations to at least  would likely be sufficient, though care would need to be taken to avoid breaking eisting contracts (eg. simultaneously implementingnn nnwould suffice).nnhis would put a much lower upper bound on the maimum number of bytes that a transaction may read, increasing safety against all potential attacks of this kind, and reducing the size of erkle proofs and hence improving security for both light clients and sharding as a side effect. t present, we are focusing on the more immediate software-level changes however, in the long term such proposals should be discussed and contract developers should be aware that changes of this sort may take place.