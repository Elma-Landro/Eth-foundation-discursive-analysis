Titre: CRITICAL UPDATE Re: DAO Vulnerability\nAuteur: Vitalik Buterin\nDate: June 17, 2016\nURL: https://blog.ethereum.org/2016/06/17/critical-update-re-dao-vulnerability\nCatégorie: Non catégorisé\n\n==================================================\n\nn attack has been found and eploited innnthe nn, and the attacker is currently in the process of draining the ether contained in the  into a child . he attack is annrecursive calling vulnerabilitynn,nnwhere an attacker called the “split” function, and then calls the split function recursively inside of the split, thereby collecting ether many times over in a single transaction.nnhe leaked ether is in a child  atnnhttps//etherchain.org/account/aacedfecbdnn even if no action is taken, the attacker will not be able to withdraw any ether at least for another ~ days (the creation window for the child )nn. his is an issue that affects the  specificallynnthereum itself is perfectly safenn.nn software fork has been proposed,nn(with   no transactions or blocks will be “reversed”)nnwhich will make any transactions that make any calls/callcodes/delegatecalls that reduce the balance of an account with code hashnndaffddbcdaadfbafcfaeaadabann(ie. the  and children) lead to the transaction (not just the call, the transaction) being invalid, starting from block  (precise block number subject to change up until the point the code is released),nnpreventing the ether from being withdrawn by the attacker past the -day windownn.his will provide plenty of time for discussion of potential further steps including to give token holders the ability to recover their ether.nniners and mining pools should resume allowing transactions as normal, wait for the soft fork code and stand ready to download and run it if they agree with this path forward for the thereum ecosystem.  token holders and ethereum users should sit tight and remain calm. changes should feel safe in resuming trading .nnontract authors should take care to () be very careful about recursive call bugs, and listen to advice from the thereum contract programming community that will likely be forthcoming in the net week on mitigating such bugs, and () avoid creating contracts that contain more than ~$m worth of value, with the eception of sub-token contracts and other systems whose value is itself defined by social consensus outside of the thereum platform, and which can be easily “hard forked” via community consensus if a bug emerges (eg. ), at least until the community gains more eperience with bug mitigation and/or better tools are developed.nnevelopers, cryptographers and computer scientists should note that any high-level tools (including s, formal verification, debuggers, symbolic eecution) that make it easy to write safe smart contracts on thereum are prime candidates fornnevrantsnn,nnlockchain abs grantsnnandnntring’s autonomous finance grantsnn.nnhis post will continue to be updated.