Titre: EF-Supported Teams: Development Report\nAuteur: Ethereum Foundation Team\nDate: Team on June 21, 2019\nURL: https://blog.ethereum.org/2019/06/21/ef-supported-teams-development-report-2019-pt-1\nCatégorie: Non catégorisé\n\n==================================================\n\nriends,nnver the last year, developers and researchers supported by thereum oundation have kept their heads down and continued to produce at a staggering pace.nnheir focus has remained on their work, and together we're all building a more complete thereum. oday, our regular all-team update series is relaunching in a changed and ever growing ecosystem. thereum features larger dpp, developer and user communities than ever before, the network has continued to improve, and steady progress has been made on initiatives large and small.nnhile many teams do release their own well-rounded updates, we thought it appropriate to bring the community the latest from many of the teams (some of whom are softer spoken) supported by the oundation. njoy!nnleth / ++ thereumnnn preparation for the onstantinople / etersburg upgrade leth had a number releases - starting from .. series and ending with thennlatest ..nn. leth received a lot of pp network level improvements including a standalone devpp discovery client called aleth-bootnode, and is compatible with the latest thereum revision.nnhangelognnhttps//github.com/ethereum/aleth/blob/master/.mdnnhe  project continues to advance by receiving new language bindings and other improvements while remaining  compatible with version .nnhangelognnhttps//github.com/ethereum/evmc/blob/master/.mdnnnally, the ethash library (nnhttps//github.com/chfast/ethashnn) has received rogo support and some integration fies and improvements.nnhangelognnhttps//github.com/chfast/ethash/blob/master/.mdnnevpsnnhere are five main areas where devops resources are used ebsites, ootnodes, eth, warm, and esting. evops continues to improve our process for deploying infrastructure, mainly with nsible and erraform but also with ubernetes. e are also doing a better job documenting and tracking how infrastructure is used by all of the development teams.nnne mini-project which recently came to completion is collecting together recent code forks of thtats and creating a release and new repo which we call "thtats lassic" (nnhttps//github.com/ethereum/eth-netstatsnn). lethio thtats is the . and will be maintained by the lethio team (nnhttps//github.com/lethio/ethstats-network-dashboardnn).nnrom within the warm team e are building tools with ubernetes that help us quickly provision a variety of warm deployments with up to  warm nodes, out-of-the-bo configured with tracing, monitoring and data visualization tools, which helps our development and testing efforts. hese tools allow us to run a number of end-to-end tests as well as mock different network scenarios and simulations. e also run periodic integration tests on larger deployments in addition to our go-test test suite prior to every release, making sure we don't introduce regressions or performance degradation in warm.nnev esignnnn early , ev esign completed work on a few key tasksnn-nn(thereum ode ecords) was approved in the allcoredevs call.nnrotocol specifications of eth/ and les/ have been moved to thennhttps//github.com/ethereum/devppnnrepository from itub wiki pages.nnnitial drafts of ode iscovery v spec have been published.nneanwhile, we are hard at work on finishing the ode iscovery v specification.he "par", "pip" and "shh" protocol specs are being adapted for publishing in the devpp repo and implementation of - and ode iscovery v in eth. e are also working on an  for  v, which will fi some crypto issues and on integrating - node records into the handshake.nn etensions and supporting development tools have been added to eth, both as an etension to v and as part of v. iscovery v protocol and eth implementation is nearing a completed state as refinements are made, and eternal auditors are now being introduced to the protocol for a security audit. iscovery v is receiving a lot of interest from the th . implementers community, and eli has attended meetings with them to help answer questions on where the protocols complement each other.nnhe devpp repo continues to gain traction as the home for thereum communication protocols, with a number of interesting proposals under review, and documentation such as  and  completed. uch behind-the-scenes work and discussion has been going on regarding  and its future direction.  number of improvements to  code structure and robustness are in the eth pull-request pipeline (big shout out to ary ong) addressing immediate concerns, while the long term direction is being researched and established. n the coming weeks the eth team will meet to consolidate the ideas and make a decision on the direction of  and its implementation.nn rantsnnhrough the first quarter of , we publicly announced ave  and released more recipients on stage at thereal. t has been an etremely eciting time for the program as we have quietly epanded our scope to encompass different project types and eplored more ways in which we can support the community.nnhile we continue to accept new applications, we are also actively sourcing high affinity applications from core devs and researchers. dditionally, we will (in the coming months) publish a rantee etrospective highlighting the impact of past grants and the great teams behind the projects.nnhe goal for the program is to not only provide financial support, but to provide more bespoke support for high potential teams including research support, connections, communications, and more. y increasing the support system and incorporating more voices, we stay true to the mission of decentralizing the decision making process as well as truly doing everything in our power to advance the ecosystem. tay tuned for more!nnthereumnnur focus within the thereum team is to serve the community with high-quality and robust avacript/ypecript implementations of base-layer th . and increasingly th . technologies and protocols. lease have a look at our organizational documentation atnnethereumjs.readthedocs.ionnfor an introduction on what we are doing and some key entry points to our work.nnypecriptnnhe center of attention in the early part of the year was the transition of our code base to ypecript and we are nearing completion on our most used libraries. e have released ypecript versions of core building blocks like ournnblockchainnnandnntransactionnnlibraries (the latter also now with full hardfork and - replay protection support)here is an open  with a complete rewrite of thenndevppnnlibrary in ypecript waiting to be merged (kudos to mitriy yajov from etaask/ustekala) and - probably the most eciting piece - the transition of ournnnnimplementation to ypecript has now been completed and is already merged into the master branch. atch out for a beta release to follow within the coming days!nnnne know the importance of a well-structured, modular and epandable avacript  for the realization of powerful analysis and debugging functionality within development tools like emi, ruffle and others. o this end, one other current focus of the last months was to make strong moves toward these goals and do significant refactoring work on the . ainly realized by our new employee ina ahmoodi, the upcoming v  release will ship with much more eplicit and readable memory and stack handling, code modernization with the introduction of  classes and async/await usage as well as a general refactoring and modularization of the  specific code structure. he latter -  together with some newly introduced -like environment interface for accessing blockchain data - is in preparation for an already-in-the-works e integration within the .nnther esearchnne are also dedicated to continue supporting and maintaining our eisting code base to keep our libraries secure, robust and performant. he latest eperimentation following these goals touches on using  modules for cryptographic primitives, ignt usage in avacript/ypecript together with fied-width number handling as well as less error-prone handling and conversion of headecimal and buffer values. e'll let you know once we have concrete results to share on these various fronts.nnwasmnnhe past months have been really busy and fruitful. o ensure wasm is well-designed as an eecution layer, the design process is driven by prototypes, analysis and benchmarking. n  we began etensive benchmarking studies of both ebssembly engines and  engines. n  we released cout, a prototype eecution engine for thereum .. ur focus in  will be continued iteration on prototypes, informed by analysis and benchmarking.nnwasm during  nnenchmarkingnns benchmarking progressed, new questions arose which required more detailed benchmarks and sometimes new infrastructure. enchmarking aims to answer open questions, including those related tonn* different ebssembly engines (including interpreters and various types of compilers)nn* various implementations of thereum precompilesnn* implementation of the same contracts in ebssembly and nn* different metering strategiesnnenchmarked ebssembly (asm) engines include a significant number of standalone engines, as well as the asm engines we have integrated into wasm clients (via era).nnor the precompiles comparison, we have used go-ethereum, native-compiled ust implementations and asm-compiled ust implementations. he ust implementation of every onstantinople precompile can be found atnnewasm-precompilesnn. e have also used various manually optimised  versions.nnor the  comparison we have selected optimised  implementations of contracts and implemented counterparts in ebssembly. he  bytecodes were benchmarked using go-ethereum, parity-ethereum andnnevmonenn. hese comparisons have been especially fruitful, revealing new goals and requirements for our design.nnhe structure of ebssembly is well-suited for metering optimizations. everal metering prototypes were developed and benchmarked, with attention to common classes of contracts and types of ebssembly engines.nnesults on  were published in  (see below). eporting on further results, including in-depth analysis of ebssembly engines, is a work-in-progress and will be forthcoming in future publications.nnrecompilesnnmplementation of all the onstantinople as well as four newly proposed precompiles (blake, ed, bls-, sha) were completed and are available in thennewasm-precompilesnnrepository.nne were successful at syncing the entire inkeby chain using these implementations in go-ethereum.nnth .nnome members of the team participated in the th. / stanbul meetups in an rancisco and erlin. e gave updates on our progress and presented some of the  proposals for stanbul, which have a significance for wasm. hree notable areas of change arennbetter protocol limitsnn, separation of init and runtime code and account versioning.nnth .nnhe wasm team has had ongoing discussions with the th . research team about hase . e shared open questions, design considerations, and ideas. he wasm team participated -- mostly remotely -- in the th . research meeting prior to  in pril. he goal was to discuss eecution engine requirements for th ..nnur proposals are tracked on our design repository (nnhttps//github.com/ewasm/design/issuesnn).nnestnetnnhe testnet is actively maintained at ewasm.ethereum.org. ontracts can be written in ust using ust tooling (ewasm-rust-api and chisel), which has been improved. ontracts can also be written in , which has a less developed toolchain.nnwasm during  nnth .nne have published a subsection of the benchmarking reportnn benchmarksnn. he results demonstrate potential for significantly reducing the gas cost of computational opcodes in , motivating us to proposenn- article gas costs for  opcodesnn.nnhe  benchmarks highlight new speed records set by the optimized  implementationnnevmonenn. reated in a joint effort of the wasm and leth/++ teams, evmone is designed to be imported as an eecution module by any thereum client. urther analysis of the speedup attained by evmone and potential gas cost reductions in  is ongoing.nnth .nne releasednncoutnn, a prototyping tool for asm eecution scripts on thereum .. cout's release was announced onnnethresearch herennand was presented at the caling thereum conference in oronto (nnvideo herenn).nncout is a prototype of a new approach to eecution on thereum . based on "eecution environments". urther eperimentation and analysis is needed to determine if eecution environments can meet the requirements of thereum ., and cout is designed for running such eperiments.  number of researchers and developers are ecited about this new approach (see the update on erenity from the esearch team, below).nnasm on the lockchainnnhe wasm team gave four presentations in erlin at the inauguralnnasm on the lockchainnnworkshop. ideos from the event have not yet been uploaded, but slides are availablenne ewasm wasmnn(a historical overview about asm on the lockchain)nnhe recompile roblemnns ebssembly uitable for lockchainnnth ecutionnnasm ommunity roup eetingnnome members of the wasm team also participated in the une meeting of ebssembly's ommunity roup. his has allowed us to understand and discuss upcoming proposals for ebssembly, many of which are relevant to wasm. otes from the ommunity roup meeting are available in thennebssembly/meetings reponn.nnethnnhe eth team has been working on the net major release, v.., which has been in the works for the better part of  months now. ome teasers that we've dropped along the way revolve around significantnnperformance improvementsnnfor archive nodes and significantnnstorage reductionsnnfor full nodes. hese seem to be confirmed bynneternalnnentitiesnntoonn, so we're really happy about them. e've also been working on a new database format that permits moving a large chunk (estimated at ⅔, per a recent benchmark) of the data of a full node (not archive) onto a , making it easier and more cost efficient to run thereum nodes.nnower level networking the team's been focusing on the new discovery specs ( and company), with the aim to replace both the old v (used by full node) as well as the hacky v (used by eth light clients). his will be the first real upgrade of this infrastructure in the last  years, so we have a lot of lessons to incorporate. he aim is to build a much more robust system that can support coeistence of higher level protocols (les) and multiple thereum networks (mainnet, testnets, etc).nnigher level networking the light client protocol sports transaction lookups by hash and new  s to support priority service to paying customers. he team reviewed directions for the  and  protocols, and have agreed to start to establish common directions between eth and arity. he first cross-team meeting is coming up in ay.nne've also focused on separating account management out of eth into its own signer application called lef. he first release will be  only, but we've been working on multiple proof of concept s to make sure we and others can build on top of the building blocks lef provides. lef's goal is to provide a secure way to manage your thereum accounts that can handle both keys as well as hardware wallets but most importantly, one that can be used by all pps on your system without each having to roll their own accounts handling!nnther smaller features we've been working on include a raph-based  for querying chain data, built in support for smart card wallets, updated edger support, rometheus monitoring support (in addition to nflu which we've already rolled out), lockcout integration into uppeth, and more.nns we're drawing eerily close to the .. release, we've kept this section shorter and will do an epanded blog post in the following couple of weeks!nnridnnhe ist rowser wasnnsunsetnn, butnnthereum ridnnwas born.nnridnnis a desktop application that allows users to securely download, configure and use various clients and tools in the thereum ecosystem. mong its potential benefits, rid cannnallow a less technical audience to safely interact with technical toolsnnhelp projects in the ecosystem reach wider audiencesnnprovide a platform to accelerate hacking on thereum.nnhe rid team would love your feedback on thennalpha softwarennand to hear from projects interested in building a plugin on the platform!nnoonnnur recent accomplishments are available on our roadmap as an early year written post! heck it out on githubnnhttps//github.com/moonad/roadmapnn.nnlaynneet lay ooling for decentralized educationnnlay launched our first tool a month ago - an embeddable olidity editor. ou can paste in solidity code and get a live preview which allows you to publish the contract and interact with it on chain. lay can be embedded in any site or app - to demo your smart contract, teach, you name it! ry it out atnnhttps//play.ethereum.org/editor-solidity/nne also just launched our second tool, a static workshop/tutorial generator.nntay tuned and connect with lay teamnnhttps//twitter.com/play_ethereumnnython cosystem y/rinity/eb.py/yper]nneb.pynneb.py has been working toward a v beta release. ersion  includes work to standardize the supported  s based on -, a new  to read from deployed contracts, implementing signing standards like - and -, as well as many bug fies.nneb.pynnv also includes a new eperimental package manager . ee thennrelease notesnnfor more info.nnypernnyper has benefited from a number of internal cleanup tasks. amples of this included things such as a thorough lint check, the addition of type annotations to certain code modules and automated checking of those annotations, overall improvements to yper's test rigging and continuous integration pipeline, and various code refactors. ll of this was part of an ongoing, project-wide push for improved maintainability and readability. he long term goal of this push is to make it easier for new contributors to join the project.nnyper also continues to add planned features. or more information, visit yper's githubnnissuesnnandnnpull requestsnnpages.nnrinitynnrinity has continued to improve with lots of bug fies, performance improvements and onstantinople support. e've also been working on making the code base more modular to increase maintainability and code reuse between the thereum . and . parts of the code base. rinity continues to improve its event-driven architecture and etensibility support.nndditionally, rinity has received many updates working towards a first thereum . testnet. e continue to collaborate with the research team to integrate th into rinity.nnn th. news we're currently eperimenting with a new feature we call eam ync. magine starting a rinity node and having it start processing the latest blocks and serving  requests within minutes. eam ync will verify blocks as they're mined by prioritizing sync of the state used in the latest blocks.nnnd finally on the th. front, we've been working on thennirehose ync protocolnn, a new state sync protocol which will radically decrease the amount of time it takes to start a node and download all the data needed to be a first-class node on the thereum network. irehose and eam ync enhance each other. eam ync is possible with the current network, but will be dramatically improved with the irehose ync protocol.nnenne have also been laying some groundwork for e in the last months. hennpy-wasmnnlibrary now has a fully functional implementation of the ebssembly interpreter and we've begun preliminary work to integrate this into y- to implement an  based eecution environment for smart contracts.nnthnnth is now fully integrated innneb.pynnv.nn nnhas been updated to include some useful events and functions.  registrynneplorernnwas built to provide an interface for interacting with various th egistries.   utility is in the works for downloading th packages to disk.nneminne finally released emi . which comes with a massive  redesign and the integration of a more stable version of the remi plugin . he documentation has been improved, and will continue to be improved with future updates. heck out the .. release onnnithubnn, updatednnappnnand ournnedium postnn.nne are regularly updatingnnhttps//remi-alpha.ethereum.orgnnwith the latest progress!nne've also seen the integration of remi-tests and remi-debug in mbark and thertom, started to migrate the reminncode basennto ypecript and the long awaited support of the new  ) .nnrom the . release on, we will be putting in more effort into writing and promoting educational content, first for the emi stack and then more broadly for the thereum ecosystem.nne plan to release patch versions of emi more regularly now, and to kickstart a emi website soon.nnhe desktop version (usable offline) will hopefully land soon (some of the work has already been done with the rid integration and we need to check how we can merge efforts here).nne will continue to polish the remi-plugin  and improve the dev  during the net weeks. ow that the base layer is done, we need to leverage decentralized storage for hosting plugins. his will probably take a few months.nneside that we want to continue writing tutorials, workshops and do the necessary for onboarding beginners.nnesearch ]nnoals for nn. roduce liveness proofs for a variety of synchrony assumptions, and for probabilistic and deterministic liveness requirements.nn. roduce a sharding specification by evcon , complete with cross-shard messaging fork choice rule and (possibly) a load balancer.nnork ompleted in anuary-une nn. inality nspector - tanford esearch orkshop, ebruary nnhe inality nspector is an algorithm that finds the finality score of a given block (weight of validators that need to equivocate in order for the given block to be reverted) by searching for a finality criterion in the message . he algorithm is quite efficient -- it runs in polynomial time in the number of total validators.nn. ocumentation for inality nspector - aris, arch nne made an informational blog post that describes the inality nspector and shows an eecution of the protocol (for binary consensus) and the level of finality on proposed values.nn. iveness trategies - ay nno far we have come up with  liveness strategies for the  asper family of protocols.nn.   fork choice algorithms -  oot amp, une nne described an efficient algorithm for maintaining the winning   tip of the blockchain. pon seeing a new block, it updates the   tip in (^) time (without any additional data stored in blocks), or (*log()) time (if blocks store a skip list of their ancestor blocks). his algorithm can be also used for eecuting the   section of the th . fork choice.nnommunity utreach in anuary-une nn. lad  tanford lockchain onference, ebruary nn. lad, ditya  , arch nn. italik, ditya  , pril nn. lad  ryptohicks, une nnesearch lasma]nnhipping an end to end implementation of lasma provided perspective which was critical in coming up with generalized plasma. his insight came from the fact that our testnet was far too special purpose & realizing we needed the ability to upgrade. e wouldn't have come to this if we hadn't been faced with the hard truth that taking our current implementation to production would be severely limited. nstead, a relatively small time investment in a redesign aided in our future proof design.nnnnouncements from the first part of the year includennlasma roup nnouncement --nnebsitenn,nnlognn,nnitcoinnnlasma estnet elease & pec --nnpecificationnn,nnlasma hain peratornneneralized lasma --nnnnouncementnn,nnplainernn,nnpecnn,nnample mplementationnnngoing work focuses on roduction ayments lasma. n the couple months we will be taking eneralized lasma into production with a fully audited & scalable payments network. et steps will be to tacklennlasma ontracts uditnneneralized lasma node rewrite.nnlapp lapp.nnesearch erenity]nntldr it's happeningnnhase nnhe beacon chainnnhas gone through a number of iterative releases, and is largely stable as client teams implement. uch work is targeted toward testing and auditing as we near the end of une hase  spec freeze. here now eist a broad array of consensus test vectors that are being passed by client teams, and there is a now a fuzzing effort underway, fuzzing the python spec and the go spec with the intention of fuzzing clients soon. untime erification has also begun formally specifying the beacon chain in  and formally verifying the yper deposit contract.nnhere are a few single-client testnets with public participation. ver the coming months, we epect to see short-lived, and then long-lived, multi-client public testnets.nnuch of the hase  work is now in the client teams' hands to bring the beacon chain to production. he client to do list includes consensus tests, optimizations, efficient aggregation, stable pp networks, state sync, validator /, security reviews, visualizations tools... hank (or fund!) your local client team net time you get a chance. hey are the unsung heroes in this process and deserve much more support and praise.nnhase nnhe hase  spec onnnshard data chainsnnis primarily in place and has gone through many simplifications the past few months. ost of these simplifications manifest in the "nncustody gamenn", reducing the compleity of computation and the compleity of the challenge games when unavailable data. he custody game is now more multi-party computation friendly to help encourage decentralized staking pools.nnecently hase  was made eecutable and has been integrated into the spec test suite. his specification is to be iterated upon, simplified, and prototyped in the coming months.nnhase nnhase  has some eciting research underway. here has been much effort in simplifying and abstracting the eecution consensus layer through a new path called "nneecution environmentsnn". ecution environments open up a world of possibility in how the highly scalable data layer of th . might be used. n particular, it might allow us to slot th into th to enable a more seamless transition for the community. uch of the research and debate on hase  is happening onnnhttp//ethresear.ch/nnso check it out!nnight clientsnnnnlight client specificationnnrelying upon hase  eists and will be iteratively worked on in the coming quarter. e hope to see a couple of light client implementations being worked on in  or  after the core beacon chain implementations stabilize.nnecurity ecurity / onsensus ests]nne have performed quite etensive metering of the eecution of opcodes within eth, to provide background and analysis fornnhttps//eips.ethereum.org//eip-nn, which aims to rebalance opcodes that will otherwise lead to severe degradation of the thereum network.nnhe hive framework has been updated, and is again running onnnhttps//hivetests.ethstats.netnn/, and we have also re-launched a libfuzzer-based geth/parity differential fuzzer in a production environment. e plan to publicly release this fuzzer in the mid-term future.nnetesteth stability has been restored. e've also fied bugs when running tateests and lockchainests via test*  interface on aleth. etesteth could now be built on docker and run against any client that support test*  interface. eth + retesteth support has now been enabled.nnpecial rojectsnnollaborations with icrosoft to build us a superior ntegrated evelopment nvironment, such as thennzure lockchain orkbenchnn.nnther's hariah ompliance is completed. etails of the fatwa fromnnmanie dvisorsnnto be announced. opefully, this will bring more users and applications from the slamic world. urray financial inclusion and new markets.nnaunching thennthereum  pen rojectnnto attempt to battle harden and bring a little more structure to our standards process.nnaunched new wikinneth.wikinn(still a work in progress).nnorking withnnanta e nstitutennto develop a cryptoeconomics research program. e recently sent onsensys's hruti ppiah to anta e tonnspeak on token economicsnn.nnplorations into upping thereum's game in the enterprise space. rgo we've been chatting more with thereum nterprise lliance and yperledger. o far thereum oundation has joinednnbothnnorganizationsnnand we're figuring out plausible net steps.nnngoing collaboration eplorations withnncash -- oint funding of s for annlakeb precompilenn.nnosmos -- oint funding ustin rake'snn researchnnrotocol abs -- thereum ame ervice is recieving a grant fornn integrationsnnwith eth.link.nn lot of new swag on thennthereum swag storenn!nnoliditynnhe current focus points for olidity development are as followsnnpolishing the ncoder for a non-eperimental release,nnincreasing the coverage of the  checker module,nnwork on the ul ptimizer and code generator from olidity to ul (simple contracts like an  token already work)nncode generation from ul to e assuming all types or  bits widennsyntactic and semantic fuzz testing of various componentsnnplanning changes for the upcoming breaking release ..nnuring the previous weeks, we enabled access to the ul compiler and optimizer via standard-json. t is also possible to access the olidity to ul code generator using thenn--irnnswitch. or security reasons, you have to compile this yul code again to bytecode manually. lease try this out but keep in mind that both parts are still eperimental! urthermore, we are adding more checks to the decoder part of the ncoder component that prevents invalid data from getting through the decoding process.nnwarmnnwarm saw significant stability improvements, notably hardening network connectivity code as well as the integration of the new ocaltore with reliable garbage collection. ur devops infrastructure and cluster provisioning graduated and allows testing comple network behaviour in a cluster of up to  nodes.nnmprovements in debugging, tracing, metrics and network simulation testing are now complemented by end-to-end smoke tests. uch tests are run regularly on deployments and allow continuous monitoring of performance. ince they closely match actual use, they model user perception and will be used to justify implementation changes or catch regressions.nnelease v. recently brought a much more reliable testnet. he . release now officially introduces  (warm's access control module) that enables users to control access to shared content or developers to offer authenticated protected areas/functions of dapps. t will also include improved warm eeds.nne continue restructuring working methods, more principled engineering work, clean code principles.nnwarm now launched a product subteam and consolidated our roadmap adopting a more user-centered  approach to milestones.nnther recent updates are captured herennhttps//github.com/ethersphere/swarm/blob/master/.mdnninally, wennhad the warm range ummit in adridnnand that was very successful and well received!nneb.nnhe newly introduced architecture (..-beta.) of eb.js is under active development and is improving day by day. e have implemented the possibility to pass a custom transaction signer, to configure the transaction confirmation workflow, new modules (dmin, ool, iner, ebug), and some new methods for the th module (gethaind, requestccounts, getendingransactions). o allow the new architecture to succeed, we're allowing breaking changes by moving this work to a .-alpha version of eb.js. ecause version ..-beta. is widely used and to allow bug fies for them, we've decided to define beta. as . stable. his gives us the possibility to enable bug fies for the old architecture of eb.js while coeisting peacefully with the new and eciting .-alpha architecture.nnn umbersnn📝  commitsnn🔧  fied issuesnn🏆 ~ lines of code added and ~ removednn🏆nn eleasesnnhe net steps of the eb.js project will be eplained in the coming announcement.nnhispernne are improving compatibility with arity's version of hisper. ur goal is to have a fully compatible  version of this, to simplify the usage of hisper in apps.nnome discrepancy between the implementation and the spec has been found by status and has been fied.nnhe documentation effort is well underway, and is available in the geth pages repository. he protocol details are to be moved to the evpp spec repo.nnnarks esearchnne are moving forward with zkrollup implementations, and we're becoming more confident in using zkp (zero knowledge proofs) to scale arbitrary dapps to millions of users. ur goal is to provide zkrollup as a proof of concept and then start to eplore scaling other kinds of dapps in this way.nnigh level languages are starting to mature which allow developers to build scalable dapps using snarks with less ramp up time. e are ecited by these developments and ecited to see developer adoption.nnn the privacy front, we have built anngeneric zcash style circuitnnwhich can be used for coin miing, voting, anonymous s, anonymous social media, and in other cool privacy focused areas. ur net deliverable in this direction will be a mier for erc tokens. rom there comes the potential for more cool privacy projects like, anonymous journalism and voting.nnoratesnnver the last months, we've worked to achieve three main goals to make orates more efficient, more powerful, and even easier to use.nne introduced support for lliptic urve ryptography in orates programs and provided primitives leveraging  cryptography, for eample d verification, to developers. ogether with other useful building blocks, these are now available as part of the orates standard library. his is accompanied by a new ython library called pycrypto which contains application code that makes it easy to interact with provable orates programs.nno make the most of these building blocks, we've improved optimizations for the orates compiler and started refactoring the module system to better support composition.nne have also specified the orates  grammar formally and are currently working on a more efficient parser implementation based on that specification.nns a step towards our goal of a ust-only codebase, we added support for ellman which enabled ac   native builds as well as efficiency gains.nninally, we etended our documentation (e.g., tutorial on how to proof pre-images of hashes) and released a blogpost which discusses the challenges of using zks in dpps. or developer education, we conducted a workshop at the nd roof orkshop, erkeley. urther workshops are taking place in ondon and plit in une.