Titre: SchellingCoin: A Minimal-Trust Universal Data Feed\nAuteur: Vitalik Buterin\nDate: March 28, 2014\nURL: https://blog.ethereum.org/2014/03/28/schellingcoin-a-minimal-trust-universal-data-feed\nCatégorie: Non catégorisé\n\n==================================================\n\nne of the main applications of thereum that people have been interested in is financial contracts and derivatives. lthough financial derivatives have acquired a reputation as a highly risky and destabilizing device with the sole function of enriching speculators, the underlying concept in fact has a number of legitimate uses, some of which actually help people protect themselves against the volatility of financial markets.nnhe main idea here is called “hedging”, and is best eplained in the contet of itcoin, where ordinary businesses and individuals with no desire to take massive risks end up needing to deal with high volumes of a risky asset (). edging works as follows. uppose that ane is a business owner who accepts itcoin for payments and uses it to pay employees, and on average she epects that she will need to keep   on hand at any time. ometimes, this amount might change it could be   or it could be  . owever, she is not at all ecited about the prospect of seeing her  drop % in value in a single day and losing several months worth of salary. urrently, the “standard” solution is for ane to set up her business to accept payments via itay or oinbase, paying a % fee to have the bitcoins instantly converted into money in her bank account. hen she wants to pay , she would need to buy the bitcoins back and send them out, paying % again (if not more).nnedging provides a different approach. nstead of constantly trading  back and forth, ane creates an account on a financial derivatives market, and enters into a contract for difference. n this , ane agrees to put innnnnwnnonnrnntnnhnnonnfnnnnnnnn,nnannnnndnngnnenntnnbnnanncnnknn(nninnnnnnnnnnn)nn worth of , and get back (in )nnnnwnnornntnnhnnonnfnnnn,nnannndnngnnenntnnbanncnnknn(nninnnnn)nn plusnnnnfnnonnrnnennvnnennrnnynndnnonnlnnlnnannrnntnnhnnanntnntnnhnnennnnnnnnpnnrnninncnnenndnnrnnonnpnnsnn.nnnnfnntnnhnnennnnnnnnpnnrnninncnnennrnninnsnnennsnn,nnsnnhnnennlnnonnsnnennsnn for every dollar that the  price drops. f the  price rises, she losesnnnnfnnorennvnnerynndnnonnllnnannrnntnnhannttnnhnnennpnnrnninncenndnnronnpnnsnn.nnnnfnntnnhnnennpnnrnninncernninnsesnn,nnsnnhnnennlnnosesnn per dollar. hus, if the value of one bitcoin decreases bynnnn,nnnnannnnnennwnnonnunnlnndnnlnnonnsnnenn, ane would losennnn,nnnnannnennwnnonnunnlnndnnlnnosenn in the value of her bitcoins, but she would gain $ in the . f course, the money does not come out of nowhere on the other side of the contract is a speculator, betting that the price of  will go up, and if it does then ane will gain in the value of  and lose in the , and the speculator would gain in the .nniven this basic ingredient, ane has three strategies for using it to manage risknnhe can keep the  at $ to $ forever, and if her eposure is off by some amount then she can take that smaller risk.nnane can have a bot constantly adjust the  to her supply of  on hand, paying some fees for this but not nearly as much as with itpay and oinbase.nnhanks to the magic of thereum contracts, she can make a  that automatically listens to her account balance and retargets itself to her balance, forcing the speculator to assume whatever eposure she needs (within limits), and the speculator will participate in many such contracts to even out their eposurenno how do we do s n thereum, it’s easy just write a contract to do what you want. ere,  provide a specialized version of a  that  am calling a “hedging contract”, which acts as a pure self-contained store of value you put  ether in, you get the same  value of ether out (unless the value of ether drops so much that the entire contract doesn’t have enough to cover you, in which case you gain the right to immediately withdraw everything and enter into a new hedging contract)nnif contract.storage]  
if t.value   _ ^
stop
contract.storage]  
contract.storage]   _ block.contractnnstorage()]
contract.storage]  block.timestamp +  * 
contract.storage]  t.sender
else
ethervalue  contract.storage] / block.contractnnstorage()]
if ethervalue  
mkt(contract.storage], * ^,,)
else if block.timestamp  contract.storage]
mkt(contract.storage],ethervalue _ ^,,)
mkt(,( - ethervalue) _ ^,,)nnf you understand -, you can figure that eample out, and if you can’t it basically does what the description says (the speculator puts up the contract with  , the counterparty enters into it with  , and there’s an epiry date after  days after which anyone can “ping” the contract to return $ worth of  to the counterparty and the rest to the speculator). e’ll release better - guides soon, but for now understanding the fine details of the contract is not necessary.nnowever, all of this has a problem it requires some trusted source from which to grab the price of /. his is much less of a problem than the other approach, involving trusted to create -backed cryptographic assets, because it requires much less infrastructure and the incentive to cheat is much smaller, but from a cryptographic purist standpoint it’s not perfect. he fundamental problem is this cryptography alone has no way of finding out that much about the outside world. ou can learn a bit about computational power through proof of work, and you can get some market data between one crypto-asset and another by having an on-chain market, but ultimately there is no term in mathematical algorithms for something like the temperature in erlin. here is no inherent way cryptography can tell you whether the correct answer is ′, ′ or ′ you need human judgement for that (or thermometers, but then you need human judgement to determine which thermometers are trustworthy).nnchelling timennere,  provide a mechanism that allows you to create a decentralized data feed. he economics of it are not perfect, and if large collusions are possible then it may break down, but it is likely close to the best that we can do. n this case, we will use the price of / as an eample the temperature in erlin, the world  or even the result of a computation that does not lend itself to efficient verifiability can also be used.nnhe mechanism relies on a concept known asnnchelling pointsnn. he way it works is at follows. uppose you and another prisoner are kept in separate rooms, and the guards give you two identical pieces of paper with a few numbers on them. f both of you choose the same number, then you will be released otherwise, because human rights are not particularly relevant in the land of game theory, you will be thrown in solitary confinement for the rest of your lives. he numbers are as followsnn       nnhich number do you pick n theory, these are all arbitrary numbers, and you will pick a random one and have a probability of / of choosing the same one and getting out of prison. n practice, however, the probability is much higher, because most people choose . hy  ecause each prisoner believes that the number  is somehow “special”, and each prisoner believes that the other believes that  is “special”, and so forth infinitely recursively – an instance ofnncommon knowledgenn. hus each prisoner, believing that the other is more likely to choose , will choose  themselves. bviously, this is an infinitely recursive chain of logic that’s not ultimately “backed” by anything ecept itself, but cryptocurrency users reading this article should by now bennvery comfortable with relying on such conceptsnn.nnhis mechanism is how chellingoin works. he basic protocol is as followsnnuring an even-numbered block, all users can submit a hash of the / price together with their thereum addressnnuring the block after, users can submit the value whose hash they provided in the previous block.nnefine the “correctly submitted values” as all values  where (+) was submitted in the first block and  was submitted in the second block, both messages were signed/sent by the account with address  and  is one of the allowed participants in the system.nnort the correctly submitted values (if many values are the same, have a secondary sort by (++) where is the hash of the last block)nnvery user who submitted a correctly submitted value between the th and th percentile gains a reward of  tokens (which we’ll call “schells”)nnhe protocol does not include a specific mechanism for preventing sybil attacks it is assumed that proof of work, proof of stake or some other similar solution will be used.nno why does this work ssentially, for the same reason why the prisoner eample above worked the truth is arguably the most powerful chelling point out there. veryone wants to provide the correct answer because everyone epects that everyone else will provide the correct answer and the protocol encourages everyone to provide what everyone else provides. riminal investigators have been using chellingoin for centuries, putting prisoners into separate rooms and asking them all for their stories on what happened at a given event, relying on the fact that it’s easy to be consistent with many other people if you tell the truth but nearly impossible to coordinate on any specific lie.nnroblems and imitsnnhat are the vulnerabilities n general, collusion attacks. ost trivially, if any entity controls more than % of all votes, they can basically unilaterally set the median to whatever they want. n the other hand, if there are a near-infinite number of discrete non-communicating entities, then each individual entity has essentially zero impact on the result realistically, there will be many entities giving the eact same value so there will not even be an opportunity to adjust the result slightly by voting falsely.nnowever, in the middle it gets hazy. f one entity controls % of votes, they can all pre-announce that they will vote for some false value, and others will also go with that value out of fear that everyone else will and if they don’t they will be left out. ut here is the really fun part even if one entity controls % of votes, if that entity pre-announces some false value that they will vote for and announces that they will give . schells to whoever votes for that value, then there are now two chelling points the truth and the entity’s value. owever, the entity’s value contains an incentive to vote for it, so theoretically that chelling point is superior and everyone will go for it instead.nnn practice, however, this is obviously absurd, in the same category as the famous result that in a prisoner’s dilemma with a preset finite number of rounds the optimal strategy is to cheat every round the argument is that on the last round there’s no room to punish cheating, so the incentive is to cheat, on the second last round both players know that the other will cheat on the net round for that reason anyway so the incentive is to cheat, and so on recursively to the first round. n practice, people are not capable of processing arbitrary-depth recursion, and in this case in practice there is a massive coordination problem in unseating the dominant chelling point, which only gets worse because everyone that benefits from the chellingoin has an incentive to attempt to censor any communication of an attempt to disrupt it. hus, a % coalition will likely be able to break chellingoin, but a % coalition will not. here is the middle ground erhaps only time will tell.nnnother potential concern is micro-cheating. f the underlying datum is a value that frequently makes slight changes, which the price is, then if most participants in the chellingoin are simultaneously participants in a system that uses that chellingoin, they may have the incentive to slightly tweak their answers in one direction, trying to keep within the / boundary but at the same time push the median up (or down) very slightly to benefit themselves. ther users will predict the presence of micro-disruption, and will thus tweak their answers in that direction themselves to try to stay within the median. hus, if people think that micro-cheating is possible, then micro-cheating may be possible, and if they do not think so then it will not be – a common result in chelling point schemes.nnhere are two ways of dealing with the problem. irst, we can try to define the value very unambiguously – eg. “the last ask price of / on echange  at a time ″, so that a very large portion of answers end up eactly the same and there is no possibility to move the median at all by micro-cheating. owever, this introduces centralization in the definition, so needs to be handled carefully. n alternative is to be coarse-grained, defining “the price of / rounded to two significant digits”. econd, we can simply work hard to make the underlying system for picking users avoid biases, both by being decentralization-friendly (ie. proof-of-stake over proof-of-work) and by including users who are likely to have incentives in opposite directions.nnhus, if we combine chellingoin and contracts for difference, what we have is a cryptographic asset that  have previously identified as a holy grail of cryptocurrency an asset which maintains a stable value and is simultaneously trust-free. rust-free is of course a relative term given the currentnndistribution of mining poolsnnitcoin’s “trust-free” voting is far from completely free of any trust, but the challenge is to make the protocol as decentralized and future-proof as we can. any of these “holy grails” are not reachable perfectly even the ones that we think we’ve already reached we often really haven’t (eg. decentralized sybil attack resistance), but every step toward the ultimate goal counts.nnining for chellsnnhe interesting part about chellingoin is that it can be used for more than just price feeds. chellingoin can tell you the temperature in erlin, the world’s  or, most interestingly of all, the result of a computation. ome computations can be efficiently verified for eample, if  wanted a number  such that the last twelve digits of  are , that’s hard to compute, but if you submit the value then it’s very easy for a contract or mining algorithm to verify it and automatically provide a reward. ther computations, however, cannot be efficiently verified, and most useful computation falls into the latter category. chellingoin provides a way of using the network as an actual distributed cloud computing system by copying the work among  parties instead of every computer in the network and rewarding only those who provide the most common result.nnor added efficiency, a more intricate multi-step protocol can have one node do the computation and only use chellingoin to “spot-check” only a random % of the work, allowing for perhaps less than  cryptographic overhead.  deposit requirement and harsh penalties for providing an answer that turns out not to pass scrutiny can be used to limit fraud, and another option is to let anyone redo the work and “suggest” a verification inde to the network to apply chellingoin on if they discover any faults.nnhe protocol described above is not a new idea as  mentioned earlier, it is simply a generalization of a centuries-old criminal investigation practice, and in fact itcoin’s mining algorithm basically is a chellingoin on the order of transactions. ut the idea can potentially be taken much further, provided that the flaws prove to be surmountable. chellingoin for / can be used to provide a decentralized dollar chellingoin for computation can be used to provide distributed  (albeit with no privacy, but we can wait for efficientnnobfuscationnnfor that).nnhanks tonneal oblitz, for suggesting the idea of using a spot checking repeated computation approach to provide a “useful proof of work”nnavid riedman, for introducing me to the concept of chelling points in hisnn“positive account of property rights”nnhomas chelling, for coming up with the concept in the first placennn individual  talked to two months ago whose identity  unfortunately forgot for providing the idea of incorporating chelling schemes into thereum