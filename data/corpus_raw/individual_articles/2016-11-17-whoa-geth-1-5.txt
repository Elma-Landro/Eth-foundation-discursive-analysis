Titre: Whoa… Geth 1.5\nAuteur: Péter Szilágyi\nDate: November 17, 2016\nURL: https://blog.ethereum.org/2016/11/17/whoa-geth-1-5\nCatégorie: Non catégorisé\n\n==================================================\n\nhe o thereum team is very proud to finally release eth ., which can almost be called a complete internal rewrite of the o thereum (nngo-ethereumnn) codebase.nne've packed a huge number of changes into this release, and simply listing them wouldn't do them justice. nstead, we've decided to write them up in a more informal way, eplaining not only what's new, but also why it's needed, and why it's awesome!nno thereum websitennhenngo-ethereumnnproject never really had a website. here wasnnsomethingnnauto-generated a long time ago by itub, but it couldn't really be called a decent website as it didn't contain valuable information, didn't look particularly good, and there was nobody to properly maintain it. ut at the time it was ok as the hardcore developers were cared more about the source repository and wiki pages, than a web site.nnowever, as thereum gains popularity and traction, we are now making efforts to make eth, its code, and associated resources more accessible and streamlined for everyone involved, not just a handful of core developers. s a first step in this direction we've begun to put together a new website for go-ethereum. ou can see it atnnhttps//geth.ethereum.orgnn.nnhe web site still has a long way to go, but we've done our best to include information that is not available elsewhere else, yet we feel is essential for anyone starting out with go-ethereum a detailed installation guide for all platforms, and a downloads section gatheringnnallnnour binaries from every build service we maintain. ou can epect a detailed developer guide in the net few weeks, and a detailed user guide afterwards.nnibrary accessnno thereum, one of three original clients along with ++ thereum and y thereum, evolved alongside the thereum networking and consensus protocol specification. his process entailed fast prototyping, frequent rewrites and binned features. he net effect was a codebase that worked well, but was difficult to embed into other projects due to its messy internals.nnn the eth .. series we started untanglingnngo-ethereumnn, but it took longer than anticipated to clean up most of the public  pathways. ith eth ., we've finally arrived at the point where we can stand behind our programmatic s both as usable and as something we would like to support long term. he final pieces are still being polished, but we're confident you'll like the result a lot!nnur main areas of focus were a) simplified client side account management, b) remote clients via ,  and ebockets c) contract interactions and binding generation, and d) in-process embedded nodes. ith these four main use-cases covered, we're confident most server side or mobile applications can go a long way.nnheck out thennteaser slide presentation about our new snnpresented by karalabe at evcon, our thereum developers conference in hanghai, a few weeks ago.nnhttps//www.youtube.com/watchvajgnnobile platformsnnith eth . focusing on library reusability, it is only natural to see how far we can push the envelope. here has been ample eploration of running (or at least interfacing with) thereum from browsers our current release focused on doing so from desktop/server processes. he only missing piece of the puzzle was mobile devices... until now.nnhe . release ofnngo-ethereumnnintroduces our first eperimental attempt at providing true ndroid and i library reusability of our codebase. his comes in the form of a native ava and bj wrapper around our code, bundled up officially as an ndroid archive and i ode framework. he former is more mature, while the latter requires some  polishes due to the difficulty in automatically wrapping o to bj/wift code.nne're also providing native dependencies for both platforms in the form of aven entral packages (or onatype for develop snapshots) for ndroid, and ocoaod packages for i. ince this is the very first time we're making the pushes to these package managers, there are a few hurdles that may arise, so we'll make a separate announcement when both are reliable to use. ntil then, we recommend sticking to the downloadable library bundles.nnperimental protocolsnnhe . release of eth is an attempted foundation for the future direction and features we'd like to work on and stabilize in upcoming releases. n our opinion, the best way to push the desired new features forward is to ship them asnneperimentalnn(solely opt-in) protocols so that anyone can play with them and provide feedback. n the light of this, we've merged in quite a few things we (and hopefully the community) had been looking forward to for quite some time.nniscovery vnnf you've played with joining the official testnet (orden) or running a publicly reachable private testnet, you know it can sometimes take quite a long time to synchronize, as the node often seemingly just sits there doing nothing.nnne of the root causes for testnet sync issues is that the peer discovery protocol cannot differentiate between machines running different blockchains, or even different network protocols altogether. he only way to find suitable peers is to connect to as many peers as possible and keep the ones that make sense. his approach works for the mainnet, but for smaller protocols (testnet, light clients, swarm, whisper) it's like looking for a needle in a haystack of advertised peers.nneth . contains a new version of the peer discovery protocol that etends the "shooting in the dark" approach with topic based peer-querying. n short, peers can actively search for other peers that have specifically advertised feature sets, protocols or configurations. his new discovery protocol should enable nodes to instantly find others of interest, even when there are only a handful among thousands of "boring" ones.nnlease note the v discovery protocol is eperimental, hence it is currently only enabled for light clients and light servers. his will allow us to gather valuable information and analyze its behavior/anomalies without influencing the main thereum  network in the slightest.nnight clientnnlockchains are large beasts, there's no denying it. rrelevant of optimizations, there will always be devices that are too resource-constrained to play an active role in blockchain networks (e.g. mobile phones, o devices). lthough unepected, we've seen this effect happen during the o attack, which caused s to have troubles syncing.nnhe only meaningful solution for running a blockchain on tiny embedded devices is for them to become light clients, where they do not bare the full burden of sustaining the network, but rather only bear the burden of their own operation. ot only is this beneficial for the small devices, but it also benefits the network as a whole as it removes slow links and thus makes the core network smaller, tighter and more performant.nne're proud to finally include annnalphannversion of a light client inside eth .. t can sync in minutes (or less) and consume only megabytes of disk space, but nonetheless fully interacts with the thereum blockchain and is even usable through the ist browser (although there have been hiccups there).nnou can run eth as a light client via thenn--lightnnflag. f you are maintaining a full node, feeling a bit generous, and aren't running a sensitive production system, consider enabling the light server protocol to help out small devices in the network viann--lightserv  --lightpeers nnflags (first sets the percentage of system resources allowed to be used by light clients, and the second sets the number of light clients to allow connecting).nnwarmnnlong with the consensus protocol, the thereum vision also consists of two other pillars real time dark messaging (hisper) and decentralized file storage (warm). ll three are needed to create truly decentralized, high availability applications. hisper is more or less available as an eperimental protocol, but warm always looked like a far away dream.nnith the arrival of ., we're very ecited to include an initialnnproof-of-conceptnnimplementation of the warm protocol for developers to play with. t is included as a separate daemon process (and inherently eecutable binary), not embedded inside eth. his allows users to run warm against any thereum client while also preventing any issues from interfering with the main node's functionality.nn subscriptionsnnf you've written a more comple pp against a eth node (or any other thereum node for that matter), you may have noticed that polling the node for data on  can have adverse effects on performance. ot polling it, on the other hand, has adverse effects on user eperience since the pp is less sensitive to new events.nnhe issue is that polling for changes is a bad idea since most of the time there's no change, only thennpossibilitynnof one.  better solution, instead of querying the node for changes every now and then, is to subscribe to certain events and let the node provide notification when there's a change. eth . enables this via a newnn subscriptionnnmechanism. ny pp (or eternal process) can subscribe to a variety of events and leave it to the node to notify when needed. ince this mechanism is not possible over plain  (like it is over ), the . release also includes support for running the   via ebockets.nnavacript tracingnnuring the o attacks in recent months, we spent an inordinate amount of time analyzing different transactions to better understand how they work. hese efforts entailed trying to create various traces, looking at eactly what the  eecutes, and how that influences the underlying implementation.nnlthough eth featured annn tracing  endpointnnfor quite some time now, it didn't provide much granularity in regards to configurability. t ran the  bytecode, returned the eecuted opcodes, any occurred errors and optionally a diff of stack, and memory and storage modifications made by the transaction. his is useful, but epensive resource-wise to both create and to pass through the  layer.nnith the . release, we're introducing a new mechanism for tracing transactions, annavacript map-reduce constructnn. nstead of the usual trace options available until now, you will be able to specify two avacript methods a mapper invoked for every opcode with access to all trace data, and a reducer invoked at the end of the trace to specify the final data to return to the caller.nnhe advantage of the avacript trace approach it that it's eecuted inside the o thereum node itself, so the tracer can access all information available for free without performance impact, and can collect only what it needs while discarding everything else. t is also a lot simpler to write custom trace code instead of having to parse some predefined output format.nnendored dependenciesnnntil the .. release cycles of eth, the go-ethereum codebase used thenngodepnntool as its dependency manager because o itself did not provide a viable alternative other than manually copying dependencies or relying on upstream repositories to not break over time.nnhis situation was unfortunate due to a number of drawbacks a) building go-ethereum required both a custom tool as well as knowing the quirks of said tool, b) dependency updates vianngodepnnwere very painful due to them dirtying the local workspaces and not being able to work in temporary folders, and c) using go-ethereum as a library was etremely hard as dependencies weren't an integral part of the o workflow.nnith the eth . release, we've switched over to the officially recommended way of vendoring dependencies (fully supported starting with o .), namely by placing all eternal dependencies into locations native to the o compiler and toolchain (nnvendornn), and switching to a different dependency management tool to more cleanly handle our requirements (callednntrashnn).nnrom an outside perspective, the main benefit is no longer having to muck around with some random dependency management tool that we happen to use when building go-ethereum, or to using it as a library in other projects. ow you can stick to the plain old o tools and everything will work out of the bo!nnuild infrastructurennrom the beginning of the thereum project, all official clients depended on a build infrastructure that was built and maintained by caktu based on mazon  instances, nsible and a sizeable suite of ython scripts (called thennthereum uildbotnn).nnnitially, this infrastructure worked well when the original implementations all shipped a handful of major platform, architecture and deliverable bundles. owever as time passed and projects started to focus on smaller unique builds, the maintenance burden started to ramp up as the buildbot began to crumble down. hen the maintainer left the thereum project, it became clear that we needed to transition to new build flows, but creating them was a non-trivial effort.nnne of the major milestones of the eth . release is the complete transition from the old build infrastructure to one that is fully self-contained within our repositories. e moved all builds on top of the various continuous integration services we rely on (ravis, ppeyor, ircle), and implemented all the build code ourselves as an organic part of the go-ethereum sources.nnhe end result is that we can now build everything the go-ethereum project needs without depending on particular service providers or particular code outside of the team's control. his will ensure that go-ethereum won't have strange missing packages or out-of-date package managers.nnuild artifactsnntarting with eth ., we are distributing significantly more build artifacts than before. ur two major deliverables are archives containing eth only, and bundles containing eth and any other tools deemed useful for developers and/or users of the thereum platform. hese artifacts are pre-compiled for every stable release as well as every single develop commit to a very wide variety of targets inu (nnnn,nnamdnn,nnarm-nn,nnarm-nn,nnarm-nnandnnarmnn), mac (nnamdnn) and indows (nnnn,nnamdnn).nnne of our feature updates are library bundles for using go-ethereum in mobile projects. n ndroid we're providing official builds fornn.aarnnarchives containing binaries fornnnn,nnamdnn,nnarm-nnandnnarmnn, covering all popular mobiles as well as local simulator builds. n i we're providing official ode ramework bundles containing binaries fornnamdnn,nnarm-nnandnnarmnn, covering all ihone architectures as well as local simulator builds.nnesides the standalone binary archives we're also distributing all of the above in the form of omebrew bundles for mac, launchpad  packages for buntu,  installers for indows (hocolatey distribution will need further administrative hurdles to overcome), aven entral dependencies for ndroid and ocoaods dependencies for i!nnll of the artifacts mentioned above are available from thenngo-ethereum downloadsnnpage.nnigital signaturesnnor a long time our binary distributions were a bit chaotic, sometimes providing checksums, sometimes not, which depended on who made the release packages and how much time we had to tie up loose ends. he lack of checksums often lead to users asking how to verify bundles floating around the internet, and more seriously it resulted in a number of fake developer and project clones popping up that distributed malware.nno sort this out once and for all, from eth . an on, all our officially built archives will be digitally signed via a handful of pen keys. e will not rely on checksums any more to prove authenticity of our distributed bundles, but will ask security-conscious users to verify any downloads via their attached  signatures. ou can find the list of signing keys we use at ournnpen ignaturesnnsection.nnepository branchesnn bit before the rontier release last uly, we switched to a source repository model where thennmasternnbranch contained the latest stable code andnndevelopnncontained the bleeding edge source code we were working on.nnhis repository model however had a few drawbacks a) people new to the project wanting to contribute always started hacking onnnmasternn, only to realize later that their work was based on something old b) every time a major release was made,nnmasternnneeded to be force-pushed, which looked pretty bad from a repository history perspective c) developers trying to use thenngo-ethereumnncodebase in their own projects rarely realized there was a more advanced branch available.nneginning with eth ., we will no longer maintain a separatennmasternnbranch for latest-stable andnndevelopnnbranch for latest-edge, rather we will switch tonnmasternnas thenndefault and developmentnnbranch of the project, and each stable release generation will have its own indefinitely living branch (e.g.nnrelease/.nn,nnrelease/.nn). he release branches will allow people to depend on older generations (e.g. ..) without finding surprising git issues with history rewrites. nd havingnnmasternnas the default development branch would allow developers to use the latest code.