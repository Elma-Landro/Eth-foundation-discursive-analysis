Titre: Update on the Vyper Compiler\nAuteur: Piper Merriam\nDate: January 8, 2020\nURL: https://blog.ethereum.org/2020/01/08/update-on-the-vyper-compiler\nCatégorie: Non catégorisé\n\n==================================================\n\nhe idea behind the yper roject was to develop something that was designed at the language level to naturally ehibit a high degree of safety. he project was originally authored by italik as a proof-of-concept replacement for erpent, its predecessor, but shortly after its creation yper found itself without a dedicated maintainer. uckily, there were enthusiastic community members that took up the torch and continued development of the project, and we (the  ython eam) became re-involved in the project for some time earlier this year.nnhis fall, a preliminary security audit was performed by the onsensys iligence team on the ython-based yper compiler.nnou can read the results for yourself herenn.nne encourage you to read the report, however, there are two main take-aways.nnhere are multiple serious bugs in the yper compiler.nnhe codebase has a high level of technical debt which will make addressing these issues comple.nnince the eisting ython-based yper implementation is not yet production ready, it has been moved out of the ethereum github organization into its own organization vyperlang. he eisting maintainers are planning to address the issues independently once again, but we will continue to follow the project closely here nnhttps//github.com/vyperlang/vypernneanwhile, our team continues work on a ust-based compiler in tandem. ore on that below, but first, here’s a bit more on how we got to where we are today.nnver the course of this year we worked with the project maintainers to focus on improving the code quality and architecture of the project. fter a few months of work we were skeptical that the python codebase was likely to deliver on the idea that yper promised. he codebase contained a significant amount of technical and architectural debt, and from our perspective it didn't seem like the eisting maintainers were focused on fiing this.nnploring ustnnarlier this year in ugust, we eplored producing a version of the yper compiler built on fundamentally different architecture. he goal was to write a compiler in ust that leverages the eisting work by the olidity team and uses the  intermediate representation to allow us to target  or  during compilation.  ust based compiler can be easily compiled to , making the compiler much more portable than one based in ython. y building on top of  we would get the  and  compilation for free, only requiring the compiler to handle the transformation from a yper  to .
e were sufficiently far along with our ust based yper compiler when the ython yper audit was released, and were confident in the directionl. he audit confirmed many concerns around the python codebase and helped to validate the direction we've taken.nnhe work continuesnnhat said, the maintainers of the ython yper codebase do intend to continue with the project. hile we don’t plan to have continued involvement in the python codebase, we wish them luck but also wanted to make note of recent events to avoid inadvertently signalling that the project was safe to use.nno at present there are currently two "yper" compilers he -supported work towards building a compiler written in ust to deliver on the original idea of yper, and the ython effort which will work independently toward the same goals in the ython codebase. e're hopeful that we can continue working together towards a single "yper" with multiple implementations, and we’ll keep everyone up to date as the project moves forward.