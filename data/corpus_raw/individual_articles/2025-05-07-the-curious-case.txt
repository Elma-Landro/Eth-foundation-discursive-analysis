Titre: CVE-2025-30147 - The curious case of subgroup check on Besu\nAuteur: Antonio Sanso\nDate: May 7, 2025\nURL: https://blog.ethereum.org/2025/05/07/the-curious-case\nCatégorie: Non catégorisé\n\n==================================================\n\nhanks to arius an er ijden for creating the test case and statetest, and for helping the esu team confirm the issue. lso, kudos to the esu team, the  security team, and evaundray edderburn. dditionally, thanks to uiang iu, ustin raglia, arius an er ijden, enedikt agner, and evaundray edderburn for proofreading. f you have any other questions/comments, find me on twitter atnnasansonntldrnnnnesu thereum eecution clientnnversion .. suffered from annconsensus issuennrelated to thenn-nn/nn-nnprecompiled contract handling for the elliptic curvennalt_bnnn(a.k.a. bn). he issue was fied in releasenn..nn.nnerennis the full  report.nn..nn art of this post requires some knowledge about elliptic curves (cryptography).nnntroductionnnhennbnnncurve (also known asnnalt_bnnn) is an elliptic curve used in thereum for cryptographic operations. t supports operations such as elliptic curve cryptography, making it crucial for various thereum features. rior tonn-nnand the recent ectra release,nnbnnnwas the only pairing curve supported by the thereum irtual achine ().nn-nnandnn-nndefine precompiled contracts for efficient computation on this curve. or more details aboutnnbnnn, you can readnnherenn.nn significant security vulnerability in elliptic curve cryptography is thenninvalid curve attacknn, first introduced in the papernn“ifferential fault attacks on elliptic curve cryptosystems”nn. his attack targets the use of points that do not lie on the correct elliptic curve, leading to potential security issues in cryptographic protocols. or non-prime order curves (like those appearing in pairing-based cryptography and innnnnnn_nnnnnn​nnfornnbnnn), it is especially important that the pointnnis in the correct subgroupnn. f the point does not belong to the correct subgroup, the cryptographic operation can be manipulated, potentially compromising the security of systems relying on elliptic curve cryptography.nno check if a pointnnnnis valid in elliptic curve cryptography, it must be verified that the point lies on the curve and belongs to the correct subgroup. his is especially critical when the pointnnnncomes from an untrusted or potentially malicious source, as invalid or specially crafted points can lead to security vulnerabilities. elow is pseudocode demonstrating this processnn# seudocode for checking if point  is validnndefnnis_valid_pointnn(nnnn)nnnnifnnnotnnis_on_curvenn(nnnn)nnnnreturnnnalsennifnnnotnnis_in_subgroupnn(nnnn)nnnnreturnnnalsennreturnnnruennubgroup membership checksnns mentioned above, when working with any point of unknown origin, it is crucial to verify that it belongs to the correct subgroup, in addition to confirming that the point lies on the correct curve. ornnbnnn, this is only necessary fornnnnnn_nnnnnn​nn, becausennnnnn_nnnnnn​nnis of prime order.  straightforward method to test membership innnnnnnnnis to multiply a point by the subgroup’s prime ordernnnnnnnnnnn if the result is the identity element, then the point is in the subgroup.
owever, this method can be costly in practice due to the large size of the primennrnnrnnrnn, especially fornnnnnn_nnnnnn​nn. n ,nncott proposednna faster method for subgroup membership testing on  curves using an easily computablennendomorphismnn, making the process ×, ×, and × quicker for different groups (nnthis technique is the one specified innn-nnfor fast subgroup checks, as detailed innnthis documentnn).
ater, ai et al.nngeneralized cott's techniquennto work for a broader range of curves, including  curves, reducing the number of operations required for subgroup membership checks. n some cases, the process can be nearly free. oshelev also introduced a method for non-pairing-friendly curvesnnusing the ate pairingnn, which was eventually furthernngeneralized to pairing-friendly curves.nnhe eal lim hadynns you can see from the timeline at the end of this post, we received a report about a bug affectingnnectra -nnon esu, submitted via thennectra udit ompetitionnn. e're only lightly touching on that issue here, in case the original reporter wants to cover it in more detail.nnhis post focuses specifically on the nn-nn/nn-nnvulnerabilitynn.nnhe original reporter observed that in esu, thennis_in_subgroupnncheck was performed before thennis_on_curvenncheck. ere's an eample of what that might look likenn# seudocode for checking if point  is validnndefnnis_valid_pointnn(nnnn)nnnnifnnnotnnis_in_subgroupnn(nnnn)nnnnifnnnotnnis_on_curvenn(nnnn)nnnnreturnnnalsennreturnnnalsennreturnnnruennntrigued by the issue above on the  curve, we decided to take a look at the esu code for the  curve. o my great surprise, we found somethingnnlike thisnnnn# seudocode for checking if point  is validnndefnnis_valid_pointnn(nnnn)nnnnifnnnotnnis_in_subgroupnn(nnnn)nnnnreturnnnalsennreturnnnruennait, what here is thennis_on_curvenncheck actly—nnthere isn't one!!!nnow, to potentially bypass thennis_valid_pointnnfunction, all you'd need to do is provide a pointnnthat lies within the correct subgroup but isn't actually on the curvenn.nnut wait—is that even possiblennell, yes—but only for particular, well-chosen curves. pecifically, if two curves arennisomorphicnn, they share the same group structure, which means you could craft a point from the isomorphic curve that passes subgroup checks but doesn't lie on the intended curve.nnneaky, rightnnid you say isomorpshismnneel free to skip this section if you're not interested in the details—we're about to go a bit deeper into the math.nnetnnnnqnnmathbb{}_qnnnnqnn​nnbe a finite field with characteristic different from  and , meaningnnqnnnnpnnfnnq  p^fnnqnnnnpnnfnnfor some primennpnn≥nnnnp geq nnpnn≥nnnnand integernnfnn≥nnnnf geq nnfnn≥nnnn. e consider elliptic curvesnnnnnnnnovernnnnqnnmathbb{}_qnnnnqnn​nngiven by the short eierstraß equationnnynnnnnnnnnn+nnnnnn+nnnny^  ^ +   + nnynnnnnnnnnn+nnnnnn+nnnnwherennnnnnnnandnnnnnnnnare constants satisfyingnnnnnnnn+nnnnnnnn≠nnnn^ + ^ neq nnnnnnnn+nnnnnnnnnnnnnn.^his condition ensures the curve isnnnon-singularnn if it were violated, the equation would define a singular point lacking a well-defined tangent, making it impossible to perform meaningful self-addition. n such cases, the object is not technically an elliptic curve.]nnurve somorphismsnnwo elliptic curves are considerednnisomorphicnn^o eploit the vulnerabilities described here, we really wantnnisomorphicnncurves, not justnnisogenousnncurves.] if they can be related by an affine change of variables. uch transformations preserve the group structure and ensure that point addition remains consistent. t can be shown that the only possible transformations between two curves in short eierstraß form take the shapenn(nnnn,nnynn)nn↦nn(nnennnnnn,nnennnnynn)nn(, y) mapsto (e^ , e^ y)nn(nnnn,nnynn)nn↦nn(nnennnnnn,nnennnnynn)nnfor some nonzeronnenn∈nnnnqnne in mathbb{}_qnnenn∈nnnnqnn​nn. pplying this transformation to the curve equation results innnynnnnnnnnnn+nnnnennnnnn+nnnnennnny^  ^ +  e^{}  +  e^{}nnynnnnnnnnnn+nnnnennnnnn+nnnnennnnhennjnnjnnjnn-invariantnnof a curve is defined asnnjnnnnnnnnnnnnnnnnnn+nnnnnnnnj   frac{^}{^ + ^}nnjnnnnnnnnnnnn+nnnnnnnnnnnnnn​nnvery element ofnnnnqnnmathbb{}_qnnnnqnn​nncan be a possiblennjnnjnnjnn-invariant.^oth  and  curves have a j-invariant equal to , which isnnreally specialnn.] hen two elliptic curves share the samennjnnjnnjnn-invariant, they are eithernnisomorphicnn(in the sense described above) or they arenntwistsnnof each other.^e omit the discussion about twists here, as they are not relevant to this case.]nnploitabilitynnt this point, all that's left is to craft a suitable point on a carefully chosen curve, and voilà—nnle jeu est faitnn.nnou can try the test vector usingnnthis linknnand enjoy the ride.nnonclusionnnn this post, we eplored the vulnerability in esu's implementation of elliptic curve checks. his flaw, if eploited, could allow an attacker to craft a point that passes subgroup membership checks but does not lie on the actual curve. he esu team has since addressed this issue in release ... hile the issue was isolated to esu and did not affect other clients, discrepancies like this raise important concerns for multi-client ecosystems like thereum.  mismatch in cryptographic checks between clients can result in divergent behavior—where one client accepts a transaction or block that another rejects. his kind of inconsistency can jeopardize consensus and undermine trust in the network’s uniformity, especially when subtle bugs remain unnoticed across implementations. his incident highlights why rigorous testing and robust security practices are absolutely essential—especially in blockchain systems, where even minor cryptographic missteps can ripple out into major systemic vulnerabilities. nitiatives like the ectra audit competition play a crucial role in proactively surfacing these issues before they reach production. y encouraging diverse eyes to scrutinize the code, such efforts strengthen the overall resilience of the ecosystem.nnimelinenn-- – ug affecting ectra - on esu reported via thennectra udit ompetitionnn.nn-- – iscovered and reported the -/- issue to the esu team.nn-- – arius an er ijden created a test case and statetest to reproduce the issue.nn-- – he esu team promptly acknowledged andnnfiednnthe issue.