Titre: Q4 Roundup\nAuteur: Ethereum Team\nDate: January 2, 2018\nURL: https://blog.ethereum.org/2018/01/02/q4-roundup\nCatégorie: Non catégorisé\n\n==================================================\n\nthereum has grown very rapidly in the last few months. ransaction volume on the blockchain hasnnmore than doublednn, surpassing  transactions per second for days at a time. he number of new accounts created per daynnpassed ,nn, and thennnumber of nodesnnhas increased despite rising system requirements. s attention and interest in the blockchain space as a whole continues to hit new highs, we are entering a new phase in the industry’s growth the phase where we are finally going from eperiments and tests to real, live applications.nnaspernnnnasper proof of stakenntestnet based on pyethereum has been released.nnarious simplifications to the algorithm, including the reduction to one message type, have been finalized (also updated thennaccountable safety proofnnin sabelle).nnhennasper  basics papernnhas been released.nnee presentationsnn(i)nnandnn(ii)nnfrom arl loersch on asper , andnn(iii)nnfrom on hoi on cryptoeconomics see alsonnthis eplainernnof asper by on hoi.nnhardingnn specification of version  of sharding has been releasednnhttps//github.com/ethereum/shardingnn.nnevelopment of the sharding client has moved from pyethereum tonnpy-evmnn.nnll of the different components, includingnnaccount abstractionnn, thennnew transaction formatnn, access list restrictions, thennbinary trienn, and the shard watching and validating algorithm, are in the process of being developed.nnee presentation fromnnsiao-wei angnnon sharding.nny-nnharding implementation is underway in thennsharding branchnn.nn- server implementationnnunderwaynn.nnery rough initialnnocumentationnn.nnight lient development continues. ou can nownnrun a minimalistic light nodenn.nnull support for yzantium fork rules.nns (thereum mprovement roposals)nne merged  s since the last roundup.nnormal erificationnne received anncontributionnnfrom idney mani and his colleagues atnnatannthat reduces the number of reasoning steps in  code verification.nnied a bug in amboo related to   formatting.nnestingnnesteth now checks that test .json files are updated with the test filler files. ach test has a hash of its filler.nnesteth will show a warning if there is a test without a filler.nnransaction test fillers are now in general format. ne test describes a case for all different fork rules.nnome large test suites (with many tests) were split into separate smaller ones for better eecution on threads via ctest.nnesteth random code options were revived. ith `--createandomest`, testeth will generate a smart random state test. his command also accepts options for generating a random code.nnesteth options throw a warning/error if used incorrectly.nnew tests were added from the spreadsheet.nn  with  support for test filler files is in progress. nlike  format,  format allows user comments and multiline fields for nice smart contract representation.nneminnatest update (remi.ethereum.org) includesnn way to record transactions (in order to eecute them later on).nnse of the standard   interface for the olidity ompiler.nnmprovement on the olidity ditor.nnirect use of the  to interact with contracts.nneneral interface improvement.nnew tatic nalysis module.nnhanks to ninabreznik (olidity ditor), serapath (ecorder), ryestew (nterface) for their active contributions.nne are now focusing on improving the code editor, improving emid (which is now hardly usable for huge folders) and polishing the themes.nne continue to work try our best to update remi.ethereum.org each month and for each important bug fi. s emi is under heavy development, there are always new features coming in, so feel free to contribute feedback and code.nnoliditynne are working on annnoptimizernnfor our new intermediate language . he first goal is to turn the etremely modular code of the new  coder into efficient code. f course all inline assembly and also the main code generator will benefit from this work in the end. n contrast to the old optimizer, which basically soaked in bytecode into an internal representation and then re-generated the code from scratch, the new optimizer is composed ofnnmanynnsmallnnandnnverynnsimplennindividualnnstages that directly operate on the   and thus are easily verifiable for correctness.nnhe second large area of work is the  checker component. t is now able to correctly follow branching and joining control flow and also takesnnconditionsnninto account. perimental loopnnunrollingnnis the net stage.nnpart from that, we are making manynntinynnchangesnnto thenncompilernnand language and fiing thennremainingnnissues that were identified in the recently completed compiler audit.nn would like to thank the many voluntary eternal contributors for their hard work (individual attributions are made on the release page, as always)!nnecuritynne are continuing the efforts to fuzz-test the , and we are also applying fuzz testing to other areas of the thereum platform such as the geth networking stack and the solidity pipeline where we are seeing if it can be used for quality assurance of some new  components.nne are creating a new signer to enable more advanced use cases where account management is decoupled from the network node. he idea is to have a what-you-see-is-what-you-sign eperience, where the sensitive components can be eecuted in a separate , or on a separate computer or a mobile phone.nnhere has been quite a lot of activity on the bounty-front, particularly targeting ist, and we’d like to remind all usersurge you not to use the ist browser on untrusted networks or untrusted websites.nnlso, thereum is finally being added to the group of clients which undergo ive-testing, and thereum is being added to the group of clients supporting the common shared json output so that it can play along with the others in the vmlab tools.nnython cosystemnne have completed migrating the repositories for most of the python libraries to the thereum oundation github. any of these libraries were renamed in the process to conform to a single naming convention. f you use any of the following libraries, you should update your dependencies.nnethereum-utilsnnrenamed tonneth-utilsnnethereum-abi-utilsnnrenamed tonneth-abinnethereum-keysnnrenamed tonneth-keysnnethereum-keyfilennrenamed tonneth-keyfilennethereum-testernnrenamed tonneth-testernnn addition, most of the python tooling will now issue deprecation warnings when run using python . upport for python  will be removed in the first quarter of . lease upgrade to python  if you haven’t already.nnthereum-esternnhenneth-testernnpython library has gotten a few upgrades and improvements. his library is still in a pre-release beta.nnewnnpyethereum..,..nnbackendnnpdated py-evm backend for latest byzantium rules.nnarious bug fies.nneb.pynneb.py lets your python code interact with an thereum node. ersion  was released, as eta, including these changesnnutomatic thereum ame ervice lookups methods that accept he addresses now accept  names.nnorking with local private keys sign and verify simple transactions, contract transactions and messages.nnetter guessing at connection parameters, for less boilerplate when initializing eb.nn nnchecksum addresses returned everywhere, and required as input.nnetter native handling of string and bytes types more `bytes`, less he `str`.nnthereum ecosystemnnur yzantiumnnupdatennis well-received (pre-yzantium still usable withnnv..nnrelease) and already used bynneminnandnnanachenn(former est).nnevcon talks onnnweb.js .nn, thennthnndev toolkit andnnreminndevelopment, were presented, as were also various othernntalksnnregardingwith relevant technical background.nnewnnrustbn.jsnnlibrary for the elliptic pairing precompiles in the  based on the ustnnlibrarynnfrom cash/arity.nnupport for merkle proof creation and verification in thennmerkle-patricia-treennlibrary (courtesy of jbaylina).nn-nncompatibility and better documentation for ournndevppnnlibrary.nn lot of evconnnthnnfeedback, coming updates possible callback support removal for ode.js clarity, easy  signing libs (thanks inity!), an thereum node wrapper for easier testing, package management helper libraries, better filtering support.nneb.js .nnhenn. branchnnis evolving with the help of a lot of community contributions. ven though it is still in beta, many developers already use . for their projects and the response so far has been overwhelmingly positive. n the net weeks, thennweb-accountsnnpackage will be audited as it can be used for generating keys and signing messages and transactions.nne (thereum ebssembly)nnrogress continues onnnewasm-kernelnnandnnevmwasmnn, which form a prototype  and transpiler written in . rogress also continues onnnerann, a  written in ++ that is compatible with the - . e are working to transpile the  state tests into an e test suite which can be used for testing era. he near-term goal is to build a “eth+era” client and use it to launch an e testnet.nn++ thereumnnhenncpp-ethereumnnis yzantium ready from the yzantium first block.nnhenn-nninterface is progressing. n eperimental branch of go-ethereum eists where geth is powered by  virtual machine through - . ou can find a running node of type “eth+” onnnhttps//ethstats.netnnfrom time to time.nnnnis also yzantium ready. e are working on upgrading  from . to . (thanksnndmakarovnn). here is some also hope for finally using    instead of .nn nncleanednnupnn.nnopsten syncnnimprovementsnn.nnorennmultithreadingnnproblemsnnfiednn.nn traces nownnfollownnthe standardized formatnn.nnommunicating with devpp v nodesnnfiednn.nni to support networks withnnhigh _ valuenn.nnommand-line interfacennreworkednnandnnimprovednn.nnternal proy tool now is used tonnserve   requestsnninstead of having  server inside the clientnn.nn lot of various fies around ontinuous ntegration and building eperience.nnew ontributing uidelinesnn. ode formatting now can be automated withnnclang-formatnn.nnhe work on the snapshot sync continues snapshot importing nownnconsumes less memorynn cpp-ethereum nodes nownncan serve snapshots to other nodesnnnninstructionsnnadded for those willing to try syncing from the snapshot.nnethnnhere has been one geth release since the last roundup,nnv..nn. ighlights in that releasennincludennersion  of the les light client protocol. les/ adds support for retrieving partial log bloom filters, which enables quick log filtering with the light client.nn`geth --dev` is much faster and uses roof of uthority instead of roof of ork.nnor the net release, work is focused onnnn overhaul of the  tracing infrastructurennsupport for tracing a range of blocks, including reconstructing historical states.nnpredefined tracing functions, e.g. for collecting all internal transactions or the state closure of a particular call.nnoving handling of account private keys from geth into helper toolsnnthe signer, a tool for signing transactions.nnethkey, a command-line tool for dealing with key files.nnhipping a working peer discovery v prototype and publishing associated s.nnnabling more static analysis tools for continuous integration builds.nnistnnthereum allet and ist eta had surpassed the  million downloads mark, combined. he latest version, .., was downloaded over k times.nnur team welcomes two new members arc arreau and yan hods.  fter a while, we're back to a full squad.nnain changes since the last updatenn- ight client integration and allet app adaptations, although the  v is still eperimental.nn-  rewrite of the core of ist, enabling a better state control and resources handled by the application.nn- tudies and a lot of mocks/sketches concerning the net step of node, transaction and accounts management.nn- umerous bug fies and issue handling.nne recently released a security alert concerningnnhromium vulnerabilities affecting ist rowser etann.nnwarmnnne of our projects isnnnn, a messaging system built on top of warm. he features planned for o are mostly done, and  is already used as the backend of thennprototype chat application of ainframenn.nn uses the routing network of warm to deliver messages between nodes. t already implements the following featuresnnencryption (optionally with ephemeral keys generated by the handshake module)nn, luminosity control (nnfull, partial or no disclosure of addresses of communicating nodes),  api and flood prevention. e still have a few tasks to do, mostly stress testing and benchmarking and we also have to merge back the code to go-ethereum master.nne are also working on thennswap, swear and swindlennincentivization system. e have a basicnnimplementation of swindlenn, swap and chequebook in the warm code, and the other parts are described in thennin-progress papernn. ur goal is to finalize the paper and start to implement the incentive layer.nnn ournnnetwork testing and simulationnnproject, we implemented a framework to create and run a simulation network of devpp nodes. or the simulation we implementednnnode adaptersnnwhich create a test environment for the nodes to run in ( in-process, eecutable and docker adapters). e also created a d visualization app to display the network structure and behavior.nne also started promisingnncollaborative effortnns with olk (to develop a database layer on top of warm), ivepeer (to implement live video streaming using warm) and tatus (to implement light swarm nodes for mobile).nnhispernnersion  of hisper has started., we hope to be done by the end of ebruary. v offers nodes more control over the network load, eplores the use of libpp in the go codebase, and improves compatibility with the arity version of whisper.