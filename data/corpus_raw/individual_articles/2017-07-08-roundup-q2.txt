Titre: Roundup Q2\nAuteur: Vitalik Buterin\nDate: July 8, 2017\nURL: https://blog.ethereum.org/2017/07/08/roundup-q2\nCatégorie: Non catégorisé\n\n==================================================\n\nhanks to all the developers and team leads who contributed to the sections on their projectsnnn the last month and a half, the thereum network went through a rapid growth in usage, to the point that it now processes as many transactions per second as itcoin. o accommodate the increased load, which has on a few occasions reached the network’s full capacity for hours at a time, the community independently came together and miners voted tonnincrease the gas limit to . millionnn. e at the oundation have been rapidly putting additional resources toward increasing the efficiency of the network, alongside planning longer-term changes that will greatly increase the network’s scalability.nnesearchnnhe thereum research teamnncame together in ingaporennand discussed various topics to do with asper, sharding and thereum protocol economics.nn prototype of asper the riendly inality adget/ork hoice ule in ython is close to being finishednnhttps//media.consensys.net/casper-smart-contract-consensus-becfafecnnhttps//www.youtube.com/watchvunhiinn new version of “the auve aper” is underway and reaching early draft stage, though possiblynnin the form of multiple papersnndiscussing specific considerations and categories of attacksnnhe pyethereum client has seen a substantial revamp, and version . has been released. eennhttps//pypi.python.org/pypiactiondisplay&nameethereum&version..nnfor download in buntu you can also do “sudo pip install ethereum”. dditionally, we have implemented eperimental versions ofnntate tree pruning (reducing disk consumption by over %)nnhttps//github.com/ethereum/pyethereum/commit/effaecddbannn-disk state cache (makes state reads require one database read instead of (log(n))nnhttps//github.com/ethereum/pyethereum/commit/fdfcfaafecdbdaddnnetropolis testingnnetropolis testing is rapidly moving forward. e are actively seeking additional help with finishing testing. eennuide on helping with the etropolis testing effortnnhttps//gist.github.com/ouptacular/fdbfaccdbbefaednnublic support channel for those who want to help with etropolis testingnnhttps//gitter.im/ethereum/testsnnuide written by oichinnhttps//github.com/ethereum/cpp-ethereum/blob/develop/doc/generating_tests.rstnnhe test repositorynnhttps//github.com/ethereum/testsnnetropolis tests roadmapnnhttps//docs.google.com/spreadsheets/d/attdl_ahirlcbnne have started a substantial cross-client benchmarking effort to identify places that are in greatest need of performance improvement. ee some preliminary results for opcode benchmaking in geth herennhttps//gist.github.com/holiman/befbadadafnnthereum core developer meetings #-# took place. otes and audio/video of the meetings can be found herennhttps//github.com/ethereum/pm/tree/master/ll%ore%evs%eetingsnnist teamnnn ay-une, the ist team had a team meetup for one week the team had face tonnface meetingsnn, some members for the first time, in which we sat together to share details on projects we were working on and to talk about the current codebase and future roadmap. hile we have a long list of features we are working on, we realized that most of the issues reported on github were related to two main issues slow synchronization and lost account private keys/passwords. e outlined features that we could implement to help prevent user errors and other related issues, including more options for node switching (including nfura support) and better options for account management (including  wallets and mnemonic seeds - but with a twist).nnany of those new issues require some changes on how the signing process is done to make ist more independent of eth, which is being worked on as a standalone signer.nne have also done some research on refactoring parts of the ist codebase to make it more modular and easier to maintain.nnictor aia presented some research on how to make apps load quicker and be more reliable and we are currently testing some of these concepts as either pieces of the main codebase and/or an alternative web-based product.nnrogress has been made on  integration we have added  support to our address component, meaning that any of the apps we have built in meteor (wallet and ens registrar app) will accept a name in any field where it would usually epect an ethereum address. e are also working on making a web component for generic input types for ethereum addresses, so any webapp developer can use an input field with support for , checksum and ethereum identicons. ith swarm now using the main net registrar, it also means that ist will accept  addresses on the url as soon as the swarm branch is merged..nnwarm integration has been tested and is a lot more stable than it has been even a few weeks ago. e predict it will finally be ready to release soon.nneb.jsnneb.js is  coming along well. he new whisper  was recently added to the old .. and the new .. version. hisper v is currently only available innngethnnand needs to be started usingnn--shhnn.  e are currently adding swarm.js and finishing the avacript account management. f everything goes well, an alpha release will happen soon.nnou can already test the new web.js . herennhttps//github.com/ethereum/web.js/tree/.nn, annnd read the new docs atnnhttp//webjs.readthedocs.io/en/./nnecuritynne have received several bounty submissions for vulnerabilities in thereum, olidity and pp-ethereum. ee thennleaderboardnnfor the current stats.nne now have pyethereum on board on the cross-client blackbo consensus testing in ive, which continuously performs over  tests on each client. eennhttp//hivetests.ethereum.orgnn. s a lightweight alternative to ive, we've also started a project to perform fuzz testing directly on the virtual machines, starting with eth, arity and ython. n the same vein, we've also set up an automatednnnn-based fuzzing of olidity.nnn preparation for etropolis, a benchmarking suite for the eth  has been implemented to ensure that the gas prices for new opcodes and precompiles are within reasonable bounds, so as to not constitute o-vectors at a later point.nn .nnhe “ .” proposals are now  drafts for “ubroutines and tatic umps for the  #,” and “ perations for the  #”.  iscussion and critique are welcome at thennhttps//github.com/ethereum/s/issues/nnandnnhttps//github.com/ethereum/s/issues/nnconversations.nnthereumnnhe ethereum team is stillnnlooking for community contributorsnnto help the thereum avascript client reach etropolis compatibility.  video walkthrough “nnntro to ore evelopment with thereumjs-vmnn” has been released.nnight lientnnew algorithms have been designed and implemented in order to improve log searching performance in the net version of the  protocol. romising & work has been done toward achieving quick and trustless initial syncing without hardcoded checkpoints. e have put some efforts into finalizing the topic discovery protocol, which helps clients to find suitable  servers as it is currently a somewhat weak point in the eperimental light client service.nneminnhe main emi feature in the last month is the alpha release of emidnnhttps//github.com/ethereum/remidnnemi now allows access to a shared folder from emi  -nnhttps//remi.readthedocs.io/en/latest/tutorial_remid_filesystem.htmlnn.nne are improving the  interface (hanks to ina, ob!), in progressnnhttps//github.com/ethereum/browser-solidity/pull/nn-nnhttps//github.com/ethereum/remi/issues/nn. he ontract and ebugger tab are going to be quite nicely improved.nnn terms of functionality, the plan is to streamline the way contracts are developed, verified and debugged.  ne important feature (that has also been requested) is the ability to interact with web from a avacript console directly from the . mplementing this feature in progress now (thanks le!) -nnhttps//github.com/ethereum/browser-solidity/issues/nnote that it is already possible to use emi from ist, and a lot of anticipated emi s aim to improve this integration.nn integration has started -nnhttps//github.com/ethereum/browser-solidity/issues/nn, including a number of bug fies.nnormal erificationnnhe progress in the eth-isabelle project was mostly from eternal contributions. n particular,  the better separation logic tactics, which were eternally contributed allow much shorter proofs about thereum contracts.nnetter separation logic tactics (contributed)nnoq build fied, and added in the continuous integrationnnemoving unmaintained files, and `nnotation` structure not needed anymore ( pending)nnunning lockchain ests (in progress ecdsa recover implementation in aml wanted).nnamboonnhe compiler is generating bytecode for all initial eamplesnnynta perfection following community feedbacknnnd-to-end testing of the compiler (in progress)nnoliditynnhe olidity project has been quite active in the last months, although most of the updates is not yet directly visible on the user side. e saw a lot more engagement by the community and now have volunteers regularly contributing both to the core code as well documentation including translation, mainly intonnpanishnn.nne added a feature that allowsnneport of the full abstract synta treennwith all type annotations, which makes it much easier to write tools that would otherwise need a custom-made parser. he net feature will be to alsonnre-importnnthis data after potential modifications, which would allow things like mutation testing.nne etended the inline assembly language withnnstructured elements (for, switch and functions)nnand deprecated manual jumps. his new inline assembly language will become a new intermediate language (together with type information), which allows olidity to be more transparent in its compilation, more efficient (we will be able to add much more sophisticated optimizer routines) and more portable (it can already compile to , . and some e). e are currentlynnrewriting the  encodernnin this intermediate language which will include structs and nested dynamic objects.nninally, we are adding annnautomated compile-time overflow and assertion checkernnwhich will also feature an  solver for the more complicated cases. h and of course, we have worked on tons ofnnbugfies and smaller featuresnn.nnwarmnnhe swarm team has onboarded new members and held an in-person warm ummit in erlin in une, . he week-long event brought together thereum team members, community contributors andspecial guests representing projects and companies interested in swarm. ore than twenty talks and tutorial sessions were recorded. he edited videos will be published soon on the swarm summit website. ur public alpha test saw a great community response allowing us to gather more information on prospective user base needs and what the typical usage patterns might be. he high churn of nodes requires an eplicit distinction between nodes that can and cannot commit to being available for a longer period of time to provide sufficient storage and bandwidth resources for the network. o support noncommiting nodes and mobile clients, swarm will offer various light modes of operation.nne have developed a suite of eample applications highlighting the architectural and implementational peculiarities of warm-hosted distributed web applications that are quite a departure from the traditional client-server model. n particular, the building blocks of a distributed functional equivalent of dropbo are being developed, such as a web-interface providing a file-system view of swarm-hosted volumes,  integration, ist-integration,  mounting of swarm-volumes and privacy protections.nne added a new protocol, pss (bzz whispered) allowing internode messaging with deterministic routing based on the relaying kademlia network topology of swarm. he protocol uses whisper envelopes and offers udp-like protocol communication between nodes that are not directly connected.nnurthermore, we have developed a network testing and simulation framework in which we can model and benchmark a broad range of scenarios emerging from the interaction of a potentially large number of  nodes. his framework includes both scripting and visualization capabilities.nnn cooperation with the emi team, the implementation of a fully distributed integrated contract development environment is underway.nnhe net major release,  . is scheduled to come out around etropolis and will include  obfuscation support fornnplausible deniabilitynn, a rewrite of the swap peer-to-peer accounting for bandwidth incentivisation among other things.