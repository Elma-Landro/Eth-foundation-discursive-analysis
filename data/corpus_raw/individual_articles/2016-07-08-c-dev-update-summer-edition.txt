Titre: C++ DEV Update - July edition\nAuteur: Christian Reitwiessner\nDate: July 8, 2016\nURL: https://blog.ethereum.org/2016/07/08/c-dev-update-summer-edition\nCatégorie: Non catégorisé\n\n==================================================\n\nince the last ++  pdate, a lot of things happened in the engine room which were not really visible to the outside. his post wants to give an overview about what we are currently working on.nnpart from the features side, ob has been working on a proposed process for re-licensing of the ++ runtime client code to pache ., as has been mentioned a few times in the past month or two. pect more news on that very soon.nnth nit-est odennot only because it is essential for being able to perform our olidity end-to-end tests via , imitry hoklov and others added some new  endpoints to the eth client which allow much more fleibility for testing smart contracts. f you use eth --test -d /tmp/test and connect to the ipc port at /tmp/test/geth.ipc (we recommend usingnnethereum-consolennfor that because it already has these features added) you cannnchange the blockchain parameters (e.g. remove proof of work checking and pre-fund certain accounts)nnmine a certain amount of blocks (at around  blocks per second)nnmodify the timestamp of the current block (to e.g. test timeouts in your contracts)nnrevert the blockchain to a given block numbernnhis allows us to run our currently  olidity end-to-end tests in around  seconds on a moderate computer. ach of these tests include at least two (often more) transactions and the same amount of mined blocks.nnore information about these features can be found atnnhttps//github.com/ethereum/ethereum-consolenn.nnlease note that this is currently only available for the binary that is provided via thennubuntu dev ppann.nnirtual achine peedupnnreg olvin spent the last months speeding up the ++ implementation of the  interpreter. e harvested what he calls the low-hanging fruits (he worked for racle on the ava interpreter before…).   he most important improvements so far have been replacing -bit calculations with -bit calculations for gas metering, and making sure that no more metering calculations are done for each  operation than necessary.  hese and other changes resulted in the following results for aweł ylica’s nascentnnbenchmark suitenn. he following chart shows the speedup relative to the old cpp ethereum interpreter (cpp int (old)).nno be fair, we have to tell what these benchmarks measure. he first benchmark (where the evmjit goes off the scale with a speedup of ) does a million empty loops, and shows how slow the ’s computed goto is compared to the direct jump of a  - fiing that is net on the stack.  he second benchmark is a bad random number generator that does a million loops with four multiplications and four additions per loop.  t is dominated by -bit calculations, so a  makes less difference.  (ote that the o  does not compile to native code, but to a faster interpreted representation.)nnn practicenn, these speedups willnnonlynnbe relevant to “number-crunching” contracts because the computation time is otherwise largely dominated by storage access. n the other hand, the “rng” benchmark is quite similar to cryptographic operations which pulls such things further into the realm of actual on-chain implementations.nnaweł ylica is working on ann-language interfacennbetween the virtual machine implementation and the client that hosts it, with the goal of being able to plug different s into an thereum client. his way, geth can also potentially benefit from our changes to the ++ virtual machine and especially from the  just-in-time compiler.nnote that these changes are not yet released, but they are part of thennubuntu dev ppann.nneminnann evreau and iana usikyan are working on our new  debugger remi. e released the alpha version some days agonnpplicationnn-nnnstructionsnnor now, you can “only” use it to inspect every single step in the eecution of any transaction in the blockchain, look at the current stack, memory and storage contents and see the sequence of instructions. he net step will be to also allow source-level debugging where you can see the current position in the source code, step on line or instruction level and see the decoded values of the variables (instead of only the raw he values).nnhe debugger is for you, the community, and we were delighted to hear that etherscan has already integrated emi into theirnnblockchain eplorernn.nnepository eorganisationnnob ummerwill is dedicated to bringing back ++-thereum to its former home, https//github.com/ethereum/cpp-ethereum and thus remove the unnecessary and confusing split into multiple sub-repositories. e are making great progress there, one of the first really visible steps was to decouple the testing infrastructure of olidity from the virtual machine implementation. he olidity tests can now be compiled without the virtual machine and they are run by communicating with a specially configured eth process (the one mentioned above) over the regular  interface.nnhe net steps here are to disentangle the rest of the code, modify the test automation and continuous integration accordingly and perform the actual move.nnogether with this step, we unfortunately have tonnsay goodbye to i and letheronn(the spirit of mi will live on in the new remi project). he burden they drag along would be too big, because it includes t and a tight coupling with olidity. s already eplained in earlier posts, a loose -based coupling of these tools to a small client implementation makes us much more fleible and the community support that comes with a change to avacript and eb-based tools like remi and browser-solidity is just overwhelming in comparison.nnormal erificationnne are etending the eisting formal verification tools integrated with olidity to cross-contract calls. his would enable automated proofs that e.g. a recursive call attack is not possible against a certain contract. lso, as why (the tool we use to do the heavy lifting) was recently ported tonnbrowsersnn, we can probably epect it to be available right inside browser-solidity and other tools like blockchain eplorers!nnhere is a firstnnproof of conceptnnincluding eplanations that shows how automated verification can be used to show that it is impossible to steal money from a solidity contract, even if recursive calls are allowed.nnhis proof of concept will hopefully evolve into a usable tool in the net weeks.nnolidity oolsnneveral people from the community and from inside the oundation are currently working on tools for olidity or the  in general. hese includennolidity  analysis for warnings by ave oover (redsquirrel)nn ead-val-rint version of olidity by raineorshinennolidity-replnnontrol-flow analysis graphnnalso by raineorshinenn disassemblernnby ick ohnson