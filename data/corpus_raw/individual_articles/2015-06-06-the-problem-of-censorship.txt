Titre: The Problem of Censorship\nAuteur: Vitalik Buterin\nDate: June 6, 2015\nURL: https://blog.ethereum.org/2015/06/06/the-problem-of-censorship\nCatégorie: Non catégorisé\n\n==================================================\n\nne of the interesting problems in designing effective blockchain technologies is, how can we ensure that the systems remain censorship-proof lthough lots of work has been done in cryptoeconomics in order to ensure that blockchains continue pumping out new blocks, and particularly to prevent blocks from being reverted, substantially less attention has been put on the problem of ensuring that transactions that people want to put into the blockchain will actually get in, even if "the powers that be", at least on that particular blockchain, would prefer otherwise.nnensorship-resistance in decentralized cryptoeconomic systems is not just a matter of making sure ikileaks donations or ilk oad . cannot be shut down it is in fact a necessary property in order to secure the effective operation of a number of different financial protocols. o take a completely uncontroversial, but high-value, eample, consider contracts for difference. uppose that parties  and  both place   into a contract betting on the gold/ price, with the condition that if the price after  days is $, both get   back, but for every $ that the price increases  gets   more and  gets   less. t the etremes, at $  gets the entire  , and at $  gets the entire  . n order for this contract to be a useful hedging tool, one more feature is required if the price hits $ or $ atnnanynnpoint during those  days, the contract should process immediately, allowing both parties to take out their money and enter another contract to maintain the same eposure (the $ difference is a safety margin, to give the parties the ability to withdraw and enter a new contract without taking a loss).nnow, suppose that the price hits $, and  has the ability to censor the network. hen,  can prevent  from triggering the force-liquidation clause. uch a drastic price change likely signals more volatility to come, so perhaps we can epect that when the contract ends there is a % chance the price will go back to $ and a % chance that it will hit $. f the price goes back to $, then once the contract ends  loses  . owever, if the price hits $, then  loses only   from the price moving $ hence, 's epected loss is only .  and not the   that it would be if  had been able to trigger the force-liquidation clause. ence, by preventing  from publishing a transaction to the blockchain at that critical time,  has essentially managed to, in common economic and political parlance, privatize the profits and socialize the losses.nnther eamples includennauditable computationnn, where the ability to publish evidence of malfeasance within a particular time-frame is crucial to the mechanism's economic security, decentralized echanges, where censorship allows users to force others to keep their echange orders open longer than they intended, andnnchellingcoinnn-like protocols, where censors may force a particular answer by censoring all votes that give any other answer. inally, in systems like endermint, consensus participants can use censorships to prevent other validators from joining the consensus pool, thereby cementing the power of their collusion. ence, all things taken together, anti-censorship is not even about civil liberties it is about making it harder for consensus participants to engage in large-scale market manipulation conspiracies - a cause which seems highnnon the regulatory agendann.nnhat s he hreat odelnnhe first question to ask is, what is the economic model under which we are operating ho are the censors, how much can they do, and how much does it cost them e will split this up into two cases. n the first case, the censors are not powerful enough to independently block transactions in the endermint case, this entails the censors having less than % of all validator positions, in which case they can certainly restrict transactions from their own blocks, but those transactions would simply make it into the net block that does not censor them, and that block would still get its requisite % signatures from the other nodes. n the second case, the censors are powerful enough in the itcoin case, we can think of the top five mining firms and data centers colluding, and in the endermint case a group of very large stakeholders.nnhis may seem like a silly scenario to worry about - after all, many have argued that cryptoeconomic systems rely on a security assumption that such a large group of consensus participantsnncannotnncollude, and if they can then we have already lost. owever, in those cases, we actually have a secondary defense such a collusion would destroy the underlying ecosystem and currency, and thus be highly unprofitable to the parties involved. his argument is not perfect we know that with bribe attacks it's possible for an attacker to set up a collusionnnwhere non-participation is a public goodnn, and so all parties will participate even if it is collectively irrational for them, but it nevertheless does set up a powerful defense against one of the more important collusion vectors.nnith history reversion (ie. % attacks), it's clear why carrying out such an attack would destroy the ecosystem it undermines literally the only guarantee that makes blockchains a single bit more useful than itorrent. ith censorship, however, it is not nearly clear that the same situation applies. ne can conceivably imagine a scenario where a large group of stakeholders collude to first undermine specific highly undesirable types of transactions (eg. child porn, to use a popular boogeyman of censors and civil liberties activists complaining about censors alike), and then epand the apparatus over time until eventually it gets into the hands of some enterprising young hotshots that promptly decide they can make a few billion dollars through the cryptoeconomic equivalent of  manipulation. n the later stages, the censorship may even be done in such a careful and selective way that it can be plausibly denied or even undetected.nnnowing the results of yzantine fault tolerance theory, there is no way that we can prevent a collusion with more than % participation in the consensus process from doing any of these actions absolutely. owever, what we can try to do is one of two thingsnnake censorship costly.nnake it impossible to censor specific things without censoring absolutely everything, or at least without shutting down a very large portion of the features of the protocol entirely.nnow, let us look at some specific ways in which we can do each one.nnostnnhe first, and simplest, way to discourage censorship is a simple one making it unprofitable, or at least epensive. otably, proof of work actually fails this property censorship isnnprofitablenn, since if you censor a block you can (i) take all of its transactions for yourself, and (ii) in the long run take its block reward, as the difficulty adjustment process will reduce difficulty to ensure the block time remains at  minutes (or  seconds, or whatever) despite the loss of the miner that has been censored away. roof of stake protocols are also vulnerable to (i) by default, but because we can keep track of the total number of validators that are supposed to be participating there are specific strategies that we can take in order to make it less profitable.nnhe simplest is to simply penalize everyone for anyone's non-participation. f  out of  validators sign a block, everyone gets % of the reward. ut if only  validators sign, then everyone gets % of the reward. dditionally, if a block is skipped, everyone can be slightly penalized for that as well. his has two sets of consequences. irst, censoring blocks produced by other parties will cost the censors. econd, the protocol can be designed in such a way that if censorship happens, altruists (ie.nndefault software clientsnn) can refuse to sign the censoring blocks, and thus inflict on the censors an additional epense. f course, some degree of altruism is required for this kind of cost strategy to have any effect - if no one was altruistic, thennneveryonennwould simply anticipate being censored and not include any undesirable transactions in the first place, but given that assumption it does add substantial costs.nnimelock consensusnns for the second approach, there are two primary strategies that can be undertaken. he first is to use timelock puzzles, a kind of encryption where a piece of data takes a particular amount of time in order to decrypt and which cannot be sped up via parallelization. he typical approach to timelock puzzles is using modular eponentiation the basic underlying idea is to take a transactionnndnnand generate an encrypted valuenncnnwith the propertynnf you knownnpnnandnnqnn, then computingnncnnfromnndnnandnndnnfromnncnnare both easy use thennhinese remainder theoremnnto decompose the problem intonnnd then usennermat's little theoremnnto further decompose intonnhich can be done in a paltrynnlog(n)nnsteps using two rounds of thennsquare-and-multiply algorithmnn, one for the inner modular eponent and one for the outer modular eponent. ne can use thennetended uclidean algorithmnnto compute modular inverses in order to run this calculation backwards. ackingnnpnnandnnqnn, however, someone would need to literally multiplynncnnby itselfnnnnntimes in order to get the result - and, very importantly,nnthe process cannot be parallelizednn, so it would take just as long for someone with one computer as it would for someone with a thousand. ence, a transaction-sending protocol can be constructed as followsnnender creates transactionnntnnender encryptsnntnnusingnnpnnandnnqnnto getnncnn, and sendsnncnnandnnpqnnto a validator alongside a zero-knowledge proof that the values were produced correctly.nnhe validator includesnncnnandnnpqnninto the blockchainnnhere is a protocol rule that the validator must submit the correct original transactionnntnninto the blockchain within  hours, or else risk losing a large security deposit.nnonest validators would be willing to participate because they know that they will be able to decrypt the value in time, but they have no idea what they are including into the blockchain until it is too late. nder normal circumstances, the sender will also submitnntnninto the blockchain themselves as soon asnncnnis included simply to speed up transaction processing, but if the validators are malicious they will be required to submit it themselves within  hours in any case. ne can even make the process more etreme a block is not valid if there remainnncnnvalues from more than  hours ago that have not yet been included.nnhis approach has the advantage that gradual introduction of censorship is impossible outright it's either all or nothing. owever, the "all" is still not that much. he simplest way to get around the mechanism is for validators to simply collude and start requiring senders to sendnntnn,nnpnnandnnqnnalongsidenncnn, together with a zero-knowledge proof that all the values are correct. t would be a highly obvious and blatant move, but all in all not a very epensive one. n additional problem of the scheme is that it's highly unnatural, requiring substantial epense of computing power (not nearly as much as proof of work, but nevertheless an hour's worth of computing time on a single core) and slightly non-standard cryptography in order to accomplish. ence, one question is, is there some way in which we can do betternnor a simple transaction processing system, the answer is likely no, barring improved versions of timelock that rely on network latency rather than computing power, perhaps in the spirit ofnnndrew iller's nonoutsourceable puzzlesnn. or a uring-complete object model, however, we do have some rather interesting alternatives.nn key tool in our arsenal is the halting problem given a computer program, the only absolutely reliable way to determine what it will do after a number of steps of eecution is to actually run it for that long (note the original formulation asks only whether the program will halt, but the inherent impossibility can be generalized to very many types of output and intermediate behavior).nnn the contet of thereum, this opens up a particular denial-of-service attack vector if a censor wishes to block transactions that have an undesirable effect (eg. sending messages to or from a particular address), then that effect could appear after running for millions of computational steps, and so the censor would need to process every transaction and discard the ones that they want censored. ormally, this is not a problem for thereum as long as a transaction's signature is correct, the transaction is well-formatted and there is enough ether to pay for it, the transaction is guaranteed to be valid and includable into the blockchain, and the including miner is guaranteed to get a reward proprtional to the amount of computation that the transaction is allowed to take up. ere, however, the censor is introducing an additional artificial validity condition, and one that cannot be verified nearly so "safely".nnowever, we cannot immediately assume that this denial-of-service vulnerability will be fatal it only takes perhaps a tenth of a second to verify a maimally sized transaction, and one certainly can overcome attacks of that size. ence, we need to go a step further, and introduce an upcoming thereum . feature events. vents are a feature that allows a contract to create a kind of delayed message that is only played at some prespecified block in the future. nce an event is made, any block at the height at which the event is supposed to maturennmustnnplay the event in order to be valid. ence, transaction senders can be clever, and create a hundred transactions that create a hundred events, only all of which together create an event that accomplishes some particular action that is not desired by censors.nnven now, censors trying to produce their blocks can still try to simulate a series of empty blocks following the block they are producing, to see if the sequence of events that they are generating will lead to any undesirable consequence. owever, transaction senders can make life much harder for censors still they can create sets of transactions that create events that don't by themselves do anything, but do lead to the sender's desired consequencennin combination with some other transaction that happens regularlynn(eg. loomberg publishing some data feed into their blockchain contract). elying on block timestamps or other unpredictable block data is another possibility. ote that this also makes it much harder to enact another defense against these anti-censorship strategies requiring transaction senders themselves to produce a zero-knowledge proof that their transactions bear no undesirable intent.nno epand the functionality of this scheme, we can also add another protocol feature create a specialized address where messages sent to that address are played as transactions. he messages would contain the transaction data in some form (eg. each message specifies one byte), after a few hundred blocks trigger events to combine the data together, and the data would then have to be immediately played as a regular transaction once the initial transactions are in, there is no way around it. his would basically ensure thatnneverythingnnthat can be done by sending transactions (the primary input of the system) can be done through this kind of covert latent message scheme.nnence, we can see how blocking such circumventions will very likely be pretty much impossible to do completely and absolutely rather, it will be likely a constant two-sided war of heuristics versus heuristics where neither side would have a permanent upper hand. e may see the development of centralized firms whose sole purpose is to accept any transaction and find some way to "sneak it in" to the blockchain in echange for a fee, and these firms would consistently update their algorithms in response to the updated algorithms of the parties that are trying to work against their previous algorithms to block the attempt. erhaps, this is the best that we can do.nnnti-censorship and inalitynnt is important to note that the above by itself does not prove that censorship is etremely epensive all on its own. ather, it shows that, if developers take care to add certain features into the blockchain protocol, censorship can be made as hard as reversion. his still leaves the question of how difficult reversion is in the first place.  lot of earlier consensus protocols, including proof of worknnandnnnaive versions of proof of stake, do not make small-depth reversion very difficult hence, if it takes a hundred blocks to realize that an undesirable transaction has successfully entered the system, then it would be a major inconvenience but the validators would be able to discard the old blockchain and create a new one, with all of the transactions from the old chain included in order in order to avoid inconveniencing anyone else (although anyone that was using the blockchain as a source of randomness would unfortunately be out of their luck). ewer protocols like endermint, however, use security deposits to make reverting even one block almost impossible, and so do not run into this problem if you can get the delayed events into the blockchain at all, you've already won.nnhis, incidentally, is an important case study of the importance of "bribe attacks" as a theoretical concern in cryptoeconomics even though literal bribes may in many cases be unrealistic, eternal incentive adjustments can come from any source. f one can prove that blockchains are etremely epensive to revert, then one can be assured that they will be etremely epensive to revert fornnanynnpurpose, including attacker bribes and eternal desires to revert transactions for some particular purpose.