Titre: The State of Eth2, June 2020\nAuteur: Danny Ryan\nDate: June 2, 2020\nURL: https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020\nCatégorie: Non catégorisé\n\n==================================================\n\nhuge thank you for ecellent input and feedback from acha aint-eger, oseph chweitzer, osh tark, and protolambda.nn spend a lot of my time eplaining and answering questions about eth, and  meannna lotnn. ome of this on a deep and technical level as  help communicate research and specifications to technical contributors, but more and more these days 'm fielding questions from the community about eth progress, direction, motivations, design decisions, delays, and more.  actually really enjoy these conversations.  get super ecited as  eplain eth, come up with new ways to describe various components, or find the right analogies depending on the audience to get the gears turning and the light bulb to switch on.nnut this dynamic/conversational method, while valuable, leaves a ton of the community in the dark.  get asked the same questions time and time again, and more concerningly,  get asked the same questions  months later! learly there is an information problem. his information eists, but it is scattered across the web -- research posts, specs, spec eplainers, public calls, public channels, reddit, blog posts. y first attempt after devcon to bridge the information gap between those deep in eth and the rest of the community manifested itself as a new blog series, "eth quick update". hese are little snippets to help follow along, but 'm realizing they don't really communicate the bigger picture. he bigger picturenndoesnnget communicated and discussed on podcasts, s, and conferences, but, even then, a written form will still aid these efforts.nno here we are. his post is aimed at the community, to provide you with a comprehensive look at what eth is today where it's going, what it might become, and what it means for you, the thereum community.  will attempt to providennthe right amount ofnntechnical substance to illustrate the motivations, the vision, the current state of the project, and the work to come, without getting bogged down in too much math or deep jargon.nnhis post might also be useful for those deep thereum technical eperts that have to date kept eth at arms distance. o worries,  understand. his project is big, complicated, and always seemed like it was far enough in the future that you could ignore it while you solved the pressing problems at hand. opefully this post will help you better understand the things to come.nns for the eth folks, you might also get something out of this post -- a broader perspective on where we're at now, and how 'm thinking about the things to come.nnisclaimer this is hownn, anny yannn, personally see thingsnntodaynn. here are many voices and opinions driving the ever growing, ever evolving eth. his is just a snapshot of a slice ofnnmynninterpretation.nneth, wtfnn"th is a scalable proof-of-stake infrastructure"nnf you've heard me speak at all in the past  months, you've heard me say this time and time again. th is builtnnfornnthereum and ultimatelynnisnnthereum. t aims to be a more secure and scalable contet for the current thereum mainnet, providing little disruption to the way things are done today. t the same time, it provides an upgraded contet for us to grow into.nnince before thereum launched, it was known that a single blockchain paradigm would not provide enough bandwidth to serve as the backbone of a new decentralized internet. thereum related proof-of-stake and sharding research traces its history back to as early as . oth proof-of-stake and sharding aim to answer the following question iven a certain amount of capital backing a crypto-economic system, can we improve security and throughput while still allowing consumer hardware to participate in consensus and follow the chain hile  won't get into the history here, this eploration took years and was marked by many false starts. n the end, the answer is a resoundingnnyesnn, and has manifested itself as the eth project.nnth is an ambitious, multi-year project that will be rolled out in phases. his is widely documented and discussed, but 'll give you a quick, not-so-technical look at what these entail.nnhase nnhase , the eacon hain, is the core of the new consensus mechanism. his is where all the system level activity and orchestration happens. hase  is all about coming to consensus with hundreds of thousands of consensus entities (validators), distributed across thousands of nodes around the world.nnue to the technical requirements of distributing subsets of validators across shards in phase +, we need to be able to handle a huge amount of validators. uch of the engineering compleity stems from this requirement. ther non-sharded, proof-of-stake mechanisms have s or maybe s of validators, but eth is designed to have a bare minimum of ~k validators with the epectation that this figure will be in the hundreds of thousands within a couple of years.nnhase nnhase  is about coming to consensus, whereas hase  is about coming to consensus onnna lotnnof stuff. his "stuff" comes in the form of many shard chains. ou can think of a shard chain as its own blockchain with approimately the same compleity as thereum today, but living under the eth consensus (i.e. living under and built/controlled by the eacon hain). he validators from the eacon hain are given random short-term assignments to build and validate shard chains, making crypto-economic commitments to the state, availability, and validity of each chain back into the core system.nnoday, we epect there to be  shards to start, and for the total data available to the system to be in the  to  /s range (, that's a ton of data).nnhase .nnhase . is the integration of thereum mainnet into the new eth consensus mechanism as a shard (eisting as one of the many shards created in hase ). nstead of the thereum we know and love being built by a proof-of-work mining algorithm, it will be built by the eth validators. or eisting applications and users, this hot swap of the consensus mechanism will largely be transparent. pplications will continue chugging along, but developers will now have a much more powerful system to build on (better security properties, proper economic finality, more layer  data for rollups and other fun applications).nnhase nnhase  is the addition of state and eecution on more shards than just the original thereum shard. here are many forms that this can take. iguring out which form, and the details behind it, is a hot bed of research and prototyping today. 'll discuss that a bit more in sections below.nnenefits of eth to the community over timennkay, so we have all these phases coming and hase  actually feels like it's just around the corner. ut that roadmap still sounds a little long. hat should  actually epect from eth during the phases of the upgradennreat question! n general, epect a wave of upgrades that increasingly touch more of thereum and more of the community at each step. s a user, you can either get involved early with staking in hase , or you can simply wait until thereum fully migrates into eth at hase . (a transition which should be seamless from the point of view of both dapp developers and users). egardless of how engaged you choose to be and at what phase, there are important milestones and benefits worth being aware of as this all starts to roll out.nnhe first is that  know a lot of you are die-hard  holders who are anious to get in on the staking action. o all the potential validators out there, especially the hobbyists, hase  is for you. hase  comes with its own risks and time horizons that will make it unappealing for some participants, so  personally hope this phase is a boon both for hobbyists and long term thereum believers. his is a unique chance to get in on the ground, to help influence the vision over time, and to receive a higher  reward for being an early adopter.nnhat about hase  s there anything useful we can do with all this data before the integration of thereum into eth es, glad you asked!nnayer  data is incredibly useful even without native computation. n fact, the most promising layer  scaling solutions in the past  months are these so called "rollup" chains (both optimistic and ) which scale with the availability of layer  data. he eth data layer is epected to provide thereum with somewhere between  and  /s of data availability which translates into massive scalability gains when coupled with rollup tech. ut due to the initial disjointedness of thereum and the new sharded universe at the start, making claims about the eth shard data is hard. hat's one of the reasonsnn nnis so important for thereum mainnet. ith a native  (new eth signing algorithm) precompile, we can write an efficient eth light client as a solidity contract, opening up the ability for thereum applications to make claims about data in eth before the hase . integration.nns discussed above, hase . is huge. th is built for thereum and at this point,nneth becomes thereumnn. ll of the applications we know and love become integrated in the upgraded eth consensus mechanism, retaining the feature-set we are used to while simultaneously opening up the vast new landscape of a secure proof-of-stake consensus with native access to a highly scalable data layer. his is the meat of the process in my opinion. his is the moment of grand success as we anchor thereum fully into its new reality.nneyond that, additional scalability gains will likely be made over time by enabling state/eecution on additional shard chains. his may come in the form of the  or a new  called e. egardless of the choice of , the eisting thereum  shard and the new shard chains will be able to interact and communicate natively via the eacon hain, completing the multi-eecution, sharded vision.nnee t's a journey, but there are major gains to be made along the way.nnhe difficulties of this approach, and why it's worth itnno many validatorsnn key component of sharding relies upon the random sampling of consensus participants (validators) into committees to validate a subsection of the protocol (e.g. a shard). iven enough validators in the protocol, and an attacker of an assumed ma sizenn(controllingnn/nnof the validators, say)nnit becomesnnmathematically improbablenn(vanishingly so, think probability on the order ofnn / ^nn) for the attacker to overtake any one committee and corrupt the system. his allows us to design the system such that anyone with a consumer machine (e.g. a laptop or maybe even an old phone) can become a validator (since validators are assigned to subsections of the system, and validating any subsection can be done with the compute resources of a single machine).nnhis is what makes sharding incredible and, at the same time, hard. or one, we must have enough validators to make this random sampling safe which means eth has far more epected validators than most ( think any) other proof-of-stake protocol. his introduces challenges in every layer of the process -- from research, to consensus mechanism specification, to networking, to resource consumption and optimizations in clients. ach additional validator induces load on the system that must be accounted for at every stage in the process. th client teams have accomplished the erculean task of managing the consensus of hundreds of thousands of validators so that we can safely and efficiently integrate many shards come hase .nno many shardsnnnother fundamental design decision that makes what we're building so hard is that, in thereum, we choose to gain scalability withoutnncompromising onnndecentralization.nnt's not hard to scale a blockchain to tens of thousands of transactions per second, if we don't care about users actually being able to validate the chain for themselves, or about guaranteeing that the data is actually available to the network. he compleity of a sharded consensus mechanism is required so that the system can be broken up into bite-sized validate-able chunks. pec'ing and implementing such a consensus mechanism is quite simply a difficult task.nno many clientsnn core tenet of thereum is that thereum isnnprotocol firstnn. thereum is the abstract set of rules that makes up the protocol rather than any specificnnimplementationnnof those set of rules. o that end, the thereum community has encouraged many client implementations since day . n thereum mainnet today, this comes in the form of besu, ethereum, geth, nethermind, nimbus, open-ethereum, trinity, and turbo-geth. nd in the eth landscape, this manifests as corte, lighthouse, lodestar, nimbus, prysm, teku, and trinity.nnhe multi-client paradigm has many significant advantagesnnaving many clients allows for a wider eploration of ideas, algorithms, and architectures (each client brings their own approach and point of view). here is a healthy cross-pollination in this process as we all build more robust systems.nnlients often have different design goals. his leads to a more diverse set of users and applications as time progresses. lients may be more or less focused on any of the following -- performance, security, horizontal scaling, /, light clients, browsers, resource constrained devices, etc, etc.nnith many production grade clients on mainnet, a significant attack that can bring down any one client (e.g. a o attack) is met with resilience as the rest of the clients stand strong. his was seen very early in thereum's history during the "hanghai o ttacks" when a series of o attacks were able to bring down geth and parity but never both at the same time.nnach client serves as a gateway to a programming language community. he foundation of a client in a particular language opens and invites eperimentation and innovation in that language. he base tooling around the client often snowballs into a robust ecosystem of tools and contributors in that language. he multi-client paradigm reinforces the gravitational well that is thereum.nnith these distinct advantages come some difficultiesnnhe spec and testing must be air-tight to avoid any accidental forking on mainnet. f there is only one implementation of the protocol, then that implementationnnbecomesnnthe protocol. n the single client case if there were any sort of consensus "bug" hit on mainnet, then it would become baked into the reality of the protocol. his isn't great from a purity perspective, but it eliminates any risk of an accidental fork. s a counter to this difficulty -- if we have a healthy distribution of clients on mainnet (e.g. no client has more than / of total nodes/validators), the network can remain live even in the face of a single client having a consensus issue.nnoordination ofnnnnclients at best results a linear overhead compared to just a single client, but in some cases might induce a quadratic overhead (nn^nn). here are techniques we employ to reduce this overhead -- e.g. consensus (and soon network) test suites -- but it will always be there in some capacity.nntate of eth clients and testnetsnnhase  eth clients have become quite sophisticated pieces of software over the past  years, being able to handle the distributed consensus of hundreds of thousands of validators across thousands of nodes. e are currently in the testnet phase and inching closer to launch every day.  epected the last mile to be long. t turns out that it is.nn ask you during this period before launch, to get out of your comfort zone andnntry multiple clientsnn. here are many tradeoffs between them and you're going to have to get your hands dirty to find out which works best for you. s discussed above, thereum operates in a mult-client paradigm. o gain the benefits of this paradigm, we need users to run a diverse set of clients (to create a healthy distribution across all the types of clients).nneyond that, there are anti-correlation incentives built into the protocol. n etreme situations in which a major client accidentally causes validators to either go offline, or commit a slashable offence, if your validator's behaviour is correlated with that client, you will be penalized much more than if you did something wrong but uncorrelated with others. n other words, in these situations it's much better to be running a minority client rather than a client with a huge portion of the network.nno be absolutely clearnn--nnif there is more than one viable and secure client, it is your duty to run minority client software to promote a healthy distribution of client software on the network.nnlso, don't be shy. f you run into issues with the docs, let someone know. f you see a typo, submit a . f something crashes or a bug pops up,nnplease-please-pleasennreport it on github or the client discord. ou are the beta users and with your help we can make this better for everyone.nnestnetsnne are currently running small public devnets, which we restart approimately every one to two weeks.  say "devnet" because they are first and foremost for client team developers to work through bugs, optimizations, etc. hey are public and you're welcome to join, but be aware that they aren't yet long-lived like oerli or inkeby. he most recent launch, led by fri choedon, is thennitti testnetnnrunning the v. spec (check out thenn herennif you want to run some nodes).nnlient teams are actively upgrading to thennv. specnnwhich integrates the latest version of the   standard. rom there, we'll transition the devnets to v. as we continue to increase the size of the nets, inducing more and more load on the clients. fter we have - clients reliably kicking off successful v. nets and running at high load, we'll do a more public testnet wherennyounnwill run most of the nodes and validators. he intention here is to create a long-standing multi-client testnet that mimics mainnet as much as possible (where users can reliably practice running nodes and test anything else they want). he ideal is to spin this up just once and to sort through any failures while maintaining the net. ut depending on the presence, and severity, of failures, we might need a couple runs before we get there.nnn addition to the normal testnets, we'll also provide an incentivized "attack net" where client teams operate a stable testnet, and we invite you to try to break it in a number of different ways. or successful attacks, the  will provide  rewards. ore info on this soon -- so stay tuned!nntate of eth toolingnnhile tooling for eth is quite nascent, it's an eciting and growing effort. s mentioned above, tooling often stems from a client codebase and the efforts of the client team, but more and more hands are getting involved everyday. o better interact with, understand, secure, and enhance eth, we as a community need build out and build upon basic eth tooling.nn want to give a huge shout-out to the teams and individuals that have already provided immense value with their eth tooling, and  want to welcome everyone else to build new tools and to etend and enhance what's already there.nnth tooling is a green-field opportunity. his is an incredible chance to dig in, provide real value, and make your mark.nnhe following is a sample of the work in progress, but there's a great deal more to do!nnplorersnneaconcha.innn,nntherscannn,nnthstatsnnetwork toolingnnrrklnn,nnumornn,nnyrumnn,nntethoscopenneystores and walletsnnethdonn,nndeposit clinn,nn nn, and other new standardsnn designnnandnnprototype bindingsnnlashing detectionnnrysm "hash slinging slasher"nnnd here's a sample of some open tooling ideasnnth validator alerts provide a service that alerts node operators when their validators are not performing optimallynnalidator deposit tracking help bridge between the current thereum and eth eplorers by tracking the validator deposit processnnalidator protection via proies use a proy to track validator messages to ensure your client can't send unsafe messagesnnnd so much more -- this is the type of contribution that is not limited to a spec. reativity is important. f you want to contribute, talk to eth client teams to get started.nntate of eth+eth integrationsnnn an thereum client today (e.g. geth, etc) almost all of the compleity lies in handling user-level activity -- transaction pool, block creation, virtual machine computation, and state storage/retrieval. he actual core consensus -- proof-of-work -- is rather simple in protocol. ost of the compleity is handled by sophisticated hardware outside of the core protocol.nnn the other hand, an eth client isnnentirelynnconsensus. n proof-of-stake and sharding, many compleities are brought in-protocol to achieve the goals of a scalable consensus.nnhis separation of concerns makes for a beautiful pairing of eth and eth clients.nnhere is initial work being done on merging the two by members of the geth () and  (onsenys) teams. he work involves () defining a communication protocol between eth and eth clients, () adding a consensus engine to eth clients that can be controlled via the communication protocol, and () prototyping and simulating eth phase  behaviour to test the coupling. e epect to see some concrete results on these points this summer.nnou can read more about the high level eth+eth client relationshipnnherenn, and about the technical scope of the mergernnherenn.nntate of eecution and communication across shardsnns mentioned, the eact path to enable eecution across many shards is a hotly researched and debated area. here are many questions to answer. or eamplennow many shards should be enable with eecutionnnor additional shards, do we use  or e for the virtual machinennow do we efficiently structure and process cross-shard transactionsnnhat changes do we need to make to eisting  to support cross-shard transactionsnnan/should eecution and account structures be generally etensiblennhe e () and uilt (onsenys) teams have conducted a great deal of research in these areas over the past  months. t turns out the solution domain isnnhugenn, and although we now have a good handle on the breadth of the domain, the recent focus has been on digging into simple, tangible solutions to be able to test, prototype, and really ground the conversation. ut of this was born e's th initiative (read aboutnnthe high-level view of the projectnnand check out somennrecent specs under discussionnn).nnhere has been rapid progress in bringing the abstract cross-shard ideas into concrete specs for discussion and ultimately prototypes. eep an eye on this area of progress, especially if you are a dapp developer. e intend to have something you can understand, play with, and provide feedback on in the coming months.nnelationship of tateless thereum to ethnnhere is another major & effort happening in parallel to eth called "tateless thereum". tateless thereum is an effort to solve the state size growth problem. t allows participants to validate blocksnnwithoutnnhaving to store the entirety of the state locally. ight now, there is an implicit input in the thereum state transition function the entirety of the state. ith tateless thereum, proofs (witnesses) about the requisite state will be provided inside of blocks. his allows a block to be transitioned/validated as a pure function of just the block.nnhat this translates to for users is a world in which you can follow the chain, and even follow portions of the state that you care about,nnwithoutnnstoring all of the state. ome network participants likely will store all of the state (block producers, block eplorers, state-for-a-fee providers), but the vast majority of participants will become some shade (less than full) of stateful.nnor eth, this is an important technical mechanism to ensure that nodes and validators can validate and secure the protocol without the burden of storing the full user state of each shard. nstead, validators will likely opt-in to being block producers for some set of shards, while the baseline validator may only validate stateless blocks. tateless thereum is an incredibly valuable addition to the eth vision, keeping the base of the sharded protocol very thin. hile we're planning on eth operating statelessly, we do have a few options in the event that the stateless path does not ultimately prove viable (although 'm pretty confident in statelessness myself 😄).nn won't get any deeper into tateless thereum for this post. ust know that it's an eciting parallel & path to ensure thereum's sustainability in the long term. f you're curious to learn more, check out riffin'snnhe . ilesnnblog series.nntldrnnth is a huge undertaking to provide an upgraded, net-generation, highly-scalable and secure, decentralized consensus to thereum. here are dozens of teams and hundreds of individuals working each day to make this a reality. he path we've chosen is difficult, but immense progress has and continues to be made.nnhe core of this new mechanism is just around the corner.nnf you're an aspiring validator, now is the time to dig in. upport the multi-client paradigm by trying out multiple clients, and help instill a strong base of rich client diversity from eth's genesis.nnf you're a user or dapp developer, keep pushing on thereum today while we continue to prepare this more secure and scalable contet for you. hen the time comes, the swap to eth will be as seamless as possible.nnhank you to the incredible teams and individuals keeping thereum alive and well today thank you to all those of you preparing for thereum's future in eth and thank you to all the users and developers that make thereum awesome 🚀