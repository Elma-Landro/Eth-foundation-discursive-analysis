Titre: Uncle Rate and Transaction Fee Analysis\nAuteur: Vitalik Buterin\nDate: October 31, 2016\nURL: https://blog.ethereum.org/2016/10/31/uncle-rate-transaction-fee-analysis\nCatégorie: Non catégorisé\n\n==================================================\n\nne of the important indicators of how much load the thereum blockchain can safely handle is how the uncle rate responds to the gas usage of a transaction. n all blockchains of the atoshian proof-of-work variety, any block that is published has the risk of howbecoming a "stale", ie. not being part of the main chain, because another miner published a competing block before the recently published block reached them, leading to a situation where there is a "race" between two blocks and so one of the two will necessarily be left behind.nnne important fact is that the more transactions a block contains (or the more gas a block uses), the longer it will take to propagate through the network. n the itcoin network, one seminal study on this wasnnecker and attenhofer ()nn, which found that the average propagation time of a block was about  seconds plus another . seconds per kilobyte in the block (ie. a   block would take ~ seconds). nnmore recent itcoin nlimited studynnshowed that this has since reduced to ~. seconds per kilobyte due to transaction propagation technology improvements. e can also see that if a block takes longer to propagate, the chance that it will become a stale is higher at a block time of  seconds, a propagation time increase of  second should correspond to an increased / chance of being left behind.nnn thereum, we can make a similar analysis, ecept that thanks to thereum's "uncle" mechanic we have very solid data to analyze from. tale blocks in thereum can be re-included into the chain as "uncles", where they receive up to % of their original block reward. his mechanic was originally introduced to reduce centralization pressures, by reducing the advantage that well-connected miners have over poorly connected miners, but it also has several side benefits, one of which is that stale blocks are tracked for all time in a very easily searchable database - the blockchain itself. e can take a data dump of blocks  to  (before the ep  attacks) as a source of data for analysis.nnere is a script to generate some source datannhttp//github.com/ethereum/research/tree/master/uncle_regressions/block_datadump_generator.pynnere is the source datannhttp//github.com/ethereum/research/tree/master/uncle_regressions/block_datadump.csvnnhe columns, in order, represent block number, number of uncles in the block, the total uncle reward, the total gas consumed by uncles, the number of transactions in the block, the gas consumed by the block, the length of the block in bytes, and the length of the block in bytes ecluding zero bytes.nne can then use this script to analyze itnnhttp//github.com/ethereum/research/tree/master/uncle_regressions/base_regression.pynnhe results are as follows. n general, the uncle rate is consistently around . to ., and the average gas consumed per block is around  to . ecause we have the gas consumed of both blocks and uncles, we run a linear regression to estimate of how much  unit of gas adds to the probability that a given block will be an uncle. he coefficients turn out to be as followsnnlock  to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-
lock k to k .e-nnence, each  million gas worth of transactions that gets included in a block now adds ~.% to the probability that that block will become an uncle, though during rontier this was closer to -%. he "base" (ie. uncle rate of a -gas block) is consistently ~.%. or now, we will leave this result as it is and not make further conclusions there is one further complication that  will discuss later at least with regard to the effect that this finding has on gas limit policy.nnas pricingnnnother issue that touches uncle rates and transaction propagation is gas pricing. n itcoin development discussions, a common argument is that block size limits are unnecessary because miners already have a natural incentive to limit their block sizes, which is that every kilobyte they add increases the stale rate and hence threatens their block reward. iven the  sec per megabyte impedance found by the itcoin nlimited study, and the fact that each second of impedance corresponds to a / chance of losing a .  block reward, this suggests an equilibrium transaction fee of .  per kilobyte assuming no block size limits.nnn itcoin's environment, there are reasons to be long-term skeptical about the economics of such a no-limit incentive model, as there will eventually be no block reward, and when the only thing that miners have to lose from including too many transactions is fees from theirnnothernntransactions, then there is an economic argument that the equilibrium stale rate will bennas high as %nn. owever, there are modifications that can be made to the protocol to limit this coefficient.nnn thereum's current environment, block rewards are   and will stay that way until the algorithm is changed. ccepting  million gas means a .% chance of the block becoming an uncle. ortunately, thereum's uncle mechanism has a happy side effect here the average uncle reward is recently around . , so  million gas only means a .% chance of putting .  at risk, ie. an epected loss of .  and not . as would be the case without an uncle mechanism. ence, the current gas prices of ~ shannon are actually quite close to the "economically rational" gas price of  shannon (this is before the o attacks and the optimizations arising therefrom now it is likely even lower).nnhe simplest way to push the equilibrium gasprice down further is to improve uncle inclusion mechanics and try to get uncles included in blocks as quickly as possible (perhaps by separately propagating every block as a "potential uncle header") at the limit, if every uncle is included as quickly as possible, the equilibrium gas price would go down to about  shannon.nns ata nderpricednn second linear regression analysis can be done with source code herennhttp//github.com/ethereum/research/tree/master/uncle_regressions/t_and_bytes_regression.pynnhe purpose here is to see if,nnafter accounting for the above computed coefficients for gasnn, there is a correlation with the number of transactions or with the size of a block in bytes left over. nfortunately, we do not have block size or transaction count figures for uncles, so we have to resort to a more indirect trick that looks at blocks and uncles in groups of . he gas coefficients that this analysis finds are higher than the previous analysis around . uncle rate per million gas. ne possible eplanation is that if a single block has a high propagation time, and it leads to an uncle, there is a % chance that that uncle is the high-propagation-time block, but there is also a % chance that the uncle will be the other block that it competes against. his theory matches well with the . per million "social uncle rate" and the ~. per million "private uncle rate" finding hence we will take it as the most likely eplanation.nnhe regression finds that, after accounting for this social uncle rate, one byte accounts for an additional ~. uncle rate. ytes in a transaction take up  gas, of whichnn gas accounts fornnits contribution to bandwidth (the remaining  is for bloating the history database). f we want the bandwidth coefficient and the computation coefficient in the gas table to both reflect propagation time, then this implies that if we wanted tonnreallynnoptimize gas costs, we would need to increase the gas cost per byte by  (ie. to ). his would also entail raising the base gas cost of a transaction by  (note such a rebalance would not mean that everything gets more epensive the gas limit would be raised by ~% so that thennaverage-casenntransaction throughput would remain unchanged). n the other hand, the risk of worst-case denial-of-service attacks is worse for eecution than for data, and so eecution requires larger safety factors. ence, there is arguably not sufficiently strong evidence to do any re-pricings here at least for the time being.nnne possible long-term protocol change would be to introduce separate gas pricing mechanisms for in- eecution and transaction data the argument here is that the two are much easier to separate as transaction data can be computed separately from everything else, and so the optimal strategy may be to somehow allow the market to balance them however, precise mechanisms for doing such a thing still need to be developed.nnas imit olicynnor an individual miner determining their gas price, the "private uncle rate" of . per million gas is the relevant statistic. rom the point of view of the whole system, the "social uncle rate" of . per million gas is what matters. f we did not care about safety factors and were ok with an uncle rate of . uncles per block (meaning, a "% attack" would only need % hashpower to succeed, actually not as bad as it sounds) then at least this analysis suggests that the gas limit could theoretically be raised to ~ million ( t/sec given an average k gas per t as is the case under current usage, or  t/sec worth of simple sends). ith the latest optimizations, this could be pushed even higher. owever, since we do care about safety factors and prefer to have a lower uncle rate to alleviate centralization risks, . million is likely an optimal level for the gas limit, though in the medium term a "dynamic gas limit" formula that targets a particular block processing time would be a better approach, as it would be able to quickly and automatically adjust in response to attacks and risks.nnote that the concern about the centralization risks and the need for safety factors do not stack on top of each other. he reason is that during an active denial-of-service attack, the blockchain needs to survive, not be long-term economically centralization-resistant the argument is that if the attacker's goal was to economically encourage centralization, then the attacker could just donate money to the biggest pool in order to bribe other miners to join it.nnn the future, we can epect virtual machine improvements to decrease uncle rates further, though improvements to networking are eventually going to be required as well. here is a limit to how much scalability is possible on a single chain, with the primary bottleneck being disk reads and writes, so after some point (likely - million gas) sharding will be the only way to process more transactions. f we just want to decrease equilibrium gas prices, then asper will help substantially, by making the "slope" of uncle rate to gas consumption near-zero at least up to a certain point.