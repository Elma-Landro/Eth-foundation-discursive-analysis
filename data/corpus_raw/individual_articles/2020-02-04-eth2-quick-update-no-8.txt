Titre: eth2 quick update no. 8\nAuteur: Danny Ryan\nDate: February 4, 2020\nURL: https://blog.ethereum.org/2020/02/04/eth2-quick-update-no-8\nCatégorie: Non catégorisé\n\n==================================================\n\neep it comingnntldrnnudit andnnformal verificationnnof deposit contract bytecode completed bynnuntime erificationnnhe word of the month is "optimization"nnngoing hase  research driven by uilt and e. elcome  to the tablennhiteblocknnreleasesnngossipsub testing resultsnntacked spring! onferences, hackathons, bounties, and morennuntime erification audit and verification of deposit contractnnuntime erification recently completed their audit andnnformal verificationnnof thenneth deposit contractnnbytecode. his is a significant milestone bringing us closer to the eth hase  mainnet. ow that this work is complete,  ask for review and comment by the community. f there are gaps or errors in the formal specification, please post an issue on thenneth specs reponn.nnhe formal semantics specified in thenn rameworknndefine the precise behaviors the  bytecode should eibit and proves that these behaviors hold. hese include input validations, updates to the iterative merkle tree, logs, and more. ake a looknnherennfor a (semi)high-level discussion of what is specified, and dig in deepernnherennfor the full formal  specification.nn want to thank aejun ark (untime erification) for leading the effort, and artin undfall and arl eekhuizen for much feedback and review along the way.nngain, if this stuff is your cup of tea, now is the time to provide input and feedback on the formal verification -- please take a look.nnhe word of the month is "optimization"nnhe past month has been all about optimizations.nnlthough a  optimization here and a  optimization there doesn't feel so tangible to the thereum community today, this phase of development is just as important as any other in getting us to the finish line.nneacon chain optimizations are criticalnn(why can't we just ma out our machines with the beacon chain)nnhe beacon chain -- the core of eth -- is a requisite component for the rest of the sharded system. o sync any shard -- whether it be a single shard or many, a clientnnmustnnsync the beacon chain. hus, to be able to run the beacon chain and a handful of shards on a consumer machine, it is paramount that the beacon chain is relatively low in resource consumption even when high validator participation (~k+ validators).nno this end, much of the effort of eth client teams in the past month has been dedicated to optimizations -- reducing resource requirements of phase , the beacon chain.nn'm pleased to report we're seeing fantastic progress. hat follows isnnnotnncomprehensive, but is insteadnnjust a glimpsennto give you an idea of the work.nnighthouse runs k validators like a breezennighthouse brought down their ~k validator testnet a couple of weeks ago after an attestation gossip relay loop caused the nodes to essentially o themselves. igma rime quickly patched this bug and looked to bigger and better things -- i.e. a k validator testnet! he past two weeks have been dedicated to optimizations to make this real-world scale testnet a reality.nn goal of each progressive ighthouse testnet is to ensure that thousands of validators can easily run on a small  provisioned with   and  of . nitial tests with k validators saw clients use a consistent  of , but after a few days of optimizations aul was able to reduce this to a steady . with some ideas to get it even lower soon. ighthouse also made % gains in the hashing of state which along with  signature verification is proving to be the main computational bottleneck in eth clients.nnhe new ighthouse testnet launch isnnimminentnn. op intonntheir discordnnto follow progressnnrysmatic testnet still chugging and sync massively improvednn couple of weeks ago the current rysm testnetnncelebrated their ,th slotnnwith over k validators validating. oday, the testnet passed slot k and has over k active validators. eeping a public testnet going while at the same time cranking out updates, optimizations, stability patches, etc is quite a feat.nnhere is a ton of tangible progress ongoing in rysm. 've spoken with a number of validators over the past few months and from their perspective, the client continues to markedly improve. ne especially eciting item is improved sync speeds. he rysmatic team optimized their client sync from ~. blocks/second to more than  blocks/second. his greatly improves validator , allowing them to connect and start contributing to the network much faster.nnnother eciting addition to the rysm testnet isnnalethio'snnnew eth node monitor --nnethstats.ionn. his is an opt-in service that allows nodes to aggregate stats in single place. his will allow us to better understand the state of testnets and ultimately eth mainnet.nnon't trust me!nnull it down and try it out for yourselfnn.nnveryone lovesnnproto_arraynnhe core eth spec frequently (knowingly) specifies epected behavior non-optimally. he spec code is instead optimized for readability of intention rather than for performance.nn spec describes correct behavior of a system, while an algorithm is a procedure for eecuting a specified behavior. any different algorithms can faithfully implement the same specification. hus the eth spec allows for a wide variety of different implementations of each component as client teams take into account any number of different tradeoffs (e.g. computational compleity, memory usage, implementation compleity, etc).nnne such eample is thennfork choicenn-- the spec used to find the head of the chain. he eth spec specifies the behavior using a naive algorithm to clearly show the moving parts and edge cases -- e.g. how to update weights when a new attestation comes in, what to do when a new block is finalized, etc.  direct implementation of the spec algorithm would never meet the production needs of eth. nstead, client teams must think more deeply about the computational tradeoffs in the contet of their client operation and implement a more sophisticated algorithm to meet those needs.nnucky for client teams, about  months ago rotolambda implementednna bunch of different fork choice algorithmsnn, documenting the benefits and tradeoffs of each. ecently, aul from igma rime observed a major bottleneck in ighthouse's fork choice algorithm and went shopping for something new. e uncoverednnproto_arraynnin proto's old list.nnt took some work to portnnproto_arraynnto fit the most recent spec, but once integrated,nnproto_arraynnproved "to run in orders of magnitude less time and perform significantly less database reads." fter the initial integration into ighthouse, it was quickly picked up by rysmatic as well and is available in their most recent release. ith this algorithm's clear advantages over alternatives,nnproto_arraynnis quickly becoming a crowd favorite, and  fully epect to see some other teams pick it up soon!nnngoing hase  research -- uilt, e, and now nnhase  of eth is the addition of state and eecution into the sharded eth universe. lthough some core principles are relatively defined (e.g. communication between shards via crosslinks and merkle proofs), the hase  design landscape is still relatively wide open. uilt (onsenys research team) andnnenn( research team) have spent much of their efforts in the past year researching and better defining this wide open design space in parallel to the ongoing work to specify and build hases  and .nno that end, there has been a flurry of recent activity of public calls, discussions, and ethresear.ch posts. here are some great resources to help get the lay of the land. he following is just a small samplennverview on tate rovider odelsnnpen uestions wrt tate rovidersnnoving  between shards the problem statementnnetted balance maps for cross-shard transfersnnand eplainer for italik'snnmeta-eecution environment for nn]nniscussion of fee markets for hase  shard datannn addition to uilt and e, the newly formednnnn(onsenys research team) are dedicating a portion of their efforts toward hase  research as well, initially focusing on better understanding cross-shard transaction compleity as well as researching and prototyping possible paths for the integration of eth into eth.nnll of the hase  & is a relatively green field. here is a huge opportunity here to dig deep and make an impact. hroughout this year, epect more concrete specifications as well as developer playgrounds to sink your teeth into.nnhiteblock releases libpp gossipsub test resultsnnhis week,nnhiteblocknnreleased libppnngossipsub testing resultsnnas the culmination of a grant co-funded bynnonsenysnnand the thereum oundation. his work aims to validate the gossipsub algorithm for the uses of eth and to provide insight into the boundaries of performance to aid followup tests and algorithmic enhancements.nnhe tldr is that the results of this wave of testing look solid, but further tests should be performed to better observe how message propogation scales with network size. heck out thennfull reportnndetailing their methodology, topology, eperiments, and results!nntacked pring!nnhis pring is stacked with eciting conferences, hackathons, eth bounties, and more! here will be a group of eth researchers and engineers at each of these events. lease come chat! e'd love to talk to you about engineering progress, validating on testnets, what to epect this year, and anything else that might be on your mind.nnow is a great time to get involved! any clients are in the testnet phase so there are all sorts of tools to build, eperiments to run, and fun to be had.nnere is a glimpse of the many events slated to have solid eth representationnnenvernn-- enver,  - eb  to eb  -- with eth specific bounties!nntanford lockchain onferencenn-- tanford,  - eb  to eb nnth nn-- tanford,  - eb nnondonnn-- ondon,  - eb  to arch nnnn-- aris, rance - arch  to arch nnnn-- ienna, ustria - pril  to pril nnthereal ummitnn-- ew ork,  - ay  to ay nneworknn-- ew ork,  - ates nn🚀