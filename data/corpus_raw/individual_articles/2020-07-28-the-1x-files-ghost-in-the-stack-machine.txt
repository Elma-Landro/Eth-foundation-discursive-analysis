Titre: The 1.x Files: GHOST in the Stack Machine\nAuteur: Griffin Ichiba Hotchkiss\nDate: July 28, 2020\nURL: https://blog.ethereum.org/2020/07/28/the-1x-files-ghost-in-the-stack-machine\nCatégorie: Non catégorisé\n\n==================================================\n\nthereum can be simple enough to understand from a bird's-eye view ecentralized applications powered by the same sort of crypto-economic guarantees that underpin itcoin. ut once you've zoomed in to, say, a street-level view, things get complicated rapidly.nnven assuming one has a strong grasp onnnproof-of-worknn, it's not immediately clear how that translates to a blockchain doing more than keeping track of everyone's unspent transaction outputs. itcoin uses computational work to decentralizennmoneynn. thereum uses computational work to decentralize abstractnncomputationnn. ut hat abstraction is called thennthereum irtual achinenn, and it's the centerpiece of the thereum protocol, because "inside" the  is the special domain of smart contracts, and it's the smart contracts that are ultimately to blame for all those ridiculous #defi tweets.nnpgrading the  is one of the major milestones of thenntateless thereum ech reenn, and before we can dig in to the interesting work there,  think it's prudent to first tackle the obvious questionnn" is the "nn. n the first of this two-part series, we'll get back to basics and try to understand the  from the ground up, so that later we can really engage with current discussion about things like ode erklization and — even stuff from the eciting world of th like ecution nvironments!nn is the nnhen first year lgebra students get taught about that familiar functionnnf()nn, an analogy of "the function machine" is often used. he concept of deterministic input/output, it seems, is a lot easier for kids to think about as a literal physical machine chugging along.  like this analogy because it cuts both ways he , which in a way actuallynnisnna literal machine chugging along, can be thought about as annfunctionnnwhich accepts as inputs some state and outputs a new one based on some arbitrary set of rules.nnetting aside the specifics of those rules for now, say that the only valid state transitions are the ones that come from validnntransactionsnn(that follow the rules). he abstract machine that will determine a new state (nn'nn) given an old valid state (nnnn) and a new set of valid transactions (nnnn) is the thereum state transition functionnn(, ) 'nnhe first thing that's very important to understand about this function is that, as an abstraction, it's sort of a mathematical placeholder arguably not a real thing, and definitely notnnthenn. he thereum state transition function is written all fancy in reek in the yellow paper because thinking about the  as a black bo function really helps with imagining the whole blockchain system (of which the  is just one part). he two-way connection between functions and machines isnndeterminismnn iven any valid input, both should produce one and only one output.nnut the , as  said before,nnisnnin some sense a literal machine chugging along out there in the world. he 's physical instantiation can't be described in the same way that one might point to a cloud or an ocean wave, but it does eist inside thousands of connected computers running thereum clients. nd at any given time, there isnnone and only one canonical thereum statenn, and that's what we care about. ll of the other components inside an thereum client are there just to keep consensus over which state is the right one.nnhe term 'canonical' is used because 'valid' isn't quite appropriate a state transition computed correctly is 'valid', but it still might not end up "on chain" as part of the canon. eciding which states are canonical and which states are not is the sole responsibility of miners doing proof-of-work on the chain. nyone using thereum mainnet has, either literally or just figuratively, "bought in" to onennparticularnnstate history, namely the one with the most computational work put behind it, as determined by thereum's reedy eaviest bserved ubtree () protocol. long with each new block on the network comes a new set of transactions, a state transition, and a freshly determined output state ready to be passed forward into the net canonical block, determined by miners. nd so on and so forth that is how the thereum blockchain do.nne've so far 'black-boed' the  as the state transition function (machine) that takes previous valid blocks and a handful of fresh transactions (as input), does some computation on it, and spits out a new valid state (as output). he other pieces of the thereum protocol (such as miners choosing canonical blocks) are necessary contet, but now it's time for some inside-the-bo thinking. hat about those specific rules we set aside earliernnownndoes the  compute a new state ow can a single machine compute everything from simple balance transfers to elliptic curve algebrannhe teampunk tack achinennhe best  can do to introduce the notion of a stack machine is this cartoon image of abbage's nalytical ngine (creditnnydney aduann), which was designed in  but never builtnnith most people carrying around fantastically powerful electric computers in their pockets these days, it's easy to forget that computers don't necessarily need to be electronic, nor all that powerful. abbage's nalytical ngine is a very (hypothetically) real eample of a uring-complete (!) computer that if it had been built, would've run on steam and punch cards. he  is in important ways much closer kin to the nalytical ngine of two centuries ago than to the  inside the device you're using to read this article.nnhe  is annstack machinenn, and although in reality it's annvirtualized machinennrunning inside many thereum clients simultaneously,  find helpful to imagine the  as a real, more advanced (but of course still steam-powered) version of the nalytical ngine. his metaphor might seem a little far-fetched, but  implore you to stick with it for a little bit because it's quite illustrative when we get to the subject of gas and a shared eecution environment.nnhe steampunk  would be a mechanical computer that functions by manipulating physical punch cards. ach card would have  places for hole punches, and therefore each card could represent any number between  and ^. o perform a calculation, one could imagine this computer, through some fancy system of compressed air, putting the cards representing numbers and operations into annstacknn, and following a simple principle of "first in, last out", one-by-one it would  new cards to the top of the stack, or  cards from the top of the stack to read them for net steps. hese might be new numbers to calculate with, or arithmetic operations like  or , but they could also be special instructions such as to  a card or set of cards for later. ecause the cards are simple binary, the operations also have to be 'encoded' into a binary number so we call them operational codes, or just opcodes for short.nnf the stack machine were calculatingnn *  + nn, it would go about it like sonn_ value  from the stack, keep it in memory.  the value  off the stack, keep it in memory.  the value _ from the stack send everything in memory to the multiplication module  the returned result () the stack.  the value  from the stack keep it in memory.  the value  from the stack keep it in memory.  the value + from the stack send everything in memory to the addition module  the returned result () the stack. (ourcennhe  untime nvironmentnn)nne can imagine opcodes like  or  as special modules built into the machine, near enough to the stack so as to be accessible quickly. hen the computer must multiply  and , it would send both cards to the "multiplication engine", which might click and hiss before spitting back out the number  punched into a new card to  back to the top of the stack.nnhe "real"  hasnnmany different opcodesnnfor doing various things.  certain minimum-viable set of these opcodes are needed to donngeneralized computationnn, and the  has all of them (along with some special ones for crypto, e.g.nnthe - hash functionnn). or better or worse, the idea that the  is (or is not)nnuring-completennhas long been under discussion— it's this stack-based architecture which has the property of uring-completeness he 's rules of eecution can in principle, given a long enough time and big enough memory, runnnany conceivable computer programnnso long as it's compiled down to the correct -bit words and eecuted in the stack.nnompiling a program in our alternate universe would entail the creation of a booklet of punch cards containing the appropriate data and opcodes. his is literally (er, figurative-literally, whatever) the process going on under the hood when you write a smart contract in a high-level language like olidity and compile it to bytecode. ou can get a pretty good sense of how a programming language gets converted into machine code bynnreading this humerously annotated output of a olidity compilernn.nno far, thennstatennhas not been mentioned, but recall that we set out to understand the rules by which annstate transitionnncan be calculated. ow we can summarize it a bit more clearly he  is the physical instantiation (read instance) of the state transition function.  valid state in thereum is one that was calculated by the , and the canonical state is the valid state with the most computational work done on it (as determined by the  protocol).nn(deal) asnne might imagine abbage completing the fictitious thereum tack ngine and thereafter announcing that all mathematical tabulations and solutions for impossibly difficult problems were now within reach. e'd invite mathematicians and engineers to package up their problems as 'transactions' and deliver them to be compiled bynnady ovelacenninto punch cards to run through the world computer. (ncidentally, ovelace was the first person to ever write a computer program, making her thennoriginalnncompiler). ince the machine is meant to be an implementation of the  and part of a larger thereum steampunk universe, we'd have to imagine the state as being some sort of massive erkleized library catalog which would be updated once per day according to a pre-selected set and order of transactions chosen as 'canonical', and committed to archive.nnhe trouble with this vision is that a real, mechanical  would be etraordinarily epensive to run. he turning of gears, winding of springs, and pumping of various pneumatic chambers collating punch cards would use tonnes of coal every day. ho would bear the epense of running the engine constantly ay that five mathematicians wanted to run their programs on a particular day, but there was only time enough for three. ow would these and related problems of resource management be solved he solution that thereum employs seems, paradoically, a lot more intuitive when we think about a large and inefficient mechanical computer hargennmoneynnfor computation and memory storage!nnmagining the the operations of the stack machine to be powered by compressed air, one could measure thenneact amount of gasnnneeded to perform an  operation, and compare it to the (much larger) amount of gas needed for . he table of gas costs for each opcode could be made publicly available, and anyone submitting a program required to provide at least enough money for their computation and storage space according to the cost of gas (which might be related to the price of coal or the demand for computation). he final stroke of genius is to make the machine state itself a ledger for accounts and balances, allowing a user to include payment for their computation inside the transaction itself.nns you might know,nngasnnin an thereum transaction accounts for computation and memory costs of the . as costs for a transaction must be paid for in , and cannot be recovered once the eecution takes place, whether the operation succeeds or not. f a contract call runs out of gas at any point during an operation, it throws an out-of-gas error.nnhenngasnnmechanic cleverly does two jobs as efficiently allocates the common-pool computational resources of the  according to demand, and provides reasonable protection against infinitely looping programs (a problem that arises from uring-completeness).nnn the net installment of "he . iles"nn hope this fanciful mechanical eplanation of a stack machine has been helpful. f you enjoyed thinking about the steampunk  as much as  have, and you like historically plausible alt-reality comic books, do investigate "he hrilling dventures of abbage and ovelace" linked earlier you won't be disappointed.nnetting a handle on something so abstract isn't easy, but there are topics in the tateless ech ree that will be much easier to approach with a relatively complete (even if it's a bit cartoonish) mental image of an  implementation.nnne such topic is the introduction ofnnode erkleizationnnto the , which would greatly reduce the size of witnesses by breaking up compiled contract code into smaller chunks. et time we'll be able to dig in to these immediately.nns always, if you have any questions, comments, requests for new topics or steampunk thereum fanfictions, please gichiba or ancock on twitter.