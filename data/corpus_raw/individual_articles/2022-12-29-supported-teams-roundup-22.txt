Titre: EF-Supported Teams: Research & Development Roundup\nAuteur: Ethereum Foundation Team\nDate: Team on December 29, 2022\nURL: https://blog.ethereum.org/2022/12/29/supported-teams-roundup-22\nCat√©gorie: Non cat√©goris√©\n\n==================================================\n\nriends,nns the year of the erge ends, we wanted to share updates from many of the thereum gardeners and -supported teams that achieved long sought accomplishments, both big and small, alongside the rest of the ecosystem in . e all have a lot to be thankful for, from the new communities we've come to know, to having each other through it all!nns always, this roundup series focuses on -supported teams whose members are working to grow and improve thereum as a whole. ncluded in this edition are updates from many teams highlighted innnthe previous reportnn, and other new and rotating groups.nnnjoy!nnonsensus & (aka  esearch eam)nnuthored by anny yan and siao-ei angnnhis was an etraordinary year. ith the magic of client teams, evps wizards, testers, stakers, and the community at large, we successfullynnmergednn‚úåÔ∏èüêº!nn  nnfor contributing to he erge, massively reducing energy consumption, and making thereum a more secure and sustainable protocol. witching thereum mainnet consensus mechanism to roof-of-take (o) was a significant milestone the onsensus & team has been working on for many years -- but this is not the full story!nndditionally, the onsensus & team has been tackling emergent problems in the  domain (e.g. proposer builder separation (),  smoothing/burning), pondering security improvements to the beacon chain (e.g. single slot finality (), single secret leader election ()), and a whole host of other consensus research ‚Äì multi-dimensional -, better aggregation techniques, optimized applied cryptography, and more.nnet year, our team will continue working on, but not limited to, the followingnncheduled and tentative protocol upgradesnnithdrawals functionality this feature will enable stakers to withdraw their balances from the beacon chain to their eecution layer accounts. hennconsensus-layer core specsnnare nearing completion, and client teams are actively implementing and testing the functionality.nn- aka proto-dankshardingnnontinued refinement of thenn- consensus-layer specsnn. t the same time, we are collaborating with developer teams on the + clients interop and devnets.nno usenn polynomial commitmentsnnin -, we need to generate the "trusted setups" via  eremony with public participants. ou can find more progress updates in the recentnn eremony rant ound f blog postnn.nnther post-merge research topics, e.g., proposer/builder separation (), erkle trie/statelessness, single slot finality (), data availability sampling (), fee market refinement, single secret leader election (), and more.nnryptography esearchnnuthored by ankrad eistnnhe cryptography team has taken an initiative to make thereum secure against quantum computers. ur team members have contributed to a post-quantum signature scheme that is to be standardized by  (ational nstitute of tandards and echnology). e continue to work in this direction and build a signature scheme that scales better via aggregations. urther down the road, we may improve the scalability via better aggregation techniques, or via different hardness assumptions.nne-langnnuthored by rant uerkernnhe e team aims to provide the thereum community with a safe and effective smart contract programming language. he team is responsible for the design ofnne-langnnand the development of its core components, including the compiler, standard library, and tooling.nnver the past year, the team has been focused on adding language features and preparing for our first beta release. elow are the highlights from nnotable language featuresnnow-level intrinsic functions (..).nnested structs in memory (..).nntd library withnnevmnnandnncontetnnmodules (..).nnested structs in storage (..).nnconstnnfolding (..).nnunction argument labels (..).nnested structs can be returned and passed into functions (..).nnraces! (..).nnraits and generic function parameters (..).nnnums andnnmatchnnstatements (..).nnmutnnkeyword (..).nnlease see thennreleases pagennfor a complete list of changes.nnoolingnnzjhmalenndeveloped a ardhat plugin.nn couple contributors developed  ode pluginsnnvuvoth'snnzjhmale'snnommunitynnosted e ay,nnpresented at olidity ummitnn, and sat in on annlanguages panel at ecureum rustnnin msterdam for evconnect .nnarticipated in the anguage ug of ar panel in ogot√° for evcon .nnaunchednnountifulnnand gotnnhacked by plotchynn.nneceived contributions from a total ofnn contributorsnn.nnthernnoshi has been working on a compiler backend specialized for smart contracts namednnonatinann.nn fewnnsimple contractsnnwere verified usingnnnn.nnur top priorities moving into  are first beta release (seenne's path to productionnn), better generic support, better constant support, and improvements to the standard library. e are especially ecited about futurennountifulnnchallenges.nnormal erificationnnuthored by  teamnnhevmnne‚Äôve spent most of this year rewriting the symbolic eecution engine in hevm. his rewrite decompiles  into a custom intermediate representation and then issues  queries based on the structure of the terms in this . his architecture gives us significantly more control over the details of the  encoding and makes the implementation of custom simplification and static analysis stages much easier.nnheckernnn the past months we focused on bug fiing and  improvements. ne important new feature that was added is the possibility to use the orn solver ldarica when using the  or  interface from solc.nnoolsnn few months ago we started ools as a proof of concept, testing the idea that verifying ul instead of both olidity and  bytecode has a lot of advantages. he preliminary results are quite promising, and we‚Äôre ecited to continue working on it in .nnolyolver, a solver for generalized polynomialsnne started this research branch with the goal of verifying properties of polynomials from  apps/circuits. e recently started applying it to  circuits in collaboration with  and other organizations.nnethnnuthored by √©ter zil√°gyinn was a tad slower year when it came to shipping eth features, but that is primarily due to the thereum erge, which took up most of the team's time for testing, tweaking and generally making sure everything ticks. hat said, we do have a number of interesting things we've been working on in between.nnath-based trie storagennerhaps the highlight upcoming feature - at least for us as maintainers - is ary's path-based trie storage. e figured out (a few years back) how to do state pruning, but needed to get rid of one blocker fast sync. hat meant shipping a new sync protocol (snap) not only for eth, but also helping other clients get it out the door. ith fast sync murdered, we can finally change the state-trie storage model in eth from hash keys to path keys. hilst this is an insanely invasive change in eth, it will finally allow us to do full, real-time historical state pruning during block processing. he cherry on top is that full sync actually gets faster. )nnnn small teaser from a while backnn.nnight clientsnnne victim of he erge was light clients. reviously, they only needed to follow the chain of headers, check the o, and download erkle proofs to access the thereum state. n a post-merge world, however, o is gone, and thus light clients cannot rely on eecution layer headers alone to follow the chain. he only viable solution is to follow the beacon chain headers, at least some parts of it. solt has been working full-time on reproducing the bare minimum beacon data structures in eth and eposing them in the  protocol to make light clients workable again. his also requires collaborating with consensus client teams to have access to the needed data in the first place, so it takes a while. he upside is, however, that this work might not only fi light clients, but also enable full (but non-block-producing) nodes to follow the chain without a consensus client attached! ouldn't that be amazing, to only babysit one program again!nnhanghainne're barely past the merge, but protocol dev never stops. he hanghai hard fork is already semi-scheduled (eact contents still a bit debated), and att has been working tirelessly on the two main features withdrawals and thereum bject ormat. he former is already being deployed on cross client testnets. ithdrawals will finally complete he erge, enabling staked ether and accumulated rewards to be collected, while the  work will enable a cleaner internal organization of smart contracts, simplifying compiler work and also enabling a few more advanced features to be implemented. fter the year's #estingheerge, arius is currently helping in a similar role getting hanghai ready and out faster and better.nnlob transactionsnnossibly delayed until the ancun hard fork, but already in full development is the support for blob transactions (aka ), which would allow the thereum network to create huge transactions ( a pop) that only have an ephemeral lifespan (- weeks). he purpose of these transactions would be to allow layer  solutions to commit to and prove large batches of data very cheaply, without incurring an indefinite storage cost on all full nodes. his should make s significantly cheaper and thus allow thereum to - hopefully - onboard the net stream of users. his work has been pioneered by oinbase's essie and team and is currently being picked up by eter to integrate where possible and reimplement where eth's o requirements require a different approach from the original o work.nnerkle treesnnooking even further out, uillaume has been working on replacing thereum's erkle trees with erkle trees. his could end up being the most invasive change ever done to the thereum eecution layer, with implications across pretty much every aspect of the network. he advantage of erkle trees would be greatly simplified state proofs, which might just enable stateless clients. his year, he put together a functional o, originally running in a o testnet and currently a o testnet. or now, performance-wise, there's still work to be done as it's about . slower than erkle trees, but we'll get there.  lot of research and development is being done trying to figure out how to do the transition from erkle to erkle without pausing the entire network (converting the data structures takes over a week currently).nno-leveldbnnver the years we've had our ups and downs with using go-leveldb as our storage engine. e're forever grateful to uryandaru riandana for creating it and helping us out now and again! owever, the project being unmaintained for many years now left us without a viable upgrade path we couldn't get our optimizations in and some upstream changes even introduced o vectors, unfied to this very day. e've tried out many alternative databases (ocks, olt, adger, ostgres) and converged on ebble, a relatively new - but actively maintained - port of ocks in o. ared is currently pioneering the integration works - which primarily consists of getting that one or two missing features that we rely on accepted in the upstream ebble projects. witching out evel to ebble, we don't epect performance to change, just for us to sleep better at night .nnuilt-in transaction tracersnnerhaps not the most visible feature, but we've worked a lot on tweaking and etending eth's built-in transaction tracers - which, if you missed the memo - now all run natively in o and are quite speedy. ina's been the primary contributor on this front, also making some of the tracers configurable.  large feature we've been planning and are currently working on is live-tracing, which would allow eth to be started with some tracers eplicitly requested on startup, which would run along with normal block processing, storing the tracing results on disk. his should allow users relying on traces to not have to have the brittle  block window to quickly trace something before the state is pruned.nnocs & ebsitennerhaps as surprising to you as to us (  ), this year we've started putting some effort into getting our online docs in a somewhat better shape. houtout to oseph for going through our hot mess of pages and trying to make heads or tails of them. ithin the same effort - with full thanks to thennethereum.orgnnteam - we've also been working on a new website for eth. on't epect all of a sudden to have more - or different kinds of - information published, so our new website will mostly follow the old architecture, but should be a welcome refresher compared to the stock bootstrap template we threw together ages ago just to have a downloads page. ontributions are welcome!nnaand, that's a wrap )nnavascript eamnnuthored by olger rewesnnhennthereumnnlibraries date back to as early asnnnnand represent a continued effort to both modernize and keep an uncluttered code base. n , we did a big round ofnnbreaking releasesnnnnntroducing native avacript ignt supportnnaking larger structural changes such as etracting a "pure"  from the historically grown  package code, and also‚Ä¶nnreparing the libraries for the erge.nnor , there is a lot around the corner. e are actively working on annnimplementation of sharding (to be precise - "hard lob ransactions")nn, we‚Äôve merged - "eacon hain ithdrawals"nncodenn, and plan to complete the  thereum bject ormat () s that are being considered for mainnet by building on top of the initialnn- implementationnn, enabling us to join an early -focused testnet (likely in anuary ).nnur thereum (eecution) client continues to mature. e recommend listening to thennan podcast episodennin which our team member ajinder talks about how our client went through the erge and a potential future light client.nnhe client is now able to serve a full thereum testnet along with annodestarnnconsensus client instance. hese efforts have culminated in the launch of an early re-hanghai testnet callednnhandongnnlater in the year, which activated various s being considered for hanghai and was well perceived by the community and other client teams.nne will build upon these eperiences and launch a continued series of dedicated "ommunity estnets" throughout  which will be -independent and iterate quickly with early  integrations and a strong focus on (dev) community needs. tay tuned for an announcement here!nnnnnltralightnn, our ortal etwork implementation has significantly improved throughout , and we have now started working on os that use an thers provider, swapping out the classic rd party  provider (e.g. nfura) and already successfully serving (parts of) the   calls in a purely decentralized fashion by using a distributed ortal etwork (!!). ontinued results are promising, but we still need to collect more data on "soft" factors such as performance, scalability, and network resilience. here also are networking questions being addressed regarding a pure browser usage of the developed solution.nnnd, regardingnnthersnn thers v is just around the corner. tay tuned for an announcement in the coming weeks! ü§© ou can catch up on what will be included by watching thisnnouube evcon talknnfrom ichard.nnpsilon (ecution nvironment research)nnuthored by le eregszaszinnast year we finally launched ournn"website"nn, where most of our work can be observed. his year we were alsonnactive on witternn.nnsnnhis has been the "ear of s" for psilon. e have worked on and published a large number of them. n order of maturitynn and nitcode meteringnn- nn(nnproviding a nice gas improvementnn) andnn- nitcode meteringnn(nnreducing o risksnn) are accepted for thennhanghainnupgrade.nnnnhe group of s called  bject ormat (). his includesnn-nn,nn-nn,nn-nn,nn-nnandnn-nn. he work on  started early  and the steps were split, because initially we did not anticipate to launch them together. oday this group, colloquially called "big ", is considered for inclusion innnhanghainn(ornnancunnn).nnwitter had a number of good threads (nnnnnnnn) about , its features and benefits to the ecosystem. o name a fewnnarge gas savings with the reworked control flow system (static jumps provided bynnnnandnnnn).nnseful new instructions, such asnnnnto efficiently handle switch/jump-tables.nntructured contracts (separation of various code sections and data) makes analysis (both automated and manual) easier, and thus can reduce security risks.nnhis structure also allows for validation of contracts at deployment time, which reduces runtime overhead and risks.nnhe format is etensible and allows introduction of features, which were not possible until now (an eample is - and evmma).nnhe current work can be followed on thenn hecklistnnpage.nnnlimited /nnonnected to  isnn-nnintroducing long awaited swaps and dups accessing greater stack depth -- this could remove those feared "tack too deep" errors olidity is outputting. his change is proposed for ancun.nnthersnnesides these we worked on a number of other proposalsnn-nn(in collaboration with olidity) introduces annnninstruction, which would significantly reduce the cost of fied point math, a cornerstone of many (ei) applications.nn-nn(in collaboration with yper) introduces annnninstruction, which can provide cheap memory copying at a - reduction in cost compared to today. his also "deprecates" thennidentity precompilenn.nn-nnis our (not very well developed) attempt to solve the "nnnn-problem".nnevmma (in collaboration with geth), the continuation of thennevm projectnn, introduces a small number of instructions, which can be used as building blocks to replace several current and future proposed "precompiles".nnhese are not yet proposed for any upgrade, but perhaps some could make it into ancun.nnevmone and fizzynnn the software front,nn ..nnandnnevmone ..nnwere released, which supportnnaris (erge)nnand among other changes rearchitect gas accounting of refunds. hese releases are used by ilkworm and by olidity's testing infrastructure. ccompanying, annnumbernnofnnreleasesnnof int were made, mostly to improve speed of arithmetic operations in evmone.nne have also made a long delayed release ofnnizzy v..nn, which contains the majority of planned features. his includes built-in runtime metering. he work is paused on izzy, for now.nnortalnnuthored by iper erriamnnhe ortal etwork is a multi team project being led by iper erriam that aims to deliver lightweight protocol access for the thereum network. ortal etwork is a new set of distributed peer-to-peer storage networks that are designed for verifiable storage and retrieval of all of the data that makes up the eecution chain and which is required for interacting with the thereum network.nnhe ortal team has been working all year onnntrinnnour client for the ortal etwork. he ortal etwork project as a whole has been quietly working towards building out this entirely new special purpose storage network and is on track to deliver the first version of this new protocol to the thereum community during . e are currently focused on delivering the ‚Äúistory‚Äù protocol which will provide access to all of the block headers and bodies from the history of the thereum eecution chain. ll of the three independent client implementations have matured this year to fully implement the base functionality needed to launch healthy live networks.nnn the last month, we deployed our first version of ‚Äúortal ive‚Äù, a ‚Äúblack bo‚Äù testing tool that verifies the different client implementations are all compliant with the protocol specifications. e also deployed the first iteration of ‚Äúglados‚Äù, our network health monitoring tool which actively audits the network to check the availability of content. hese are big milestones for the project, marking the point where we transition into having live networks with real data.nnhe net few months will see the history network coming online with more and more of the historical data becoming available for retrieval. ur net focus will be on implementing the eacon chain light protocol and serving the corresponding data. ollowing that will be the thereum tate data, the canonical transaction inde, and the transaction gossip network.nnrivacy & caling plorationsnnuthored by  eamnnhe  team has been hard at work on an ever-epanding list of projects this year. elow is a sample of what  team members have been working on - you can find a more complete list of ongoing projects atnnappliedzkp.orgnn.nne‚Äôve been fascinated with the possibilities of privacy-preserving social applications enabled by a decentralized ecosystem of composable infrastructure. e‚Äôve built and eperimented with tools such asnnemaphorennfor creatingnnanonymous identitiesnnto interact within customized groups.nnnirepnnfor private non-repudiable reputation.nnnterepnn,nn-hatnnfor private communication,nnnnfor anonymous spam protection.nnrypt-eepernnfor  identity management and proof generation.
roof of concept applications likennkitternnandnnniep ocialnnhave let us bring these eperiments to life and see how people interact in environments that feel familiar, but operate in fundamentally different ways.nnn the scaling front, we‚Äôre eploring how succinct proofs can offer improved efficiency in a variety of areas, from gas costs to throughput and even validating thereum itselfnnalletnnprovides components for an  smart contract wallet with  signatures and aggregated transactions for reduced gas costs.nnkoprunncombines using zk-s and optimistic rollups for low-cost private transactions on .nnhennzk ommunity ditionnnisnnone of many zk effortsnnputting zk-s to work to make verifying  transactions easier and cheaper.nne‚Äôve also broken new ground in anonymous voting and ublic oods funding. e supported several teams adopting  (inimal nti-ollusion nfrastructure) for customized quadratic voting and quadratic funding rounds. hanks to help from teams from , evcon, coev, and more, we‚Äôve supported local leaders in the thereum community adopting zk]uadratic unding around the world each iteration was an opportunity to improve the tools and process, with the goal being more grassroots, privacy-first, quadratic funding operators that create value for their community.nnany team members showcased their work atnnevcon  in ogot√°nn. ver a dozen  projectsnnpresentednn, as well as an all-team effort to organize the emporary nonymous one community hub, with an accompanying demo app where attendees interact anonymously as part of a evcon nnemaphore groupnn.nn is a growing community and we invite contributors and eperimenters of all kinds! ou can follow us onnnwitternnandnnirrornn, or join ournniscordnnto get involved.nnrotocol upportnnuthored by im eikonnhe erge was,nnby farnn, the most important thing for rotocol upport to get right in . he team helped with coordination, community awareness and a long list of miscellaneous tasks, from launchingnnbordel.wtfnnto publishing thennerge anualnn. n eptember th, we celebrated thereum‚Äôs successful transition to proof-of-stake!  few weeks later, we highlighted the work of merge contributors bynnsigning them a songnnat evcon.nnince then, we‚Äôve been working on both hanghai/apella, which is focused on eacon hain withdrawals, as well as the net upgrade, centered around -, a.k.a. protodanksharding. his should keep us busy for at least the first half of . he two first things you can epect are devnets (and tutorials!) for eacon hain withdrawals, and the launch of the  eremony,nnfor which we just announced a grants roundnn! or more on these protocol upgrades, see the latestnnlloreevs updatenn.nneyond upgrades, the team focused on two other major initiatives in . he first was launchingnnrotocol uildnn. he guild, whose design wasnnbirthed in a tweetnn, is a collective of over  thereum  maintainers to which s and individuals can donate as a way of supporting the protocol. nlike typical grants, focused on organizations, funds sent to  are routed to individual contributors directly. o test the idea, a one year pilot was launched in ay. i months in,  hasnnpublished a mid-pilot updatenn, as well as its plans for . pect a new, governance-minimized version of , deployed to both  & s, with a much longer vesting period.nnhe second big initiative  undertook was (re)launching thennthereum rotocol ellowshipnn(f.k.a. ore ev pprenticeship rogram, or ).  provides participants with stipends and mentorship to allow them to dive deep in the ‚Äúcore dev‚Äù rabbit hole with the goal of onboarding proficient contributors to client and research teams. his third cohort has over  participants, including a handful that participate permissionless-ly, working on various projects including , light clients, account abstraction and sharding. nce it wraps up, around enver, we‚Äôll take time to reflect on how it went and how it can be improved. e epect to run another cohort that will begin over the summer.nnast but not least, contributors to thennthereum ecution ayer pecificationnn, a.k.a. , have recently joined the  team. he work on  will provide thereum‚Äôs  with a more accessible spec, from which it‚Äôs easy to generate test vectors. t‚Äôs also a significant step in aligning how changes are specified across the eecution and consensus layer, given the latter already has annsimilar specnn. f you were thinking of writing an , it‚Äôs worth giving  a look as well ‚Äî it might be easier to use a ython diff than reimplementing a large chunk of thereum in markdown pseudocode!nneminnuthored by ob tupay and ann evreaunn pdatesnne began the year at v.. and have just released v... or all the details about what has been updated on the  please check our end of yearnnarticlenn.nnrocessnnhe emi team has been integrating ser entered esign methodologies into our workflow. e‚Äôve sought user feedback through our ‚Äúsk emi nything‚Äù calls, individual user interviews, from our support channels and through social media outreach. e‚Äôve also incorporated beta testers into our release process. hese new channels of feedback have been very helpful.nnogfoodingnne dogfooded the  on a few projects. t enver wennhackednna token-curated, upgradable playlist and song minting dpp for ocky ountain ublic edia. hen we developednnemi ewardsnn, an ongoing program to reward emi contributors, beta testers, and  research participants with  badges. inally, we creatednnemi hallengesnn, quizzes that use  proofs. e then began using the emi hallenge quizzes in our workshops they make an ecellent demo project for introducing emi‚Äôs capabilities. hrough using emi in all of these demo projects, we were able to find some areas where we could improve the tool and then‚Ä¶ we did.nnorkshops & alksnnhroughout , emi team members gave workshops and talks at enver, evconnect, olidity ummit, uala umpur thereum eetup, th, marton, hafari, evcon (one of which was in panish), ietnam, and ndia.nn preview of nnere are some highlights from our  oadmapnnmproving emi‚Äôs performance with a slow internet connectionnnmproving emi‚Äôs overall performancennemi for ‚Äúlow code‚Äù use casesnndding new features and building requested featuresnniving more workshopsnnobust ncentives roupnnuthored by arnab√© onnotnnhis year, our team participated in multiple conversations on the economics of thereum with industry partners as well as academic grantees and collaborators. e organizednnconomicsnnin pril during evconnect, a gathering of industry researchers and academics who discussed all facets of protocol economics for the thereum base layer and rollups. n ecember, we co-organized the firstnnolumbia ryptoeconomics orkshopnn. e also recently releasednn pen roblemsnn, an initiative to decentralize our research process.nnmong other works and talks listed on ournnhomepagenn, here are other topics that kept us busy this yearnn consensus and economicsnnonversations continued around thennhree attacks on thereum roof-of-takennpaper and consensus changes. ee also the talk at evcon onnnime in thereumnn, by aspar.nnroposer-uilder eparationnneenna state-of-research postnnandnntalk at evconnn, by arnab√©.nnacroeconomicsnnngoing research into discouragement attacks, issuance policy and circulating supply, seenntalk at evconnectnnby nders.nnollup economicsnneenna first-principles postnnandnna talk at thnn, by arnab√©. ind also more aboutnnblockspace derivativesnn, by ulian.nnispute protocolsnneenna postnnon a type-theoretic approach to disputes, by ebastien.nnnake harmers ython cosystem]nnuthored by eri lowesnnn , we made many eciting changes across our libraries. e released our first beta versions of web.py v, which opened the door for many long-awaited breaking changes throughout our stack. hose breaking changes includednntreamlining the eth-abi nnropping support for deprecated ython versions (. and .)nneprecating camelase synta in favor of snake_case (and lots more)nnf particular note, robust asynchronous support is now available via the syncrovider.  full list of changes to web.py can be found on thennrelease notesnnpage of the documentation.nnhe middle of the year brought us he erge and so eth-tester, web.py, and py- all got updates to support the aris hard fork. dditionally, we shipped some new features to our  module, including support for - and the ross-hain nteroperability rotocol.nne‚Äôve also been focused on making web.py as etensible as possible, so we added s for custom modules and methods. his enables users to easily handle non-standard - methods, or even add a full  . e‚Äôve also spent time modernizing our libraries this year, including adding support for ython . and ., and modernizing our release processes.nne put an emphasis on developer relations this year, as arc continues to prioritize educational content mainly focused on web.py patterns and internals, geared at a wide range of developer abilities. hese blog posts at snakecharmers.ethereum.org.nne also spoke atnnevcon nnand at the inauguralnnychain conferencenn.nne launched a developer survey to gain insight into the types of users that we have, and the ways in which they use web.py and our supporting libraries. articipate in the surveynnherenn.nnn , our team plans tonnefine the asynchronous providers in web.py, and release a stable web.py v.nnmplement changes to our stack of libraries to support the hanghai and other network upgrades that follow in , including changes to clients and smart contract languages.nnntegrate the user feedback gained from the survey and other feedback channels into our roadmap.nnontinue to prioritize users by producing educational blog posts, and presenting at various events.nnecurity ecurity / onsensus ests]nnuthored by redrik vantesnne started this year with the clear objective to make he erge a success from a security perspective, so in the first half of the year and up until he erge, our efforts were primarily aimed towards testing and improving security wherever possible in the protocol and clients. t he erge, no major issues were spotted and everything appeared to go very smoothly.nnuring this year we have worked on many things leading up to and beyond he erge. ome of our work started with a merge threat assessment, and has been related to fuzzing using tools such as ntithesis, osy eighbor, eacon uzz, ngine  uzzer,  fuzzers and other fuzzers.nne have also manually audited clients, libpp, s, ridges, validator appliances, mev, worked with eternal auditing companies for some audits, researched ways to reduce o risks of validators, and more.
ne of the perhaps more publicly seen improvements was our significantly increased bounties (), but we have also released tools such asnnosy eighbornnandnnecure ropnn.nnhe security team also closely worked with the protocol support team and the client teams in a weekly merge testing call and has been running its own validators for the testnets.nnastly, the team has given several talks and published several posts about security, such asnnalk ecuring the eacon chainnnanel ug ounties & hitehatsnnalk osy eighbor - utomated uzz arness eneration for olang rojectsnnalk thereum oundation's ug ounty rogramnnecured # ublic ulnerability isclosuresnnecured # ecurity eamsnnecured # ug ounty ewards now up to $, nnontinue keeping an eye out for our ‚Äúecured‚Äùnnblog postsnnif you want to learn more about what we‚Äôre up to.nnn , the team will focus onnnnternal security audits of apella/hanghainnurther improving our testing capabilitiesnnoordinating an eternal security audit of ccount bstractionnnoordinating and communicating vulnerability reports through the ounty programnnnternal manual spec and client auditsnnunning and improving fuzzing infrastructurennnternal security audits of ayer /ridgesnnolding client security calls to further collaborate on securitynnoordinating eternal security auditsnnoliditynnuthored by ranziska eintelnnhroughout , we published  oliditynnreleasesnnwith the following highlightsnnolidity ..nnimproved the avacript/asm binary and fied several bugs.nnolidity ..nnfied an importantnnbug related tonnabi.encodeallnn, etended thennusing fornndirective and implemented ‚Äúgo to definition‚Äù for the language server. urthermore, it‚Äôs the release that marked compiling via the new ul  pipeline production ready.
‚ÑπÔ∏è singnnvia-nncan help avoid stack too deep errors! ead more about thatnnherenn.nnolidity ..nnfied two important bugs, namely annize heck ug in ested alldata rray -eencodingnnand annug oncerning ata ocation during nheritancenn.nnolidity ..nnfied another two important bugs, improved inlining heuristics and added ann.selectornnmember for errors and events. ou can read more about the bugs herennptimizer ug egarding emory ide ffects of nline ssemblynnug when opying irty ytes rrays to toragennolidity ..nnfied annead verflow ug in alldata uple -eencodingnnand included several improvements like more gas-efficient overflow checks for addition and subtraction.nnolidity ..nnfied anntorage rite emoval ug n onditional arly erminationnn, made overflow checks on multiplication more efficient, and added an  feature to always analyze all files in a project. ersion .. marks the th olidity release!nnesides the ongoing work on the compiler and language, we also engaged with the ecosystemnne organized thennnderhanded olidity ontest nn, which was a great success. he goal of the ontest is to write seemingly innocent and straightforward-looking olidity code that actually contains malicious behavior or backdoors. heck out thennoard of amennfor all winning submissions!nnn pril, we hosted thennolidity ummitnn, a one-day conference, as part of evconnect in msterdam. he olidity ummit is a collaborative event focusing on the future of olidity. ind a recap of the event with full agenda and links to all talk recordingsnnherenn.nnf you want to get up to speed with recent olidity developments, here is a selection of talks the olidity core team members gave in nnaniel onnn‚Äúenerating  ytecode from ul in the new via  ipeline‚Äùnnhris outliningnn‚Äúecent and lanned utures‚Äùnnranzi giving annn‚Äúntroduction to olidity in ‚Äùnnari onnn‚Äúopics in olidity‚Äùnnhris withnn‚Äúodern olidity‚Äùnnn ecember, we sharednn‚Äúolidity ore eam pdates‚Äùnnon the olidity blog, summarizing the most important events in the core team.nnast but not least he olidity eveloper urvey nnlaunchednnon ecember !nnf you are a olidity developer, please support us by providing your insights and take  minutes to take part in the surveynnherenn.nnhe survey closes on anuary , .nnoratesnnuthored by hibaut chaeffernn was a good year for oratesnnt started with the implementation of a olidity verifier for the arlin proving scheme by irvan yagi, a great first contribution to the project.nn lot of new functionality was added to the language throughout the year, such as shadowing of variables, a wider range of comple types, as well as easier conversion tools between numeric types.nnn the summer, orates was upgraded to a more modern synta. o morennendifnnand other vintage language constructs.nnhe rest of the year was spent focusing on the introduction of assembly blocks to orates. istorically known for being higher level, orates will very soon give developers the power (and responsibility) to write low-level constraints by hand.nninally, eorg iese wrote an integration of orates with a variant of the lonk proof system, which is also being finalized.nnhe orates team is looking forward to welcoming more developers in the  world in !