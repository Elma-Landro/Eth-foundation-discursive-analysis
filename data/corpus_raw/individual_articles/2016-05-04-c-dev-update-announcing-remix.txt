Titre: C++ DEV Update: Announcing Remix\nAuteur: Christian Reitwiessner\nDate: May 4, 2016\nURL: https://blog.ethereum.org/2016/05/04/c-dev-update-announcing-remix\nCatégorie: Non catégorisé\n\n==================================================\n\nfter almost three months into the "reboot" of the ++ team,  would like to give an update about the team itself, what we did and what we plan to do.nneam updatennhe so-called ++ team currently consists of aweł ylica (chfast), reg olvin (gcolvin), iana usikyan (ianaus), imitry hokhlov (winsvega), ann evreau (yann), ob ummerwill (bobsummerwill), me (chriseth) and (kindly "donated" by ris ndustries)  (o).nnaweł is the original author of the llvm-based -to-native just-in-time compiler, re-joined in pril and will continue improving the .nnreg joined in ebruary and already achieved substantial speedups for the ++ implementation of the thereum irtual achine, using his eperience from implementing the ava irtual achine for his former employer racle.nniana and ann are working on olidity and its s (yes, plural, see below!).nnimitry is in charge of the consensus tests and is also working on the ++ core.nnob joined in ebruary (having been part of the community for a longer time) and is currently leading the ambitious effort of disentangling the ++ codebase. e was also a major contributor to thennhomestead guidenn.nn joined ris industries in arch and is working on the olidity compiler.nnurthermore, the coordination and co-operation between the ++ and the o teams is on a completely different level than before. ne of the reasons why we improve the interpreter is to get a water mark for the go-ethereum interpreter and lessons learnt during that process will directly feed into the go interpreter, just to name one eample.nnnnouncing eminneveloping olidity itself and providing resources and tools for people writing smart contracts and dapps is one of the largest areas of work for the ++ team. n essential such tool is a debugger for olidity and the thereum irtual achine so that developers can "look inside" the virtual machine and find the eact spot in their code that is not doing what they epect it to do. ur nninnis a wonderful piece of software that provides eactly this. nfortunately, most people do not use it and prefernnbrowser-soliditynnor just some unit testing tools.nnhis is understandable, people do not want to switch editors ( guess this is also why we got a vast number of olidity plugins for eisting s in the past months) or install etra software. urthermore, the relative amount of eternal contributions we received for the html+js-based minimalistic  browser-solidity compared to ++/t-based i is just overwhelming.nnecause of that and also in an effort to increase modularity, reusability and openness, we decided to rethink the way we want to provide developer tools ith thennremi projectnnwe will create a set of reusable html+js modules for developing and debugging smart contracts.nnhis means that it will be possible to integrate a debugger for  and olidity into browser-solidity (which will also move to a more prominent place in the future), but also into visual studio code, atom, sublime, basically any  that is html+js-based. ou will even be able to fire up the debugger inside ist, also for transactions in the past!nnt is probably a bit too early to try out remi, but if you want, follow the instructions in the repository, but be sure to use the latest develop version of cpp-ethereum as backend node.nnor everyone else ere is a screenshot of an early proof of concept versionnnther asksnnoncerning the current focus for other projects, we are improving the runtime performance of the virtual machine. reg already made great progress in that area and still has a lot of ideas. e are currently setting up general benchmarks, so that we can compare the performance of different implementations and the difference between interpreters and just-in-time compilers. e plan to make the just-in-time compiler available to other implementations like py-ethereum and of course go-ethereum.nnor olidity, the main areas of work are currently fied-point types, structs as part of the  and etending the usefulness of libraries via "inlineable" functions and templates. urthermore, we would like to invite the community to write and publish useful libraries. pecial thanks to le eregszaszi (aic), ick ohnson (rachnid) and ndreas lofsson (androlo) for making a great start there!nninally, we want to reduce the pain that is currently caused when working with the ++ codebase, especially due to eternal and intra-dependencies. e are already almost at the point where olidity can be compiled in isolation and the goal is to move back to our old home, the ethereum/cpp-ethereum repository, splitting parts off only where it makes sense, namely for i, olidity and .