Titre: Ethereum Research Update\nAuteur: Vitalik Buterin\nDate: December 4, 2016\nURL: https://blog.ethereum.org/2016/12/04/ethereum-research-update\nCatégorie: Non catégorisé\n\n==================================================\n\nhis week marks the completion of our fourth hard fork,nnpurious ragonnn, and the subsequentnnstate clearing processnn, the final steps in the two-hard-fork solution to the recent thereumnndenial of service attacksnnthat slowed down the network in eptember and ctober. as limits are in the process of being increased to  million as the network returns to normal, and will be increased further as additional optimizations to clients are finished to allow quicker reading of state data.nnn the midst of these events, we have seen great progress from the ++ and o development teams, includingnnimprovements to olidity toolsnnand the release of thenneth light clientnn, and the arity, thereum and other eternal development teams have continued pushing forward on their own with technologies such as arity'snnwarp syncnn many of these innovations have already made their way into the hands of the average user, andnnstill othersnnare soon to come. t the same time, however, a large amount of quiet progress has been taking place on the research side, and while that progress has in many cases been rather blue-sky in nature and low-level protocol improvements necessarily take a while to make it into the main thereum network, we epect that the results of the work will start to bear fruit very soon.nnetropolisnnetropolis is the net major planned hardfork for thereum. hile etropolis is not quite as ambitious as erenity and will not include proof of stake, sharding or any other similarly large sweeping changes to how thereum works, it is epected to include a series of small improvements to the protocol, which are altogether much more substantial than omestead. ajor improvements includenn  (account security abstraction)nn- move the logic for verifying signatures and nonces into contracts, allowing developers to eperiment with new signature schemes, privacy-preserving technologies and modifications to parts of the protocol without requiring further hard forks or support at the protocol level. lso allows contracts to pay for gas.nn  (blockhash and state root changes)nn- simplifies the protocol and client implementations, and allows for upgrades to light client and fast-syncing protocols that make them much more secure.nnrecompiled/native contracts for elliptic curve operations and big integer arithmetic, allowing for applications based on ring signatures or  cryptography to be implemented efficientlynnarious improvements to efficiency that allow faster transaction processingnnuch of this work is part of a long-term plan to move the protocol toward what we callnnabstractionnn. ssentially, instead of having comple protocol rules governing contract creation, transaction validation, mining and various other aspects of the system's behavior, we try to put as much of the thereum protocol's logic as possible into the  itself, and have protocol logic simply be a set of contracts. his reduces client compleity, reduces the long-run risk of consensus failures, and makes hard forks easier and safer - potentially, a hard fork could be specified simply as a config file that changes the code of a few contracts. y reducing the number of "moving parts" at the bottom level of the protocol in this way, we can greatly reduce thereum's attack surface, and open up more parts of the protocol to user eperimentation for eample, instead of the protocol upgrading to a new signature scheme all at the same time, users are free to eperiment and implement their own.nnroof of take, harding and ryptoeconomicsnnver the past year, research on proof of stake and sharding has been quietly moving forward. he consensus algorithm that we have been working on, asper, has gone through several iterations and proof-of-concept releases, each of which taught us important things about the combination of economics and decentralized consensus.nno release nncame at the start of this year, although that approach has now been abandoned as it has become obvious that requiring every validator to send a message every block, or even every ten blocks, requires far too much overhead to be sustainable. he more traditional chain-basednnonn, as described in thennauve apernn, has been more successful although there are imperfections in how the incentives are structured, the flaws are much less serious in nature.nnyself, lad and many volunteers from thereum research team came together at thennbootcamp at nnin uly with university academics, cash developers and others to discuss proof of stake, sharding, privacy and other challenges, and substantial progress was made in bridging the gap between our approach to proof of stake and that of others who have been working on similar problems.  newer and simpler version of asper began to solidify, and myself and lad continued on two separate paths myself aiming to create a simple proof of stake protocol that would provide desirable properties with as few changes from proof of work as possible, and lad taking a "correct-by-construction" approach to rebuild consensus from the ground up. oth were presented at evcon in hanghai in eptember, and that's where we were at two weeks ago.nnt the end of ovember, the research team (temporarily joined by oi uu, ofnnvalidator's dilemmannfame), along with some of our long-time volunteers and friends, came together for two weeks for a research workshop in ingapore, aiming to bring our thoughts together on various issues to do with asper, scalability, consensus incentives and state size control.nn major topic of discussion was coming up with a rigorous and generalizable strategy for determining optimal incentives in consensus protocols - whether you're creating a chain-based protocol, a scalable sharding protocol, or even an incentivized version of , can we come up with a generalized way to correctly assign the right rewards and penalties to all participants, using only verifiable evidence that could be put into a blockchain as input, and in a way that would have optimal game-theoretic properties e had some ideas one of them, when applied to proof of work as an eperiment, immediately led to a new path toward solving selfish mining attacks, and has also proven etremely promising in addressing long-standing issues in proof of stake.nn key goal of our approach to cryptoeconomics is ensuring as much incentive-compatibility as possible even under a model with majority collusions even if an attacker controls % of the network, is there a way to make sure that, if the attacker deviates from the protocol in any harmful way, the attacker loses money t least in some cases, such as short-range forks, the answer seems to be yes. n other cases, such as censorship, achieving this goal is much harder.nn second goal is bounding "griefing factors" - that is, ensuring that there is no way for an attacker to cause other players to lose money without losing close to the same amount of money themselves.  third goal is ensuring that the protocol continues to work as well as possible under other kinds of etreme conditions for eample, what if % of the validator nodes drop offline simultaneously raditional consensus protocols such as , and proof of stake protocols inspired by such approaches, simply halt in this case our goal with asper is for the chain to continue, and even if the chain can't provide all of the guarantees that it normally does under such conditions the protocol should still try to do as much as it can.nnne of the main beneficial results of the workshop was bridging the gap between my current "eponential ramp-up" approach to transaction/block finality in asper, which rewards validators for making bets with increasing confidence and penalizes them if their bets are wrong, and lad's "correct-by-construction" approach, which emphasizes penalizing validators only if they equivocate (ie. sign two incompatible messages). t the end of the workshop, we began to work together on strategies to combine the best of both approaches, and we have already started to use these insights to improve the asper protocol.nnn the meantime,  have written some documents and s that detail the current state of thinking regarding proof of stake, sharding and asper to help bring anyone interested up to speednnhttps//github.com/ethereum/wiki/wiki/roof-of-take-nnhttps//github.com/ethereum/wiki/wiki/harding-nnhttps//docs.google.com/document/d/macpvwngvtcikb_nbflgm_nn(auve aper now slightly out of date but will be updated soon)nntate size controlnnnother important area of protocol design is state size control - that is, how to we reduce the amount of state information that full nodes need to keep track of ight now, the state is about a gigabyte in size (the rest of the data that a geth or parity node currently stores is the transaction history this data can theoretically be pruned once there is a robust light-client protocol for fetching it), and we saw already how protocol usability degrades in several ways if it grows much larger additionally, sharding becomes much more difficult as sharded blockchains require nodes to be able to quickly download parts of the state as part of the process of serving as validators.nnome proposals that have been raised have to do withnndeleting old non-contract accountsnnwith not enough ether to send a transaction, and doing so safelynnso as to prevent replay attacksnn. ther proposals involve simply making it much more epensive to create new accounts or store data, and doing so in a way that is more decoupled from the way that we pay for other kinds of costs inside the . till other proposals include putting time limits on how long contracts can last, and charging more to create accounts or contracts with longer time limits (the time limits here would be generous it would still be affordable to create a contract that lasts several years). here is currently an ongoing debate in the developer community about the best way to achieve the goal of keeping state size small, while at the same time keeping the core protocol maimally user and developer-friendly.nniscellaneannther areas of low-level-protocol improvement on the horizon includenneveralnn" ." proposalsnnthat make the  more friendly to static analysis, facilitating compatibility with nnntegration of zero knowledge proofs, likely through either (i) an eplicit  opcode/native contract, or (ii) an opcode or native contract for the key computationally intensive ingredients in s, particularly elliptic curve pairing computationsnnurther degrees of abstraction and protocol simplificationnnpect more detailed documents and conversations on all of these topics in the months to come, especially as work on turning the asper specification into a viable proof of concept release that could run a testnet continues to move forward.