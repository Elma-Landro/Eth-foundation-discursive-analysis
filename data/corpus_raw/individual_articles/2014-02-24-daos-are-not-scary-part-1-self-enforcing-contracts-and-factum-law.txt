Titre: DAOs Are Not Scary, Part 1: Self-Enforcing Contracts And Factum Law\nAuteur: Vitalik Buterin\nDate: February 24, 2014\nURL: https://blog.ethereum.org/2014/02/24/daos-are-not-scary-part-1-self-enforcing-contracts-and-factum-law\nCatégorie: Non catégorisé\n\n==================================================\n\nany of the concepts that we promote over innnthereum landnnmay seem incredibly futuristic, and perhaps even frightening, at times. e talk about so-called “smart contracts” that eecute themselves without any need, or any opportunity, for human intervention or involvement, people forming kynet-like “decentralized autonomous organizations” that live entirely on the cloud and yet control powerful financial resources and can incentivize people to do very real things in the physical world, decentralized “math-based law”, and a seemingly utopian quest to create some kind of fully trust-free society. o the uninformed user, and especially to those who have not even heard of plain old itcoin, it can be hard to see how these kinds of things are possible, and if they are why they can possibly be desirable. he purpose of this series will be to dissect these ideas in detail, and show eactly what we mean by each one, discussing its properties, advantages and limitations.nnhe first installment of the series will talk about so-called “smart contracts”.nnmart contractsnnare an idea that has been around for several decades, but was given its current name and first substantially brought to the (cryptography-inclined) public’s attentionnnby ick zabonnin . n essence, the definition of a smart contract is simple a smart contract is a contract that enforces itself. hat is to say, whereas a regular contract is a piece of paper (or more recently  document) containing tet which implicitly asks for a judge to order a party to send money (or other property) to another party under certain conditions, a smart contract is a computer program that can be run on hardware which automatically eecutes those conditions. ick zabo uses the eample of a vending machinenn canonical real-life eample, which we might consider to be the primitive ancestor of smart contracts, is the humble vending machine. ithin a limited amount of potential loss (the amount in the till should be less than the cost of breaching the mechanism), the machine takes in coins, and via a simple mechanism, which makes a freshman computer science problem in design with finite automata, dispense change and product according to the displayed price. he vending machine is a contract with bearer anybody with coins can participate in an echange with the vendor. he lockbo and other security mechanisms protect the stored coins and contents from attackers, sufficiently to allow profitable deployment of vending machines in a wide variety of areas.nnmart contracts are the application of this concept to, well, lots of things. e can have smart financial contracts that automatically shuffle money around based on certain formulas and conditions, smart domain name sale orders that give the domain to whoever first sends in $, perhaps even smart insurance contracts that control bank accounts and automatically pay out based on some trusted source (or combination of sources) supplying data about real-world events.nnmart ropertynnt this point, however, one obvious question arises how are these contracts going to be enforced ust like traditional contracts, which are not worth the paper they’re written on unless there’s an actual judge backed by legal power enforcing them, smart contracts needs to be “plugged in” to some system in order to actually have power to do anything. he most obvious, and oldest, solution is hardware, an idea that also goes by the name “smart property”. ick zabo’s vending machine is the canonical eample here. nside the vending machine, there is a sort of proto-smart-contract, containing a set of computer code that looks something like thisnnif button_pressed  "oca ola" and money_inserted  .
release("oca ola")
return_change(money_inserted - .)nnelse if button_pressed  "quafina ater" and money_inserted  .
release("quafina ater")
return_change(money_inserted - .)nnelse if ...nnhe contract has four “hooks” into the outside world the button_pressed and money_inserted variables as input, and therelease and return_change commands as output. ll four of these depend on hardware, although we focus on the last three because human input is generally considered to be a trivial problem. f the contract was running on an ndroid phone from , it would be useless the ndroid phone has no way of knowing how much money was inserted into a slot, and certainly cannot release oca ola bottles or return change. n a vending machine, on the other hand, the contract carries some “force”, backed by the vending machine’s internal oca ola holdings and its physical security preventing people from just taking the oca ola without following the rules of the contract.nnnother, more futuristic, application of smart property is rental cars imagine a world where everyone has their own private key on a smartphone, and there is a car such that when you pay $ to a certain address the car automatically starts responding commands signed by your private key for a day. he same principle can also be applied to houses. f that sounds far-fetched, keep in mind that office buildings are largely smart property already access is controlled by access cards, and the question of which (if any) doors each card is valid for is determined by a piece of code linked to a database. nd if the company has an  system that automatically processes employment contracts and activates new employees access cards, then that employment contract is, to a slight etent, a smart contract.nnmart oney and actum ocietynnowever, physical property is very limited in what it can do. hysical property has a limited amount of security, so you cannot practically do anything interesting with more than a few tens of thousands of dollars with a smart-property setup. nd ultimately, the most interesting contracts involve transferring money. ut how can we actually make that work ight now, we basically can’t. e can, theoretically, give contracts the login details to our bank accounts, and then have the contract send money under some conditions, but the problem is that this kind of contract is not really “self-enforcing”. he party making the contract can always simply turn the contract off just before payment is due, or drain their bank account, or even simply change the password to the account. ltimately, no matter how the contract is integrated into the system, someone has the ability to shut it off.nnow can we solve the problem ltimately, the answer is one that is radical in the contet of our wider society, but already very much old news in the world of itcoin we need a new kind of money. o far, the evolution of money has followed three stages commodity money, commodity-backed money and fiat money. ommodity money is simple it’s money that is valuable because it is also simultaneously a commodity that has somenn“intrinsic” use valuenn. ilver and gold are perfect eamples, and in more traditional societies we also have tea, salt (etymology note this is where the word “salary” comes from), seashells and the like. et came commodity-backed money – banks issuing certificates that are valuable because they are redeemable for gold. inally, we have fiat money. he “fiat” in “fiat money” is just like in “nnfiat lunn“, ecept instead of od saying “let there be light” it’s the federal government saying “let there be money”. he money has value largely because the government issuing it accepts that money, and only that money, as payment for taes and fees, alongside several other legal privileges.nnith itcoin, however, we have a new kind of moneynnfactum moneynn. he difference between fiat money and factum money is this whereas fiat money is put into eistence, and maintained, by a government (or, theoretically, some other kind of agency) producing it, factum moneynnjust isnn. actum money is simply a balance sheet, with a few rules on how that balance sheet can be updated, and that money is valid among that set of users which decides to accept it. itcoin is the first eample, but there are more. or eample, one can have an alternative rule, which states that only bitcoins coming out of a certain “genesis transaction”, count as part of the balance sheet this is called “colored coins”, and is also a kind of factum money (unless those colored coins are fiat or commodity-backed).nnhe main promise of factum money, in fact, is precisely the fact that it meshes so well with smart contracts. he main problem with smart contracts is enforcement if a contract says to sendnnnntnnonnnnonnbnninnfnnnnhnnannpnnpnnennnnnsnn,nnannnnndnnnndnnonnennsnnhnnannpnnpnnennnnn,nnhnnonnwnndnnonnwnnennennnnnsnnunnrnnenntnnhnnanntnn to ob if  happens, and  does happen, how do we ensure thatnnnntnnonnnnonnbinnfnnnnhannppnnennnnnsnn,nnannndnnnndnnoesnnhannppnnennnnn,nnhnnonnwnndnnonnwnneennnnnsnnunnrenntnnhanntnn actually gets sent to ob. he solution with factum money is incredibly elegantnnthe definition of the moneynn, or more precisely the definition of the current balance sheet, is the result of eecuting all of the contracts. hus, if  does happen, then everyone will agree that ob has the etra $, and if  does not happen then everyone will agree that ob has whatever ob had before.nnhis is actually a much more revolutionary development than you might think at first with factum money, we have created a way for contracts, and perhaps even law in general, to work, and be effective, without relying on any kind of mechanism whatsoever to enforce it. ant a $ fine for littering hen define a currency so that you have  units less if you litter, andnnconvince people to accept itnn. ow, that particular eample is very far-fetched, and likely impractical without a few major caveats which we will discuss below, but it shows the general principle, and there are many more moderate eamples of this kind of principle that definitely can be put to work.nnust ow mart re mart ontractsnnmart contracts are obviously very effective for any kind of financial applications, or more generally any kind of swaps between two different factum assets. ne eample is a domain name sale a domain, like google.com, is a factum asset, since it’s backed by a database on a server that only carries any weight because we accept it, and money can obviously be factum as well. ight now, selling a domain is a complicated process that often requires specialized services in the future, you may be able to package up a sale offer into a smart contract and put it on the blockchain, and if anyone takes it both sides of the trade will happen automatically – no possibility of fraud involved. oing back to the world of currencies, decentralized echange is another eample, and we can also do financial contracts such as hedging and leverage trading.nnowever, there are places where smart contracts are not so good. onsider, for eample, the case of an employment contract  agrees to do a certain task for  in echange for payment of  units of currency . he payment part is easy to smart-contract-ify. owever, there is a part that is not so easy verifying that the work actually took place. f the work is in the physical world, this is pretty much impossible, since blockchains don’t have any way of accessing the physical world. ven if it’s a website, there is still the question of assessing quality, and although computer programs can use machine learning algorithms to judge such characteristics quite effectively in certain cases, it is incredibly hard to do so in a public contract without opening the door for employees “gaming the system”. ometimes, a society ruled by algorithms is just not quite good enough.nnortunately, there is a moderate solution that can capture the best of both worlds judges.  judge in a regular court has essentially unlimited power to do what they want, and the process of judging does not have a particularly good interface people need to file a suit, wait a significant length of time for a trial, and the judge eventually makes a decision which is enforced by the legal system – itself not a paragon of lightning-quick efficiency. rivate arbitration often manages to be cheaper and faster than courts, but even there the problems are still the same. udges in a factum world, on the other hand, are very much different.  smart contract for employment might look like thisnnif says(," did the job") or says(," did the job")
send(, )nnelse if says(," did not do the job") or says(," did not do the job")
send(, )nnsays is a signature verification algorithm says(,) basically checks if someone had submitted a message with tet  and a digital signature that verifies using ’s public key. o how does this contract work irst, the employer would send  currency units into the contract, where they would sit in escrow. n most cases, the employer and employee are honest, so either  quits and releases the funds back to  by signing a message saying “ did not do the job” or  does the job,  verifies that  did the job, and the contract releases the funds to . owever, if  does the job, and  disagrees, then it’s up to judge  to say that either  did the job or  did not do the job.nnote that ’s power is very carefully delineated all that  has the right to do is say that either  did the job or  did not do the job.  more sophisticated contract might also give  the right to grant judgements within the range between the two etremes.  does not have the right to say that  actually deserves  currency units, or that by the way the entire relationship is illegal and  should get the  units, or anything else outside of the clearly defined boundaries. nd ’s power is enforced by factum – the contract contains ’s public key, and thus the funds automatically go to  or  based on the boundaries. he contract can even require messages from  out of  judges, or it can have separate judges judge separate aspects of the work and have the contract automatically assign ’s work a quality score based on those ratings. ny contract can simply plug in any judge in eactly the way that they want, whether to judge the truth or falsehood of a specific fact, provide a measurement of some variable, or be one of the parties facilitating the arrangement.nnow will this be better than the current system n short, what this introduces is “judges as a service”. ow, in order to become a “judge” you need to get hired at a private arbitration firm or a government court or start your own. n a cryptographically enabled factum law system, being a judge simply requires having a public key and a computer with internet access. s counterintuitive as it sounds, not all judges need to be well-versed in law. ome judges can specialize in, for eample, determining whether or not a product was shipped correctly (ideally, the postal system would do this). ther judges can verify the completion of employment contracts. thers would appraise damages for insurance contracts. t would be up to the contract writer to plug in judges of each type in the appropriate places in the contract, and the part of the contract that can be defined purely in computer code will be.nnnd that’s all there is to it.nnhe net part of this series will talk about the concept of trust, and what cryptographers and itcoin advocates really mean when they talk about building a “trust-free” society.