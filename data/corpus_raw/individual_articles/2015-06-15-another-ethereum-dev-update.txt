Titre: Another Ethereum ÐΞV Update\nAuteur: Gavin Wood\nDate: June 15, 2015\nURL: https://blog.ethereum.org/2015/06/15/another-ethereum-dev-update\nCatégorie: Non catégorisé\n\n==================================================\n\neen a while,  know, but then these are rather busy days.nn'm writing this from a tarbucks in hanghai sitting behind the reat irewall, able to peep out only occasionally. 've been in sia with arek for the last couple of weeks, mainly for meetups, workshops and technical meetings. uring this time, we've seen the release, struggle and survival of the lympic testnet, a very clear signal that a multi-client system would be far superior to the present monoculture. e've seen the beginning of the second eternal o audit, mainly for checking of regressions but also to offer comments and criticisms on aspects that have changed in the meantime such as o's network layer and sync strategy. e've seen i and olidity continue to progress and mature. nd through ongoing development and the progression of the s we've seen all clients become cleaner, faster and more resilient.nnchangesnne've been continuing to work with echanges, now arek and onstantin both provide substantial technical support, helping the coders from the echanges understand the wide differences between using standard cryptocurrency s and thereum's smart-contract-based approach. n order to provide better support for them and maimise adoption, we've designed and introduced a middleware   proy allowing a much more familiar interface to thereum for echanges.nn++nnn the ++ side, we have introduced , a new thereum network protocol version (backwards compatible so as not to hamper the rontier release schedule for o) providing super-fast parallel hash-chain downloading and much more resilience to dirty hash-chain attacks. rkadiy is helping code that up for ++ with the hope that it can be worked into o before omestead.nnolidity, meanwhile, has progressed substantially olidity can now structurally predict gas usage, optimise for storage access and code size very well, and support internal-function calls with dynamic types, together with a whole host of other features. iana continues hacking on that codebase together with hristian.nni, under the guidance of eron and utta with vsa providing visual design insights and ann hacking, is seeing substantial  polish and refactoring, with the general target being to have it be an ultra-usable, yet powerful,  for contract development. Ðpps may now be deployed to the network in a simple -stage process, and the state/blockchain management layer is becoming far improved, featuring a single-pane view from which you can easily see all transactions, calls and logs and propagate transactions between chain-refreshes easily.nnle continues to work on the low-level network layer, now being helped by lad. e had a summit in ug  weeks ago where  laid out the plans for our libpp networking layer, and how the hisper and thereum protocols fit into that. ur first full-time developer on hisper, lad will continue hacking at libpp and hisper, making the protocol more resilient to various thereum networking attacks whilst continuing the & for the pp asynchronous non-endpoint-specific signalling protocol.nnawel, working from arsaw, has been continuing on the   and  libraries, optimising stack usage and helping fi the stack depth issues we were seeing on ac  . ladimir meanwhile continues his work on testing and arian on thennnetstats pagennwhich has recently proved its utility in more ways than one. hose who have been eperimenting with mining setups on the lympic testnet will probably recognise efteris's work in taking over the thash implementation, and updating, refactoring and generally supporting im ughes' pen implementation. pecial thanks to each of the members of the community who have helped one way or another with the development of this code. ou know who you are (- hristoph, meanwhile, is now working on test coverage for the core classes, as well as helping fi various issues in the core.nnside from working with the i teams, rkadiy and arek, 've been coding up the new ++ wallet/secret store code (a revamped format and compatibility with o and ython), optimising the core (import times for at least one gas-heavy block were recently measured as being ~ faster than ython and ~ faster than o), bug fiing across the core, implementation of the new 'ethvm' binary for running the  in standalone mode and the 'ethkey' binary for wallet management and, most recently, coding up a much better interactive console interface, similar to o's avascript console. 'm also hoping to get a much better blockchain download diagnostic display going soon in lethero.nnuditingnnhe internal audit of the ++ codebase has begun, with hristoph working on tests for all core classes and rkadiy helping with some of the core optimisations. he ecrettore and allet classes have already been audited by hristian, thereby giving credibility that the ++ client is reasonably secure for managing private keys. he ++ eternal audit will begin in three short weeks.nnince the substantial failure of the testnet caused by issues in only one of the three clients, including issues that survived two auditing procedures, it has become clear to us that auditing, eternal or internal, is no silver bullet. hile we are committed to providing the very best software and will continue with our auditing programme, please let's be clear there is nothing magical about the o client having gone through an auditing process. e are aiming to have all clients through at least a basic auditing process by the omestead release and  see no reason to use the o client over other clients (++ or ython) at this stage, nor, for the vast majority of users, during rontier. o clients come with any guarantees. ndeed there's the argument that minority clients, being a smaller target, are less likely to be attacked.nnnwardsnne continue our preparations for the rontier release. hile we're still uncertain of the precise release date, we are becoming increasingly happy at the resilience of the lympic testnet. s the lympic testnet's failure was ongoing, the adversity caused some reflection over how we might mitigate such problems in the future. he depth and duration of the consensus failure can, roughly speaking, be put down to two problems firstly that there was a bug in the o codebase causing it to accept invalid blocks (in this case, blocks with an invalid proof-of-work nonce) secondly that there was a huge problem with upgrading the network since miners continued to mine on the 'bad' chain and were slow to upgrade their nodes so that they mined on the correct chain. ssentially, the first was a forensic problem and the second an problem of organisation.nno make sure this is never so deep nor broad in the future,  designed two new protocols thennad hain anarynnand thennad lock eporting nn. he bad chain canary is a simple contract. t is controlled by a single key (though there may be several of them) and sits quietly until poked by its owner.  will be one such owner, italik and eff two others and there will likely be fourth, hristoph. hen poked, it is given a blockhash and block number pair this pair refers to a recent block on a bad chain. f they match the chain that the contract thinks it is sitting on, it puts itself in the "bad chain" state. his allows the thereum core devs to inform everyone who is running a client on a bad chain (i.e. one that does not conform to the ellow aper due to a bug) that it is such. he default in clients (easily overridden) is not to mine on such chains (since to do so would be a waste of energy), but rather to inform the user that they should upgrade at their earliest opportunity.nnhe ad lock eporting  is a simple   that allows a number of our nodes to run in a 'sentinel' mode. n this mode, if they come across a bad block, they automatically compile a standardised report of what went wrong including epected transaction receipts,  traces, proof-of-work and block error information. his report is then instantly sent to a ÐΞ server where it can trigger an early warning system and, should the release tzar (that'd be aylor) deem it necessary, alert the core devs. hrough standardisation and usage of a simple format, it's designed so that we can easily code up a -comparison engine to quickly diagnose where the consensus issue lies.nnne future job is to combine the two so that the - can also manage the reporting of canary information - in this case, a user may set up a sentinel server to give them an email whenever the contract reports that mining has ceased and/or they should upgrade their node to continue mining.nnoundationnninally, the three directors of the thereum oundation (italik with three votes, then aylor and ihai with a vote each) will soon convene for, in italik's words, a "kind of great passing of the baton event". elley, ÐΞ's indomitable , has been spearheading the search for proven candidates from a variety of fields who can add real value to the foundation both in terms of fundraising and of driving adoption. e're etremely grateful for all her hard work in this regard.