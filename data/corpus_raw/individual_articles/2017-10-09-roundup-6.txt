Titre: Roundup #6\nAuteur: Ethereum Team\nDate: October 9, 2017\nURL: https://blog.ethereum.org/2017/10/09/roundup-6\nCatégorie: Non catégorisé\n\n==================================================\n\netropolis is finally (almost) here! he fork for yzantium, the first and larger part of etropolis, succeeded on the testnet over two weeks ago, and the likely date for the fork on the mainnet has been set to block . million, which is epected to be on ct . ew features include opcodes such as  and , as well as precompiles that can be used to support a wide array of cryptographic algorithms. t the same time, we have been seeing many improvements to thereum core code, hisper, warm as well as thereum’s future scaling plans.nnasper onnhas been released. his includes an implementation of the fork choice rule, the asper contract, and a complete pyethereum library, though not yet a full node that can connect to the network.nn “nntesting languagenn” has been implemented that allows us to quickly implement tests for the asper chain. his can also theoretically be used for the proof of work chain, and an etension to sharding is in progress.nnmplementation of annproof of conceptnnfor sharding isnnin progressnn.nnmplementation of thennaccount redesignnnin the sharding o isnnin progressnn.nnhennasper papersnncontinue to be in progress.nnhe number of message types in asper  has beennnreduced from  to nn, which will also simplify the incentive structure.  formal proof of the safety propertynnhas been writtennn. his will be incorporated in o.nnhe fork choice rule has also been simplified.nnyethapp now supports python .nnhe "scalable light client data availability verification" note has beennnedited with an improved schemennhe research team has added one full-time new developer and one part-time to iper, and there is an increasing number of community contributors. eatures being worked on includennross-contract  callingnn loggingnnupport for  (lliptic urve ddition) ,  (lliptic urve ultiplication) and other precompilesnnupport for features specific to the current sharding specificationnneneral code refactoringnnorenneamplesnnasier compatibility with  and other olidity-developed snncpp-ethereumnne are making progress with syncing to the test and main networks. ow cpp-ethereum cannnimport warp snapshotnnand continue syncing from the snapshot block.he yzantium implementation has been finished. ince the last roundupnnocumentation on  layout was addednnnnhe ice-age delay and the reward changennimpler rules for address collisionnnwerennimplementednneveral deadlock andnnrace conditionnnbugs were fiednnnnnit test improvementsnnhave been madennync assertion failure finnwas implementednnore race conditions are being discovered and fiednnhe finalnnpull requestnnfor the first candidate of   for  (-). racing is still missing though. ee thennevm.hnnheader file.nnethnnince the last roundup, eth saw annmajor release (v..)nnand a follow upnnmaintenance release (v..)nnwith primary focus being on the upcoming yzantium hard fork (enabled for all networks as of v..).nnn addition to yzantium, a few features finalized (some of which you may have seen in thennv.. egara blogpostnn)nn log storage and indeing wasnncompletely reworkednn, cutting the filtering time of the entire chain for contract events by - orders of magnitude, from minutes to under a second.nnhe base peer-to-peer protocol used by all thereum sub-protocols was updated to usennnappy compressionnn, cutting the bandwidth needed for a fast syncnnfrom . to .nnand similar reductions are epected for day-to-day operational bandwidth requirements too. ince operational bandwidth relies on updated peers, its effect will become visible in the longer term.nninkeby was etended with an authorized signer and a bootnodenncourtesy of the  teamnn, which should both help find peers faster, as well as provide a stabler eperience due to the ecess available bandwidth capacity on the test network.nnome important features we’re currently working on (but might take a bit of time due to evcon preparations) includesnnenerational disknnwritesnnto keep the recent trie modifications in system memory and only periodically store checkpoint tries. his feature greatly speeds up processing batches of blocks as well as significantly reduces final consumed disk space. owever there are still some minor roadblocks to solve to ensure we don’t break sync for remote nodes due to the new data availability pattern in the network.nn new variation of fast sync that does not download the entire state-trie node-by-node, but rather only pulls trie leaf nodes (along with supporting erkle proofs), and assembles the final trie locally, which should have a huge impact on the number of network packets required to do the initial sync. hat said, besides implementing it, this feature needs proper benchmarking to support it and an  process to debate its inclusion as the net version of the `eth` protocol.nnersion  of the pp discovery protocol (currently eperimental and used by the light clients) to enable it to run concurrently with v on the same  port, as well as to iron out the kinks noticed from running the light client on top.nnersion  of the light client protocol, based on the new bloombits filtering mechanism, which will finally allow light clients to retrieve and subscribe to  events. he new version should also support tracking transactions for chain inclusion without the overhead of downloading entire blocks just to verify their transaction contents.nnesearch into an ultra-light mode of operation where clients connect to a set of user defined backing servers similar to the classical client-server model, but where the node can cryptographically cross-validate the multiple backends to prevent them from cheating.nn plethora of bugfies have also been merged into both releases, which you can skim through at the itub milestones fornnv..nnandnnv..nn.nnestingnnest cases for yzantium are ready and some clients passed all of them. fter the last round up, wennintroduced  schema checkingnn. his ensures more stable formats of the testing suite, and prevents accidental typos in field names.nnseparated inputs and outputs of doests() functionsnn. efore this , typos in the input files were copied into the output files.nnapplied `const` attributes on inputsnn, and now the output files only contain fields that were eplicitly added.nncnnonsolidated options of testethnn.nnadded more graceful error handling in testethnn.nneplaced log entries in the test files with a keccak hash of the log .nnopenednna finnthat will remedy some unwanted side-effects where translation of eneraltateests into lockchainests destroys the originals.nnellow apernnll yzantium changesnnhave been documented on pull-requests. he net issue to address is the treatment of the empty account states on precompiled contracts, where different clients do different things.nn itub issuennwas created to discuss this.nnormal erificationnnpirapira gave talks at thenn esearch ummitnnand atnn erlinnn. e mplementednn in amlnn, available with opam install rlp.nnamboonne startednnwriting a specificationnn. ternal interfaces arennbeing implementednn.nn .nnolidity assembly can now handlenn #nnopcodes for subroutines and the rest, thanks to le.  nitial implementations of both  # andnn #nnare written, and reviewed by ndrei, and testing has begun.  reg is working to present initial performance measurements at evcon.nnweb.jsnnweb.js . beta received a great deal of community contributions which is eciting as it appears . is already being used a lot in the wild. lease be careful using the account generation and signing, as it has not been audited. hose accounts should not hold any significant amount of ether. e are currently at beta.. f everything goes well, we hope to have a .. elease candidate by evcon.nnweb.pynneb.py recently added features and improvements includingnnelease of thenniddleware nneworking of the testing infrastructure to test against go-ethereum, pyethereum, and py-evm.nnugfies and  improvements for the web.eth.sign and web.sha s as well as progress towards a unified approach to how different string encodings are handled.nnperimentalnnintegrationnnwith thennethereum-tester librarynn.nnpy-evmnnevelopment continues to progress, moving us closer to an early alpha release, which will allow running py-evm as a light client.nnmplementation of the basic ev networking .nnournaling for state database changes.nnthereum esternnthereum ester is a new tool for python developers design to provide a standard  for testing applications that interacts with the . he library uses a pluggable backend system that allows swapping out the underlying  implementation. his library can also be used transparently with web.py by using thenneperimental thereumesterrovidernneminnwo very important s has been pushed recently () a terminal that allows tracking transactions and interacting with web, and () a revamp of the .nne are now fiing bugs and helping the community to adjust to this new .nn number of new features are being worked on for release in the coming weeksnn-nnighlight of declarations and references, basic autocomplete and renamingnnhttps//github.com/ethereum/browser-solidity/pull/nnommand interpreter for the terminal (used to command remi from the terminal)nnhttps//github.com/ethereum/browser-solidity/pull/nnave transactions as scenario that can be then replayed in any contetnnhttps//github.com/ethereum/browser-solidity/pull/nnake remi  themablennhttps//github.com/ethereum/browser-solidity/pull/nnoliditynne are close to finishing thennnew  en/decodernnusing the iulia language. his allows passing structs and arbitrarily nested arrays across function calls. t is also a little stricter when it comes to invalid input data includingnninvalid array lengthsnn. ou can usennpragma eperimental ncodernnto activate it. ith a similar statement,nnpragma eperimental “v..”nnyou can activate upcoming breaking changes, which we are adding one after the other. ou can now usenn/spana href"https//github.com/ethereum/solidity/pull/"span style"font-weight "f.selector/span/aspan style"font-weight "nnto access the selector (also called the “function hash”) of a function. sing the default visibility of a function will generate annwarningnnnow, and should make you aware ofnnunintended public functionsnn. inally, olidity isnnwarningnnabout (and more strictlynnenforcingnnif you opt to already activate v.. features) violations of “view” (formerly called “constant”) and “pure” annotations for functions. fter yzantium, a call to a “view” function will use the newnnnnopcode and thus enforce the “view” aspect of the function at  level.nnistnneleased version ..nnerged the light client feature as an eperimental optionnnpdated electron, geth and solidity to enhance securitynn new core developernnmarcgarreaunnstarted working on refactoring state management in ist using edunnecuritynn cross-language differential fuzzer of operations on the alt_bn elliptic curve, which are required to perform zk verifications, in three different clients (arity, eth and ), in order to find discrepancies between these implementations, has been built. riven by the libuzzer engine, the program autonomously creates inputs that lead to new code paths in any of the implementations. n addition to that, it validates that the output of each implementation for any input is the same.nnased on this work, a fuzzer that tests the arity and eth implementations of the  for equivalence is being developed.nne have been continuing cross- fuzzing efforts in order to find discrepancies between -implementations (eth,  and arity), and have doubled the bounty rewards for bugs related to consensus or denial-of-service (geth).nnhe hive-testing framework has been updated to test four clients (geth, cpp, py, parity) with the new yzantium tests.nnn eternal audit of ist is in the final stages, and an -vulnerability has been patched and released (credits to oonho im via the bug bounty program). ennstronglynnrecommend updating to the most recent version of ist!nnthereumnnince the last roundup, several new contributors have stepped in to assist with development.  thereum is now passing most yzantium state and blockchain tests. he development effort continues with general bug fies and code refactoring. he most notable of these efforts is a refactor of the library to add support for avacript big integers.nnwarmnnhe swarm team merged important new updates and additions into master including the networknntesting and simulations framework for ppnnwithnna  visualisernn, improved scheduling for breaking up and reassembling data -- thennpyramid chunkernnwith the newnninary erkle ree  chunk hashnn, which brings  compact inclusion proofs verifiable on the blockchain, andnnimproved more informative error messagesnn. he network layer rewrite (our major features for ) has completed the first phase and pss v. is dev ready now with diffie hellman key-echange and continually updated keystream.nnur team is engaging in ever more community cooperation to develop certain features on our roadmap by allowing eternal contributors to feel part of the wider team.nne are launching  working groups aboutnn of our most relevant subprojects network simulation, pss node to node messaging, media and data streaming, database services and the swap swear and swindle framework for incentivizing bandwidth sharing and long-term storage of data. he latter is now gaining momentum as the third orange paper is being worked on with the draft version first to be presented onnnth ctober in the ondon thereum eetupnn.nne just published the tentative program for evcon breakout session on pp technology and the blockchain (am-pm, th ovember, ).nnhispernn new core developer gballet started working on fiing hisper v and updating the documentation.nnv message delivery was broken by a slew of updates over the summer fies have been made and will be integrated soon.nn  is finalized and implementation will begin shortly.nnhanks to all the developers and team leads who contributed to the sections on their projects!