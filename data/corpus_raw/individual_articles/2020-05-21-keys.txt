Titre: Validated, staking on eth2: #4 - Keys ðŸ”‘\nAuteur: Carl Beekhuizen\nDate: May 21, 2020\nURL: https://blog.ethereum.org/2020/05/21/keys\nCatÃ©gorie: Non catÃ©gorisÃ©\n\n==================================================\n\npecial thanks to acha ves aint-eger & anny yan for their review.nnt the core of every roof of take system is a signature scheme. ignatures are used to verify the identity of each validator allowing their actions, both good and bad, to be attributed to them.nne can verify honesty by looking at a validator's signed messages and we can prove malice by showing messages that violate the rules of consensus.nnn fact, in eth, the identity of a validatornnisnntheir public key. pecifically, each validator has two sets of keys a signing key and a withdrawal key.nnigning keysnnnnsigning keynnis the key a validator needs to sign attestations and propose blocks. ecause a validator needs to sign a message at least once per epoch, the client software must have custody of the key.nnithdrawal keysnnecause the client software is always connected to the internet, there is of course a chance that oneâ€™s signing key is compromised. o reduce the impact of such a breach, the actions a validator can perform are split between two keys.nnhe signing key, as eplained above, is used for the validator to perform their duties. n the other hand, thennwithdrawal keynnhas the power to control a validator's funds (transferring*, and withdrawing* ).nn validator should only need to use their withdrawal keys a few times over the lifetime of being a validator. his means they can be put into cold storage and stored with a high degree of security (offline).nn* ransfers and withdrawals are not enabled until at least phase nnhat's a lot of keys!nnf for every  staked, one needed to save and use  unrelated keys to make a deposit, this would get out of hand very quickly.nnuckily, we have a solution. he remedy is to have the keys use a common secret, so that storing a single secret gives access to multiple keys.nnn eth, this is achieved via snnnnandnnnn a set of standards that describe how withdrawal and signing keys are related, and how they can be derived from a single mnemonic.nnnemonicsnnnemonics are another way of encoding secrets and are a much simpler means for people to store and back up their private keys.nnhe idea being that it is simpler to remember or write downnnsausage solution loud isolate focus glide frame door clown million shuffle impulsennthannnefafccfedefedbabdacecbccbannwithout making any mistakes.nneriving keys from other keysnnhen interacting with wallets, you may have encountered "paths" of the formnnm/'/'/'//nn. hese paths describe a relationship between keys.nnccording tonn nn, this relationship takes the form of a tree structure in which a key is determined by a source of entropy (the treeâ€™s seed) and a tree path.nne use the seed to calculate the root of the tree and then build the tree in layers on top of this root. his tree of keys is defined purely through the relationship between the branch followed in the tree, and the tree's root.nnn practical terms, it allows us to find any key in the tree by starting at the root, and calculating the intermediate key at each branch we follow, until we reach the leaf we are interested in.nn wonderful consequence of this is that we can start with a single source of entropy (a mnemonic, for eample), and from there build out a practically unlimited number of keys.nnn addition, by securely storing just the mnemonic, you have a backup of every key that your validator uses.nnhis idea is used in eth to allow a single mnemonic to generate as many keys as a validator needs. or eample, if you wanted to run  validators, you could use a single mnemonic to generate the withdrawal keys located atnnm/nn,nnm/nn,nnm/nn.nnm / ]nn/nn/nnm] - m / ]nnnnnnm / ]nnach branch is separated by ann/nnsonnm/nnmeans start with the master key and follow branch .nn nnstates that the validator's signing key is thennnnth child-branch of the withdrawal key. n practice this means that, when the standard is followed, if you know the private key for withdrawal, you can calculate the corresponding private key for signing.nnontinuing with the above eample, the signing keys would be found atnnm//nn,nnm//nn,nnm//nn.nnm / ] - m /  / ]nn/nn/nnm] - m / ] - m /  / ]nnnnnnm / ] - m /  / ]nnhile we tried to keep this eample as simple as possible, in practice the paths involved are a little longer (nn nnrequires usingnnm///i/nn, andnnm///i//nnfor withdrawal and signing keys respectively). evertheless, the logic remains the same.nnhe important thing to remember is that if you know the mnemonic, you can calculate your withdrawal keys, and from there derive your signing keys.nntoring keysnnalidator clients use keystores as a method for echanging keys.nneystoresnnare files that contain private keys encrypted with a user's password. hey can be safely stored and transferred between computers provided the password is not stored on the same computer.nnhen you are ready to start validating, you can give your client the keystores and the password encrypting them (it needs both pieces of information to import your keys).nnecoming a validatornnhe first step in becoming a validator is to generate the appropriate keys. hese will be generated once you've written down your mnemonic.nnince there are no withdrawals or transfers in phase , you do not need to have keystores for your withdrawal keys storing your mnemonic safely is sufficient.nns your validator clients need your signing keys, you will receive a keystore for each of your validators to store these keys.nnow it's deposit time! o become a validator, you will need to send   per validator in addition to yournndeposit datanncontaining all of your validator public keys.nnhe deposit data are then recorded in the deposit contract on eth. his contract is watched by eth nodes who are responsible for copying over the deposit data. nce your deposit data has been copied over, you are now officially a validator!nnecoming a validator the easy waynne're happy to announce that we've been working hard on a friendly interface to walk validators through this process. tay posted for an update shortly on what the th aunchpad is and how to use it!