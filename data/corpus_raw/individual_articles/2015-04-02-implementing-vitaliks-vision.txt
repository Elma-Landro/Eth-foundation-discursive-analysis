Titre: Implementing Vitalik’s vision\nAuteur: Taylor Gerring\nDate: April 2, 2015\nURL: https://blog.ethereum.org/2015/04/02/implementing-vitaliks-vision\nCatégorie: Non catégorisé\n\n==================================================\n\nlthough the core concept was proven last summer when lead developers italik uterin, avin ood, and effrey ilcke initiated the o (proof-of-concept) series in ython, ++, and o, a lot of engineering effort has gone to solidifying these implementations. e're all anious to release a stable command line client and issues flagged in the eternal audit are being resolved when uncovered. s soon as this process is complete, a general release should be around the corner. n the meantime, the rest of the ecosystem is continuing to evolve to more refined versions.nnne of the challenges with a project of this scope and compleity is simply agreeing on any particular thing. ranslating human abstractions into code is a tough task, asnneven the words we choosenninfluences different ways of epressing ideas with code. s we build more around these core ideas and truly eperience how reality meets theory, we’re able to refine the underlying specifications to remove ambiguity. his all pays off as the team shares a clean and well-understood vision that should translate effectively to other developers of varying disciplines.nnumber of git commits over timennomplementing this, a variety of test suites add an important level of confidence that the various implementations adhere to a specification. n the consensus front, we have used a series of  and tate tests to simulate known results and have added randomization and fuzzing to increase this testing space.  series of system and networking tests are also being run, ensuring clients communicate in an epected manner or respond to certain networking scenarios predictably.nnot only are tests designed for success, but all sorts of error conditions are fed into the test suites to ensure that known errors (such as running out of gas or being abruptly disconnected from a peer) are reported correctly. hat this means is that when changes are made to the behaviour of the clients, the decision is driven by data and metrics, rather than theory and gut feelings.nnraphing node connectivity allows us to visually inspect the health of networknneyond testing of the core components, we have begun implementing tests on the eterior layers to ensure that the clients respond to a multitude of calls to the underlying system in the same way with easily-consumable . hese specifications are linkednnin the wikinnand drive the implementation and communication across diverse teams. his helps to ensure that what is in our heads is reliably translated into code, and that all of this is tested and audited.nnll of these improvements are important to the health of the overlaying ecosystem and help shine a spotlight on otherwise very nuanced problems. n addition to refining the core virtual machine and serialization layers, security audits were initiated with a third-party firm eperienced in decentralization and cryptographic technologies.nn rough snapshot of development efforts.nno how does all of this underlying technobabble epose itself to the general user or the rontier rollout, we are aiming to release stable binaries on major operating systems (ac, indows, inu). he main interfaces will consist primarily of the command-line client, interactive avacript console, and -. n go-ethereum, we’ve recently renamed this client to “eth”, a nod to bothnnass ffectnnandnnld nglishnn.nnsing the command-line client will be a familiar process to many. or eample, you can create a new account withnngeth account newnn, at which point the program will prompt you for a password to secure the account. tarting geth as a miner can be done by calling it with a parameter, like sonngeth -minenn. his is a great way to start interacting with the system, but has its own set of limitations. or eample, once you’ve started mining, how does one pause itnnsing eth’s interactive avacript consolennor a more useful way to control the program, eth has a avacript console backed by annavacript nn. tart it with a simple commandnngeth consolenn. ith eth, this starts thenninteractive consolenn, giving users the familiarity of avacript scripting to control the system from the terminal. or eample, to find out a bit more about the local node, runnnadmin.nodenfo()nn.nnhis control is partly powered bynnethereum.jsnn, a avacript library that helps provide a friendly interface to not only the console, but also pps. t relies on a well-documentednn-nninterface for automated processing or integration into eisting infrastructure. ork on many of these components is ongoing as rigorous effort is being put in to ensuring that the implementations speak the same language and are as generally compatible as possible.nn quick view of build statusnnf course, all of this is built publicly on itub and includes various continuous integration aspects such as automated builds and reporting on major platforms. his is not a program defining a spec—this is a spec implemented and cross tested between machines and humans spanning the globe.nnoncurrently, work is progressing on several other components to the ecosystem, including  interfaces for ist (the pp browser) and i (the ). any of the tools we use and build upon are new and sometimes require patching upstream to ensure everything works as epected. his is a great benefit for all open source development, and one of the many positive byproducts of all the hours spent actually engineering software. lthough the wait may seem long, progress and ongoing confidence in the whole system is increasing steadily.nneyond the technical ins and outs of development, our communications team has continued interacting with the community to produce public education material like tutorials and videos. urthermore, our admin staff helps process payments and comply with various local laws including tedious things like employment taes.nnho needs sleepnneing part of the thereum project has been an eceptional eperience filled with ecitement. hat started as onlynnan ideannlittle more than a year ago has spawned an eceptional engineering effort led by professionals implementing all the necessary infrastructure required to build a revolutionary decentralized application platform.nnhen etfli introducednnhaos onkeynn, they asserted,nn“e have found that the best defense against major unepected failures is to fail often. y frequently causing failures, we force our services to be built in a way that is more resilient”nn. n the process of developing thereum, we’ve eperienced first-hand the benefits that come fromnncontinually straining a systemnn.nnnd while being tasked to craft the very platform that you dream about is a huge honour, we build it because we want it to eist. hanks for your patience as we think, sleep, eat, andnndogfoodnnthe platform. e're as anious as anyone to see what kind of apps will be launching after mainnet goes live!