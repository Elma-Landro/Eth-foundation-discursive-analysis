Titre: Ethereum DEV Update: C++ Roadmap\nAuteur: Christian Reitwiessner\nDate: February 12, 2016\nURL: https://blog.ethereum.org/2016/02/12/ethereum-dev-update-c-roadmap\nCatégorie: Non catégorisé\n\n==================================================\n\nlthough this is my first post in this blog, many people might already know me as the person behind olidity.  recently took on the lead of the ++ team and would like to share my vision for the future development.nnthereum is a free software project that anyone is free to use and improve. rom what we have seen at our conferences and meetups, there are so many people working on projects on top of thereum, but we only have a small team working on the actual platform. thereum should be an open project that is inviting for anyone to propose improvements, actually implement them and get them accepted.nns the new ++ team lead,  will do my best to get the entry barrier as low as possible not only for users (pp developers) but also for developers (platform developers). his is a necessary step, and  am convinced that this is the way software should be developed, especially software that aims to be beneficial to humanity as a whole.nnf course, the community can only support us, we cannot ask anyone to develop an important feature with a deadline in their free time. his is why the core team will focus on the key software components and many other things will be optional. e will drop any work duplicated between the o and ++ teams unless it is essential for finding consensus bugs and work hard to remove the invisible “language barrier” and bring the teams closer together to function as one cohesive team.nnhis means our priorities will be olidity and i (the  and smart contract debugger), while the ++ implementation of ethereum/web ("eth") will align its interface with the o implementation eth, so eisting front­ends like ist, the thereum wallet, the eth console and other tools can attach to both backends without changes.nnn the other hand, this means that we cannot support the development of the ++  lethero into a fully­fle dged pp browser and would be happy to see its unique features (mainly the blockchain eplorer) being integrated as a pp into ist.nnn a more technical side, our current roadmap is as follows, while most of the items for eth depend on our capacity and perhaps on how much help we get from eternal contributors.nnf you want to help, please read ournncontributors guidennor reach out for us onnngitternn.nnoliditynnhe general idea is to make olidity more fleible and allow generic data types to be implemented.nnpecific planned featuresnnanonymous functions to be used in internal callbacks for functions like map, reduce, sort and others, but also for asynchronous cross-contract (or cross-chain) callbacksnntype templates, especially for libraries to allow reusable data structuresnninline assemblynnnline assembly and type templates together will hopefully speed up the implementation of other features.nninnhe unique feature of i is its source-level olidity debugger. e plan to etend it so that you can also debug eisting contracts. urthermore, we want to integrate eisting solutions for package management and testing (dapple, truffle, embark, ...).nnpecific featuresnndebug past transactions in the live or a test chainnnrun javascript unit tests directly from the nngithub integration (load from / save to repository, load libraries directly from github)nnwhy (formal verification) integrationnnthnne will make eth more fleible and interoperable with other components of the thereum ecosystem. his allows us to remove features that are already implemented elsewhere, so that eth will be easier to build and maintain. urthermore, we can more easily target embedded devices and different platforms. e also want to make the just-in-time compiler available to other implementations.nnreduce eternal dependencies if possible, improve build processnnreplace eth console by nodejs application (will remove v as dependency) or "geth attach"nnfast syncnnimprove just in time compiler on small numbersnnstate trie pruningnnlight clientnnincorporate private / consortium chain eecutable flu into normal eecutable (depending on capacity)