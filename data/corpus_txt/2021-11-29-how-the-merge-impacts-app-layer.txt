Titre: How The Merge Impacts Ethereum‚Äôs Application Layer\nAuteur: Tim Beiko\nDate: November 29, 2021\nURL: https://blog.ethereum.org/2021/11/29/how-the-merge-impacts-app-layer\nCat√©gorie: Non cat√©goris√©\n\n==================================================\n\nthereum's transition to proof of stake -- he erge -- is near devnets are being stood up, specifications are being finalized and community outreach has begun in earnest. he erge is designed to have minimal impact on how thereum operates for end users, smart contracts and dapps. hat said, there are some minor changes worth highlighting. efore we dive into them, here are a few links to provide contet about the overall erge architecturennoadmap evolutionnnost-merge client architecturennhe rest of this post will assume the reader is familiar with the above. or those wanting to dig even deeper, the full specifications for he erge are available herennecution ayernnonsensus ayernnngine nnlock structurennfter he erge, proof of work blocks will no longer eist on the network. nstead, the former contents of proof of work blocks become a component of blocks created on the eacon hain. ou can then think of the eacon hain as becoming the new proof of stake consensus layer of thereum, superseding the previous proof of work consensus layer. eacon chain blocks will containnnecutionayloadsnn, which are the post-merge equivalent of blocks on the current proof of work chain. he image below shows this relationshipnnor end users and application developers, thesennecutionayloadsnnare where interactions with thereum happen. ransactions on this layer will still be processed by eecution layer clients (esu, rigon, eth, ethermind, etc.). ortunately, due to the stability of the eecution layer, he erge introduces only minimal breaking changes.nnining & mmer lock ieldsnnost-merge, several fields previously contained in proof of work block headers become unused as they are irrelevant to proof of stake. n order to minimize disruption to tooling and infrastructure, these fields are set to , or their data structure's equivalent, rather than being entirely removed from the data structure. he full changes to block fields can be found innn-nn.nnieldnnonstant valuennommentnnommersnn]nn(])  cnnommersashnndccdedecdaabbbccdadbafafddnn eccak((]))nndifficultynnnnnoncennnnecause proof of stake does not naturally produce ommers (a.k.a. uncle blocks) like proof of work, the list of these in each block (nnommersnn) will be empty, and the hash of this list (nnommersashnn) will become the -encoded hash of an empty list. imilarly, becausenndifficultynnandnnnoncennare features of proof of work, these will be set tonnnn, while respecting their byte-size values.nnmiashnn, another mining-related field, won't be set to  but will instead contain the beacon chain's  value. ore on this below.nnnn&nnnnopcodes changesnnost-merge, thennnnopcode will still be available for use, but given that it will no longer be forged through the proof of work hashing process, the pseudorandomness provided by this opcode will be much weaker.nnelatedly, thennnnopcode (nnnn) will be updated and renamed tonnnn. ost-merge, it will return the output of the randomness beacon provided by the beacon chain. his opcode will thus be a stronger, albeit still biasable, source of randomness for application developers to use thannnnn.nnhe value eposed bynnnnwill be stored in thennecutionayloadnnwherennmiashnn, a value associated with proof of work computation, was stored. he payload'snnmiashnnfield will also be renamednnprevandaonn.nnere is an illustration of how thennnn&nnnnopcodes work pre and post-mergennre-merge, we see thennnnopcode returns thenndifficultynnfield in the block header. ost-merge, the opcode, renamed tonnnn, points to the header field which previously containednnmiashnnand now stores thennprevandaonnvalue from the beacon chain state.nnhis change, formalized innn-nn, also provides on-chain applications a way to assess whether he erge has happened. rom the nndditionally, changes proposed by this  allow for smart contracts to determine whether the upgrade to the o has already happened. his can be done by analyzing the return value of thennnnopcode.  value greater thannn**nnindicates that the transaction is being eecuted in the o block.nnlock timennhe erge will impact the average block time on thereum. urrently under proof of work, blocks come in on average every ~ seconds with a fair amount of variance in actual block times. nder proof of stake, blocks come in eactly each  seconds ecept when a slot is missed either because a validator is offline or because they do not submit a block in time. n practice, this currently happens in % of slots.nnhis implies a ~ second reduction of average block times on the network. mart contracts which assume a particular average block time in their calculations will need to take this into account.nninalized locks & afe eadnnnder proof of work there is always the potential for reorgs. pplications usually wait for several blocks to be mined on top of a new head before treating it as unlikely to be removed from the canonical chain, or "confirmed". fter he erge, we instead have the concepts ofnnfinalizednnblocks andnnsafe headnneposed on the eecution layer. hese blocks can be used more reliably than the "confirmed" proof of work blocks but require a shift in understanding to use correctly.nn finalized block is one which has been accepted as canonical by / of validators. o create a conflicting block, an attacker would have to burn at least / of the total staked ether. hile stake amounts may vary, such an attack is always epected to cost the attacker millions of .nnnnsafe headnnblock is one which has beennnjustifiednnby the eacon hain, meaning that / of validators have attested to it. nder normal network conditions, we epect it to be included in the canonical chain and eventually finalized. or this block to not be part of the canonical chain, a majority of validators would need to be colluding to attack the network, or the network would have to be eperiencing etreme levels of latency in block propagation. ost-merge, eecution layer s (e.g.  ) will epose thennsafe headnnusing annsafenntag.nninalized blocks will also be eposed via  , via a newnnfinalizednnflag. hese can then serve as a stronger substitute for proof of work confirmations. he table below summarizes thisnnlock ypennonsensus echanismnn nnonditions for reorgnnheadnnroof of orknnlatestnno be epected, must be used with care.nnsafe headnnroof of takennsafennossible, requires either large network delay or attack on network.nnconfirmednnroof of orknn/nnnlikely, requires a majority of hashrate to mine a competing chain of depth  # of confirmations.nnfinalizednnroof of takennfinalizednntremely unlikely, requires / of validators to finalize a competing chain, requiring at least / to be slashed.nnote the   specification is still under active development. aming changes should still be epected.nnet tepsnne hope this post helps application developers prepare for the much-anticipated transition to proof of stake. n the net few weeks, a long-lived testnet will be made available for testing by the broader community. here is also an upcomingnnerge community callnnfor infrastructure, tooling and application developers to ask questions and hear the latest technical updates about he erge. ee you there üëãüèªnnhank you to ikhail alinin, anny yan & att arnett for reviewing drafts of this post.