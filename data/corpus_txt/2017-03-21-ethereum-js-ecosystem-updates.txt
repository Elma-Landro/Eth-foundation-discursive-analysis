Titre: Ethereum JS Ecosystem Updates\nAuteur: Martin Becze\nDate: March 21, 2017\nURL: https://blog.ethereum.org/2017/03/21/ethereum-js-ecosystem-updates\nCatégorie: Non catégorisé\n\n==================================================\n\nt's been a fairly busy for the last couple of months for the thereum javascripters. o start with, there was a really great hackathon with . ou can read an inlay's ecellent write upnnherenn.nnlso, during this time aron avis (nnumavisnn) made some ecellent progress towards a  light client by utilizing 'snnlibppnnto build a in-browser mesh network andnnnnto provide the merklization layer. his will be important work in the future for building pure in-browser clients. lsonnasey etrionnworked on a standard json  test suite, which you can see the results ofnnherenn.nnfter the eattle eetup, we (nnicnnandnnanderernn) sat down for a week long hackathon in udapest to hash out some details ofnnewasmnn. lsewhere in  world, abian is doing a huge refactor of eb.js for the . release, while ick odson has been busy withnnethjsnn. he rest of this post will be charting the various projections that this technology could provide as well as going into some details about each individual project. ll these projects are all open source and encourage community participation, so if you are interested please check them out, say hello and send in a  if you have time!nnnnwasm’snngoal is to research and replace the  withnnebassemblynnand secondarily, implement a client for the current system which can be efficiently ed (ornntranscompilednn) to ebssembly.nn major piece of evaluating ebssembly for blockchain usage will be create a test network and this year the focus of the wasm team will be bringing that test network to life. he testnet work willnnenable hands-on work with ewasm for a wider audiencennenable related work, such as eperiments with casper to be done by providing a fleible platform for eperimentationnnhe ewasm track is dedicated to ewasm research and development, while the client integration track will be dedicated to developing the network and bring full and light clients into eistence. ut there are many shared components to these two tracks. he wasm project is being broken down into two main components thennernel ayernn, which handles  and manages the state, and the core . his should enable us to use the same framework for different  implementations.nno to recap, the major tasks for ewasm arennuild an ewasm test networknnreating a reusable “kernel” modulennevamp ethereumjs-vmnnse ewasm-kernel for the message passingnnmplement the latest snnwasm integration toolsnnolidity-ewasm integration (upcoming effort for the solidity hackathon!)nnlease come join the implementation effort! e have semi-weekly meetings on uesdays. ur communication channel is on atri atnnprimamatri.orgnn(or #ewasm on  or atnngitternn)nnetworkingnnhere are several reasons to have an thereum networking implementation in . or one, it would allow us to implement a full and light thereum  node. hese light clients would run both in a node.js environment and in a browser.  prerequisite for an in-browser light client is “bridge” nodes. hese nodes might also act asnnsignaling serversnnfor thennwebrtcnnnetwork that the browser light clients would use to relay  messages from the  network to the webrtc network. his work is being spearheaded by etamask using ’s libpp. lso thennnnimplementation was recently revamped bynnfanatidnn.nnnnthereum’s blockchain and on-chain state can be understood as a graph of hash-linked data.nn/nnis proposed as a generic system to describe and distribute hash-linked data. herefore we can describe thereum as an application layer on top of the hash-linked data availability platform. s a proof of concept,nnumavisnnimplementednn resolversnnfor the thereum data formats that define where hash-links are encoded inside the canonical thereum formats (e.g. block and state trie node). his, combined with other generic features of libpp (’s generic pp networking stack), enables the creation of minimal thereum clients that focus on the consensus protocol and state transition mechanism. ne advantage of this approach is that the networking layer is transport-agnostic and can be used in environments that don’t have access to tcp/udp (such as the browser) that the standard thereum clients require. his project is still in the research phase. etaask hopes to use this approach to implement a browser compatible thereum light client via a secondary network, bridged by hybrid nodes.nneb.js . incoming!nn new version of web.js is in the making. t is the biggest refactor of the codebase since the inception of the popular thereum library. tnnwill have a lot of convenience features like confirmation and receipt event on transactions, a nice subscription , and checksum checks on address inputs.nnhe  is still not yet finalized, but if you are eager to have a look you can check out the docsnnherenn.nnhe new version will also have quite a few breaking changes, but those updates are necessary to get the new  right and remove some some deprecated methods along the way, like synchronous calls. . will only havennpromisesnnand in some events “romisevents” to better reflect multiple events on a transaction's eecution. or those who are thinking of transitioning their apps to the new web, there will be a migration guide upon launch to help make the transition from .. as easy as possible.nnn ist there will be no web eposed by default anymore, as this encourages the bad habit of relying on the ist-provided web, which makes breaking changes disastrous for dapps. nstead, there will be an “ethereumrovider”, which libraries like web can use to talk to the underlying node. eb.js will automatically detect any given provider and epose it on its  for easy instantiation.nnor those who can’t wait and want to try it right now, checkout the . branch in thennweb.js reponn. e aware there might be dragons!nnthjsnnthjsnnis a new highly optimised, light-weight  utility fornnthereumnngeared to working with the json , much like web.js but lighter, async only and usingnnbn.jsnn. he current ongoing activity includesnndding the  methods for decoding logs in ethjs-abinnaving fied a small decoding bug in ethjs-abi (handling  addresses)nnerged new schema for personal recover and sign ethjs-schemannooking for help making ethjs-filter stateless (infura ready)nnug fiing in ethjs-contractnnocumentation updates all aroundnnpcoming ethjs version .. release!nnestnnorking on the .. release! his release will includennatabase persistence. ow you can create a test chain and save that data, just like any other private chain!nnlean up of how data is stored in memory, which should reduce memory issues significantly. lthough there will be a slight cost in some performance, which mostly be unnoticeable unless you’re making thousands of transactions, it will bring a huge increase in stability.nnundling for the browser (provider only).nnasier installs on indows, and possibly other platforms.nne’ll be moving the est to thennruffle github organizationnnsince it’s primarily maintained by ruffle developers. here are significant new est add-ons coming. nd we're investing significant energy in documentation and branding that unifies it under the ruffle brand. ny feedback on this move is appreciated.  astly, the est needs a new name that eudes everything it can do. f you have an idea let us know!nnommunitynnhe thereum  community is an eciting and wonderful thing to be a part of. here are many great projects happening. f you are interested in plug in we have weeklyriday meetings at   /   /  . atchnnour gitter channelnnfor the chat link. lso, we are organizing annnupcoming hackathonnn. et us know if you are interested.nnnnar. , ] ote that some of the projects in this post are not directly supported by thereum oundation, but have been included as they are relevant to the overall thereum  ecosystem update by the author.