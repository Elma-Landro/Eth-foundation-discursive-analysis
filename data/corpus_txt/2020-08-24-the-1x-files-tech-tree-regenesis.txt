Titre: The Stateless Tech Tree: reGenesis Edition\nAuteur: Griffin Ichiba Hotchkiss\nDate: August 25, 2020\nURL: https://blog.ethereum.org/2020/08/24/the-1x-files-tech-tree-regenesis\nCatégorie: Non catégorisé\n\n==================================================\n\nhis week we're revising thennech reennto reflect some new major milestones to thereum . & that are not quite a complete realization of tateless thereum, but much more reasonably attainable in the mid-term. he most significant addition to the tech tree is leey's reenesis proposal. his is far from a well-specified upgrade, but the general sentiment from & is that reenesis offers a less dramatic yet much more attainable step towards the ultimate goal of the "fully stateless" vision. n many ways complimentary to reenesis is a static state network that would help distribute state snapshots and historical chain data in a bittorrent-style -based network. t the same time, more near-term improvements like code merkleization and a binary trie representation of state are getting closer and closer to being -ready. elow, 'll eplain and clarify the changes that have been made, and link to the relevant discussions if you'd like to dive deeper on any particular feature.nninary riennhile thereum currently uses a hearynnerkle-atricia riennto encode state, there are substantial efficiency gains to be had by switching to a binary format, particularly in the anticipated size of witnesses.  complete re-encoding of thereum's state requires the new format to be specified, and a clear strategy for transition. inally, it needs to be decided whether or not smart contract code will also be merkleized, and if that should be incorporated into the binary trie transition or as a standalone change.nninary rie ormatnnhe general idea of a binary trie is a bit simpler (pun intended )) than thereum's current heary trie structure. nstead of having one of  possible paths to walk from the root of the trie down towards child nodes, a binary trie has . ith a complete re-specification of the state trie comes additional opportunity to improve upon well-established inefficiencies that have made themselves known now that thereum has been in operation for more than  years. n particular, it might be an opportunity to make the state much more amenable to the real-world performance challenges of database encoding (outlined innna previous article on state growthnn).nnhe discussion on a formal binary trie specification and merkleization rules can be foundnnon ethresearchnn.nninary rie ransitionnnt's not just the destination (binary trie format) that's important, but the journey itself! n an ideal transition there would be no interruption to transaction processing across the nework, which means that clients will need to build the new binary triennat the same timennas handling new blocks rolling in every  seconds. he transition strategy that continues to look the most promising is dubbed thennoverlay methodnn, which is based partially on geth's new snapshotting sync protocol. n short summary, new state changes will be added to the eisting (heary) trie in a binary format, making a sort of binary/heary hybrid during the transition. he un-touched state is converted as a background process. nce the conversion is complete, the two layers get flattened into a single binary trie.nnt's important to note that the binary transition is one contet in which client diversity is very important. very client will need to either implement their own version of the transition or rely on other clients to convert and wait for the new trie on the other side of conversion. his will definitely be a 'measure twice, cut once' sort of situation, with all client teams working together to implement test, and coordinate the switchover. t is possible that in the interest of safety and security, the network will need to briefly suspend service (e.g. mine a few empty blocks) over the course of the transition, but agreeing on any specific plan is too far out to predict at this time.nnode erkleizationnnmart ontract code makes up a significant portion of the thereum state trie (around   of the ~ of state).  witness for any smart contract interaction will necessarily have to provide the code it's interacting with to calculate anncodeashnn, and that could be quite a lot of etra data. ode erkleization is a means of splitting up contract code into smaller chunks, and replacingnncodeashnnwith the root of another merkle trie. oing so would allow a witness to replace potentially large portions of smart contract code with reference hashes, shaving off crucial kilobytes of witness data.nnhere are a few approaches to code merkleization schemes, which range from chunking universally (for eample, into  byte pieces) on the simple side to more comple methods like static analysis based on olidity'snnfunctiondnnornnnninstructions. he optimal strategy for code merkleization will ultimately rely on what seems to work best with real data collected from mainnet.nnreenesisnnhe best place to get a handle on the reenesis proposal isnnthis eplanation by mandriginnnornnthe full proposal by realedgerwatchnn, but the  is that reenesis is essentially "spring cleaning for the blockchain". he full state would be conceptually divided into an 'active' and an 'inactive' state. eriodically, the entire 'active' state would be de-activated and new transactions would start to build an active state again fromnnalmostnnnothing (hence the name "reenesis"). f a transaction needed an old part of state, it would provide a witness very similar to what would be required for tateless thereum a erkle proof proving that the state change is consistent with some piece of inactive state. f a transaction touches an ‘inactive’ portion of the state, it automatically elevates it to ‘active’ (whether or not the transaction is successful) where it remains until the net reenesis event. his has the nice property of creating some of the economic bounds on state usage that state rent had without actually deleting any state, and allowing transaction sender unable to generate a witness to just blindly keep trying a transaction until everything it touches is ‘active’ again.nnhe fun part about reenesis is that it gets thereum much closer to the ultimate goal of tateless, but sidesteps some of the largest challenges with tatelessness, i.e. how witness gas accounting works during  eecution. t also gets some version of transaction witnesses moving around the network, allowing for leaner, lighter clients and more opportunity for dapp developers to get used to the stateless paradigm and witness production. "rue" tatelessness after reenesis would then be a matter of degree tateless thereum is really just reenesis after each and every block.nntate etworknn better network protocol has been a 'side-quest' on the tech tree from the beginning, but with the addition of reenesis to the scope of tateless thereum, finding alternative network primitives for sharing thereum chain data (including state) now seems to fit a lot better into the main quest. thereum's current network protocol is a monolith, when in fact there are several distinct types of data that could be shared using different 'sub-networks' optimized for different things.nnreviously, this has been talked about as thenn"hree etworks" on earlier tateless callsnn, with ann-basednnnetwork able to more effectively serve some of the data thatnndoesn't change from moment to momentnn. ith the introduction of reenesis, the 'inactive' state would fit into this category of unchanging data, and could be theoretically served by a bittorrent-style swarming network instead of piece-by-piece from a fully synced client as is currently done.nn network passing around the un-changing state since the last reenesis event would be annstatic state networknn, and could be built by etending the newnniscovery v. spec in the devpp librarynn(thereum's networking protocol). revious proposals such asnnerry-go-ound syncnnand the (more mature)nn protocolnnfor syncingnnactivennstate would still be valuable steps toward a fully distributednndynamic state networknnfor clients trying to rapidly sync the full state.nnrapping upnn more condensed and technical version of every leaf in the tateless ech ree (not just the updated ones) is available onnnthe tateless thereum specs reponn, and active discussions on all of the topics covered here are in the th/ & iscord – please ask for an invite on ethresear.ch if you'd like to join. s always, tweet gichiba or ancock for feedback, questions, and suggestions for new topics.