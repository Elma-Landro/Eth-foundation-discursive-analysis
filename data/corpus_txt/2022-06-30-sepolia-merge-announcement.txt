Titre: Sepolia Merge Announcement\nAuteur: Protocol Support Team\nDate: June 30, 2022\nURL: https://blog.ethereum.org/2022/06/30/sepolia-merge-announcement\nCatégorie: Non catégorisé\n\n==================================================\n\notennnnon uly , , the recommended releases for go-ethereum and rigon were modified. ee "lient eleases" for details.nnepolia will be the second of three public testnets to run through he erge.nnhe network will transition to proof-of-stake when the total difficulty on the proof-of-work chain eceedsnn,,,,,nn, which is epected to occur around in the net few days.nnost-merge, epolia will have a permissioned validator set, like eisting proof-of-authority testnets. oerli/rater, which will merge at a later date, will maintain an open validator set to allow for stakers to test the transition.nnackgroundnnfter years of work to bring proof-of-stake to thereum, we are now well into the final testing stage testnet deployments!nnith opsten already transitioned to proof-of-stake and shadow forks continuing regularly, epolia is now ready for he erge. fter epolia, only oerli/rater will need to be merged before moving to mainnet. ther testnets will be considered deprecated post-merge, as eplainednnin a recent postnn.nnhe erge is different from previous thereum upgrades in two ways. irst, node operators need to update both their consensus layer () and eecution layer () clients in tandem, rather than just one of the two. econd, the upgrade activates in two phases the first at an epoch height on the eacon hain and the second upon hitting annotal ifficultynnvalue on the eecution layer.nnepolia has already run through the ellatri upgrade on the eacon hain. e now announce the details of the second phase of the transition hitting thennerminal otal ifficultynn.nnpgrade nformationnnimingnnhe ergennis a two-step process. t starts with a network upgrade on the consensus layer, triggered by an epoch height. his is followed by the eecution layer's transition from proof-of-work to proof-of-stake, triggered by a specificnnotal ifficultynnthreshold, called thennerminal otal ifficultynn(nnnn).nnnnnune , nn, at epochnnnn, thennellatrinnupgrade prepared the epolia eacon hain for he erge. t that point,  clients began listening for annnnvalue to be hit on the proof-of-work chain.nnecause the hash rate of proof-of-work testnets is very volatile, thennnnvalue was first set to an eceedingly high value,nnnn. t epolia's current hash rate, it would take hundreds of years to reach this value.nnith ellatri now live, an updatednnnnvalue ofnnnnhas been chosen for the transition. t is epected to be hit within the net few days. hen this newnnnnis hit or eceeded, the eecution layer part of the transition, codenamednnarisnn, will start. gain, note that hash rate on epolia is notoriously variable, so the actual time at which thennerminal otal ifficultynntakes place may fluctuate.nnnce the eecution layer has eceeded thennnn, the net block will be solely produced by a eacon hain validator. e consider he erge to have been completed once the eacon hain has finalized this block. ssuming normal network conditions, this should happen  epochs, or approimately  minutes, after the first post- block is hit!nn new - block tag,nnfinalizednn, returns the latest finalized block or an error if no such post-merge block eists. his tag can be used for applications to check if he erge has been completed. imilarly, smart contracts cannnquery thennnnopcode (nnnn)nn, renamed tonnnnpost-merge, to determine if he erge has happened. e recommend infrastructure providers monitor overall network stability in addition to finalization status.nnlient eleasesnnhe following client releases support he erge on the epolia testnet. ode operators must runnnbothnnan eecution and consensus layer client to remain on the network during and after he erge.nnhen choosing which client to run, validators should be especially mindful of the risks of running a majority client on both the  and . n eplainer of these risks and their consequences can be foundnnherenn. n estimate of current  and  client distribution and guides for switching from one client to another can be foundnnherenn.nnonsensus ayernnamennersionnninknnighthousenn..-rc.nnownloadnnodestarnn..-rc.nnownloadnnrysmnn..-rc.nnownloadnnimbusnn..nnownloadnnekunn..nnownloadnnecution ayernnamennersionnninknnesunnee "esu ote" belownnee "esu ote" belownnrigonnnv..nnownloadnngo-ethereum (geth)nnv..nnmasternnee "eth ote" belownnethermindnn..nnownloadnnesu otennto be compatible with the epolia merge, esu users will need to perform a manualnnerminal otal ifficultynnoverride. o do so, users should run the latest esu release,nn..nnas of the publication of this post, and do the followingnnf using  configuration files, add the following linennoverride-genesis-config"terminalotalifficulty"]nnf starting the node using the , add the following flagnn--override-genesis-config"terminalotalifficulty"nnore information about overriding the  can be found in thennopsten  nnouncementnn.nneth otenna regression introduced in go-ethereum v.. makes it unsuitable for use as part of the epolia merge. sers of eth should instead run thennmasternnbranch until a new release is out. nstructions to do so are availablennherenn.nnpgrade pecificationsnnonsensus-critical changes for he erge are specified in two placesnnhe consensus layer changes, under thennbellatrinndirectorynnof the consensus-specs repositorynnhe eecution layer changes, under thennarisnnspecnnin the eecution-specs repositorynnn addition to these, two other specifications cover how the consensus and eecution layer clients interactnnhe ngine , specified in thenneecution-apis repositorynn, is used for communication between the consensus and eecution layersnnptimistic ync, specified in thennsyncnnfolder of the consensus-specs repository, is used by the consensus layer to import blocks as the eecution layer client is syncing and to provide a partial view of the head of the chain from the former to the latternnnns a node operator, what should  donnost-merge, an thereum full node will combine a consensus layer client, which runs the proof-of-stake eacon hain, and an eecution layer client, which manages the user-state and runs the computations associated with transactions. hese communicate over an authenticated port using a new set of   methods called thennngine nn. he  and  client authenticate each other using a  secret.nnode operators should refer to their clients' documentation for instructions about how to generate and configure these.nnn other words, if you were already running a node on the eacon hain, you now also need to run an eecution layer client. imilarly, if you were running a node on the current proof-of-work network, you will need to run a consensus layer client. or them to communicate securely, a  token must be passed to each client.nnt is worth emphasizing that while they are both part of consensus layer client releases, running a eacon ode is distinct from running a alidator lient. takers must run both, but node operators only need the former.nnhis postnneplains the difference between both components in more detail.nnlso, note that each layer will maintain an independent set of peers and epose its own s. henneaconnnandnn nns will both continue working as epected.nns a staker, what do  need to donnepolia's validator set is permissioned, so unless you have already been included as a epolia validator, no action is required.nnoerli/rater's transition to proof-of-stake, which will be announced at a later date, will be open to all validators. elow are some notes to prepare for this. gain, no action is required now.nns eplained above,nnvalidators on the eacon hain will need to run an eecution layer client after he erge, in addition to their consensus layer clients.nnre-merge, this was strongly recommended, but validators could have outsourced these functions to third-party providers. his was possible because the only data required on the eecution layer were updates to the deposit contract.nnost-merge, validators need to ensure that transactions in blocks that they create and attest to are valid. o do this, each beacon node must be paired with an eecution layer client. ote that multiple validators can still be paired to a single beacon node & eecution layer client combo. hile this epands validators' responsibilities, it also gives a validator who proposes a block the right to its associated transaction priority fees (which currently go to miners).nnhile validator rewards accrue on the eacon hain and will require a subsequent network upgrade to be withdrawn, transaction fees will continue to be paid, burned, and distributed on the eecution layer. alidators can specify any thereum address as a recipient for transaction fees.nnfter updating your consensus client, be sure to set thennfee recipientnnas part of your validator client configurations to ensure transaction fees are sent to an address you control.nnf you have staked using a third-party provider, it is up to your selected provider to specify how these fees are allocated.nnf you would like to test running a validator on post-merge thereum, instructions are available on thennopsten staking launchpadnn.nns an application or tooling developer, what should  donnith he erge going live on epolia, now is the time to ensure that your product works as epected through the proof-of-stake transition and in a post-merge contet. s eplained in annprevious postnn, he erge will have only minimal impact on a subset of contracts deployed on thereum, none of which should be breaking. dditionally, the lion's share of user  endpoints remain stable (unless you use proof-of-work specific methods such asnneth_getorknn).nnhat said, most applications on thereum involve much more than on-chain contracts.nnow is the timennto ensure that your front-end code, tooling, deployment pipeline and other off-chain components work as intended. e strongly recommend that developers run through a complete testing & deployment cycle on opsten (ornnilnnn) and report any issues with tools or dependencies to those projects' maintainers. f you are unsure where to open an issue, please usennthis repositorynn.nndditionally, you should note that all testnets aside from epolia and oerli will be deprecated post-merge. f you are a user of opsten, inkeby or iln, you should plan to migrate to oerli or epolia. ore information about this can be foundnnherenn.nns an thereum user or ther holder, is there anything  need to donno. he thereum mainnet is not affected by this testnet. ubsequent announcements will be made on this blog before mainnet's transition.nns a miner, is there anything  need to donno. f you are mining on the thereum mainnet or epolia, you should be aware that each network will operate entirely under proof-of-stake after he erge. t that point, mining will no longer be possible on the network.nnhis is epected in the net few days on epolia and later this year for the thereum mainnet.nns a validator, can  withdraw my stakenno. he erge is the most complicated upgrade to thereum to date. o minimize risks of network disruptions, a minimal approach was taken which ecluded any non-transition changes from this upgrade.nnithdrawals from the eacon hain will likely be introduced in the first upgrade after he erge. pecifications for both thennconsensusnnandnneecutionnnlayers are in progress.nn have more questions, where can  ask themnnnnerge ommunity allnnis scheduled for uly ,  . lient developers and researchers will be available to answer questions from node operators, stakers, infrastructure & tooling providers and community members.nnwen mergenns of the publication of this post, the date for the thereum mainnet proof-of-stake transition hasnnnotnnbeen set. ny source claiming otherwise is likely to be a scam. pdates will be posted on this blog. lease stay safe!nnssuming no issues are found with epolia, once client testing is complete, thereum's other  testnet, oerli, will run through he erge with the rater  testnet. nce oerli/rater have successfully transitioned and stabilized, an epoch will be chosen for the ellatri upgrade on the mainnet eacon hain and anndifficulty valuennwill be set for the mainnet transition. lients will then make releases that enable he erge on mainnet. hese will be announced on this blog and in other community publications.nnhis assumes no issues are found. owever, if issues are found at any point in the process or test coverage is judged to be insufficient, these things will be addressed before continuing with the deployment process.nnnly then will it be possible to estimate the eact date for he erge.nnn other words, 🔜.nnhank you tonnustin hrnnnfor the cover image.