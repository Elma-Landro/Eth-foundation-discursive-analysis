Titre: Geth 1.6 - Puppeth Master\nAuteur: Péter Szilágyi\nDate: April 14, 2017\nURL: https://blog.ethereum.org/2017/04/14/geth-1-6-puppeth-master\nCatégorie: Non catégorisé\n\n==================================================\n\nramming in a lot more goodies than originally anticipated, the o thereum team is proud to finally deliver the first incarnation of the . eth release series! limpsing through thenncommit listnn, this is going to be a monster post!nnoml configuration filesnnor a very long time now, people were requesting that we support configuration files to aid in switching between different public and pirate chains. e didn't focus much on private networks, so we've always pointed people towards using shell scripts in those cases. lthough they are suitable for many scenarios, shell scripts aren't portable across different operating systems, especially ni and indows.nny popular demand, we've reworked the entire configuration and flag handling for eth ., finally landing support for this much requested feature. he configuration file uses thennnnformat and the fields that can be set map one-to-one to the config structuresnngo-ethereumnnuses internally. ertain fields have been omitted to prevent sensitive data circulating in configuration files.nniguring out how to create a "proper" config file for your node with all the correct fields set up just the way you'd like it - whatever the field names even are - can be daunting. nstead, eth . ships with a command that you can invoke to print the eact config file you'll need based on your custom invocation flags (nngeth --your-favorite-flags dumpconfignn). his dump can then be loaded up vianngeth --config yourfile.tomlnn. e're also planning to allow embedding the genesis configurations, but that needs a bit more thought to finalize.nnure o ethashnnince the very beginning, thereum had ann ethashnnimplementation, shared between the various clients. his helped reduce maintenance efforts while the algorithm was evolving, at the epense of adding a big chunk of non trivial  code tonngo-ethereumnn.nnhis began to hurt more and more as time progressed. ithout  knowledge on the o thereum team, we couldn't properly handle performance issues and inherently couldn't implement optimizations essential for mobile devices. he design of the  ethash prevents it from running on big endian processors that would require invasive redesign. astly, depending on  code significantly hurts our portability and maintainability.nntarting with eth ., we've deprecated our use of the original  ethash and reimplemented it fully in o. his permits us to generate mining s concurrently on all available s, rotate old mining s out instead of storing them indefinitely, use memory mapped verification caches essential for fast mobile startup times, and run on any platform o supports. or details, performance numbers and  flags, please consult thennpure o ethash nn.nnouter  compatibilitynne've always taken pride in supporting thenngo-ethereumnncodebase on a variety of eotic platforms, which were severely limited by the weight of a full node. owever, with the light client slowly maturing, it makes more and more sense to epand our platforms towards previously unfeasible directions.nnith the . release family of eth, we are further pushing the envelope by introducing support for  s, most commonly found in consumer router devices. eth . runs on both  bit and  bit  s in both little endian and big endian mode (courtesy of our new ethash code). ou can find pre-built stable and develop binaries for these s s on ournndownloads pagennfrom now on.nnlthough we've successfully put annconsumer router on the mainnetnn, there's still much to do make the eperience smooth. he most notable bottleneck is the memory hardness of ethash, requiring non-negligible amounts of storage and memory capacity... one more reason to switch to o! )nnlugable consensus enginesnnver the last few releases we've been slowly working towards abstracting consensus related concepts in our codebase, with the long term goal of preparing for asper and proof-of-stake. t was a lower priority feature as there were so many other tasks hanging around. riorities changed when the opsten testnet was spammed to an unusable state.nnhe root cause of the attack's success was that a proof-of-work network is only as secure as the computing capacity placed behind it. estarting a new testnet from zero wouldn't solve much, since an attacker could mount the same attack over and over again. he time seemed ripe to put some effort into the consensus model withinnngo-ethereumnnand allow using alternatives to proof-of-work for smaller networks, where a different security model is more suitable.nnhe result is that eth . features a plugable consensus model where developers, wanting to roll their own fork of thereum with wildly different ways of agreeing on block validity, can now do so by implementing a simplenno consensus engine interfacenn. he current ethash backed proof-of-work consensus model is alsonn"just" another implementationnnof this interface.nnlique o (proof-of authority) protocolnnith the old opsten testnet down the drain, different groups scrambled to create a new testnet that would suit them, but may or may not suit others much. hese effortsnngave birth to a reverted opsten testnet from the arity team (relying on custom soft-fork code, bootnodes and blacklists) and the ovan testnet from a arity conglomerate (relying on a then undocumented arity consensus engine). oth solutions lock out other clients.nnur solution was to propose a cross client proof-of-authority consensus engine callednnlique ( )nn. he main design considerations behind lique were simplicity (i.e. minimize the burden of adding to different clients) and compatibility (i.e. support eisting sync techs innnallnnclients). he proposal was accepted by all client developers on thennth of arch, nn.nnith our .. release,nngo-ethereumnnalso features annfull implementationnnof the lique proof-of-authority consensus engine. n addition to all the consensus related functionality, the engine also supports customizable block times for private network scenarios. s to how you can create your own lique network... )nnuppeth network managernno younnlikennsetting up a private network on't answer that! ruth be told, if you've ever tried to set up your own private thereum network - whether for friendly fun, corporate work, or hackathon aid - you'll certainly know the pain it takes to do so. onfiguring a genesis block is one thing, but when you get to bootnodes, full nodes, miners and light clients, things start to wear thin fast... and we haven't even talked about monitoring, eplorers, faucets, wallets. t's a mess.nneth . ships a new tool callednnpuppethnn, which aims to solve this particular pain point. uppeth is a  wizard that aids in creating a new thereum network down to the genesis, bootnodes, signers, ethstats, faucet, dashboard and more, without the hassle that it would normally take to configure all these services one by one. uppeth uses ssh to dial into remote servers, and builds its network components out of docker containers using docker-compose. he user is guided through the process via a command line wizard that does the heavy lifting and topology configuration automatically behind the scenes.nnuppeth is not a magic bullet. f you have large in-house thereum deployments based on your own orchestration tools, it's always better to use eisting infrastructure. owever, if you need to create your own thereum network without the fuss, uppeth might actually help you do that... fast. verything is deployed into containers, so it will not litter your system with weird packages. hat said, it's uppeth's first release, so tread with caution and try not to deploy onto critical systems.nninkeby test networknns mentioned in this post already, the opsten testnet fell apart a few months back. here arennongoing effortsnnto revive it as it's a valuable component of the thereum ecosystem. hat said, we find it essential to provide developers with a network they can rely on, one that cannot be attacked so easily. ne such network is the second half of thenn nnproposal, the inkeby testnet.nnn the th of pril we launched thennalphannversion of inkeby, a new proof-of-authority testnet based on the lique protocol. inkeby is currently upheld by three () oundation signing nodes, but we eagerly look forward to promote eternal entities too, so that the network's resiliency may be furthered. he network also features a public itub authenticated faucet that is accessible to everyone under the same conditions. s to why it's annnalphannversion, inkeby is the first live incarnation of lique and we have yet to see how it fares under global load.nno, how can you access it eing alpha, we didn't yet add a flag for it into eth ., however we went out of our way to make it beyond trivial do connect and use it... via it's own website atnnhttps//www.rinkeby.io/nn! ashboard, ethstats, faucet and connectivity tutorials for eth, allet/ist and ndroid/i! f you're wondering how we made all this, uppeth of course! hisnnisnnwhat uppeth was born for, and you can have the same for your own private networks too!nnounting swarm datannf you've used our eperimental swarm implementation before, you'll know that operating with files is easy enough, but when it comes to working with entire folders - possibly nested - it can become cumbersome. ine for a program, but less so for manual user interaction.nno try and address this shortcoming, the warm implementation shipped with our current release features a few milestone features, notably the ability to upload and download entire directories via tarball streams in the  interface, as well as mounting an entire folder into your local filesystem via ! his should make warm a lot more viable both for file backup purposes as well as for easily eploring comple directory structures.nnpart from these neat features, warm saw various stability improvements and bugfies, gained the ability to manipulate manifests via the command line, as well as to create listings/sitemaps out of them.nn bit gas calculationsnnhe thereum ellow aper specifies that gas included with transactions can be an arbitrary value up to the ludicrous amount of ^ (which could cover almost as many transactions as the number of atoms in the known universe). s such, thenngo-ethereumnn was implemented to work with these insanely large numbers for gas calculations, causingnnequally large performance penalties while running every transaction.nns there is simply no meaningful reason to use big-number arithmetic for gas calculations, eth . switched over to working with -bit values, which is a native hardware-supported type on any modern . f you are wondering whether this would pose any limitation, a single block with a gas limit of -bits could fit in  times more transactions than the number of red blood cells in the human body.  think we're safe for the foreseeable future.nnegarding performance improvement, we don't have an eact number, but it is safe to say that shaving off hundreds of memory allocations per every single transactions can't be a bad thing.nnlosing remarksnnesides all the highlighted features mentioned above, annnumerous number of bug fies have also been merged in, ranging from ethstats reporting, to singleton miner networks, star topology propagation fies and more. lease check thenneth .. release notesnnfor a condensed rundown.nnther smaller features include constant improvements to the light protocol, heavy development in the hisper protocol (getting very close to a public v release), and we've even swapped out our entire logging system to a much nicer and more robust version.nns always, you can install eth via yournnfavorite package managernn, or download a pre-built binary for annvariety of supported platformsnn.nnappy puppetheering! he go-ethereum uthors.nn nniven the nature of this release, which includes heavy rework around gas calculations in the thereum virtual machine and heavy refactors around plugable consensus engine split, we asknnproductionnnusers to eercise caution and care when upgrading. e consider eth . as a pre-release until large scale stability is confirmed.*nnt is important for allnnproductionnnusers to understand the risks involved in new releases such as this one. here may be undetected bugs and unepected consequences that could lead to loss or other unwanted results. his release is for sophisticated production users who understand the eth platform, the impact it may have on the users and the risks that new releases of this nature involve.