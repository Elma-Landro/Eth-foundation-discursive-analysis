Titre: On Mining\nAuteur: Vitalik Buterin\nDate: June 19, 2014\nURL: https://blog.ethereum.org/2014/06/19/mining\nCatégorie: Non catégorisé\n\n==================================================\n\necentralization, n.nnhe security assumption that a nineteen year old in angzhou and someone who is maybe in the , and maybe not, have not yet decided to collude with each other.nnhere has been a large amount of ruckus in the past week about the issue of mining centralization in the itcoin network. e saw a single mining pool, ash.io, amass over % hashpower for many hours, and at one point even grow to become % of the entire network. he entire front page of the itcoin reddit was ablaze in intense discussion and a rare clash of complacency and fear, miners quickly mobilized to take their hashpower off ash, and surprisingly clever strategies were used in an attempt to bring back the balance between the different pools, up to and including one miner with "between  /s and  /s" mining at ash butnnrefusing to forward valid blocksnn, essentially sabotaging all mines on the pool to the etent of up to %. ow, the situation has somewhat subsided, with ashnndown to % network hashpowernnand the runner up, iscus ish, up to %, and it is likely that the situation will remain that way for at least a short while before things heat up again. s the problem solved f course not. an the problem be solved hat will be the primary subject of this post.nnitcoin iningnnirst of all, let us understand the problem. he purpose of itcoin mining is to create a decentralized timestamping system, using what is essentially a majority vote mechanism to determine in which order certain transactions came as a way of solving the double-spending problem. he double-spending problem is simple to eplain if  send a transaction sending my   to you, and then one day later  send a transaction sending the same   to myself, both of those transactions obviously cannot simultaneously process. ence, one of the two has to "win", and the intuitively correct transaction that should get that honor is the one that came first. owever, there is no way to look at a transaction and cryptographically determine when it was created. his is where itcoin mining steps in.nnitcoin mining works by having nodes called "miners" aggregate recent transactions and produce packages called "blocks". or a block to be valid, all of the transactions it contains must be valid, it must "point to" (ie. contain the hash of) a previous block that is valid, and it must satisfy "the proof of work condition" (namely, nnnn(block_header)  nnnn, ie. the double-hash of the block header must start with a large number of zeroes). ecause  is a pseudorandom function, the only way to make such blocks is to repeatedly attempt to produce them until one happens to satisfy the condition. he nnnn"target" is a fleible parameter it auto-adjusts so that on average the entire network needs to work for ten minutes before one node gets lucky and succeeds once that happens, the newly produced block becomes the "latest" block, and everyone starts trying to mine a block pointing to that block as the previous block. his process, repeating once every ten minutes, constitutes the primary operation of the itcoin network, creating an ever-lengthening chain of blocks ("blockchain") containing, in order, all of the transactions that have ever taken place.nnf a node sees two or more competing chains, it deems the one that is longest, ie. the one that has the most proof-of-work behind it, to be valid. ver time, if two or more chains are simultaneously at play, one can see how the chain with more computational power backing it is eventually guaranteed to win hence, the system can be described as "one  cycle, one vote". ut there is one vulnerability if one party, or one colluding group of parties, has over % of all network power, then that entity alone has majority control over the voting process and can out-compute any other chain. his gives this entity some privilegesnnhe entity can only acknowledge blocks produced by itself as valid, preventing anyone else from mining because its own chain will always be the longest. ver time, this doubles the miner's -denominated revenue at everyone else's epense. ote that a weak version of this attack, "nnselfish-miningnn", starts to become effective at around % network power.nnhe entity can refuse to include certain transactions (ie. censorship)nnhe entity can "go back in time" and start mining from  blocks ago. hen this fork inevitably overtakes the original, this removes the effect of any transactions that happened in the original chain after the forking point. his can be used to earn an illicit profit by () sending  to an echange, () waiting  blocks for the deposit to be confirmed, () purchasing and withdrawing , () reversing the deposit transaction and instead sending those coins back to the attacker.nnhis is the dreaded "% attack". otably, however, even % hashpower does not give the attacker the privilege of assigning themselves an arbitrary number of new coins or stealing anyone else's coins (ecept by reversing transactions). nother important point is that % of the network is not needed to launch such attacks if all you want is to defraud a merchant who accepts transactions after waiting  confirmations (usually,nnnnnnnnornnnnnnnn), if your mining pool has portion  of the network you can succeed with probabilitynn(nn /nn(nnnn-nn))nn^nn at % hashpower and  confirmations, this means that ash can currently steal altcoins from an altcoin echange with .% success probability - once in every si tries.nnoolsnnere is we get to pools. itcoin mining is a rewarding but, unfortuantely, very high-variance activity. f, in the currentnn /s networknn, you are running an  with  /s, then every block you have a chance of  in  of receiving the block reward of  , but the other  times out of  you get eactly nothing. iven that network hashpower is currently doubling every three months (for simplicity, say  blocks), that gives you a probability of .% that your  will ever generate a reward, and a .% chance that the 's total lifetime earnings will be eactly nothing.nn mining pool acts as a sort of inverse insurance agent the mining pool asks you to mine into into its own address instead of yours, and if you generate a block whose proof of work is almost good enough but not quite, called a "share", then the pool gives you a smaller payment. or eample, if the mining difficulty for the main chain requires the hash to be less than nnnn, then the requirement for a share might be nnnn. ence, in this case, you will generate a share roughly every hundred blocks, receiving .  from the pool, and one time in a thousand out of those the mining pool will receive a reward of  . he difference between the epected .  and .  per block is the mining pool's profit.nnowever, mining pools also serve another purpose. ight now, most mining s are powerful at hashing, but surprisingly weak at everything else the only thing they often have for general computation is a small aspberry i, far too weak to download and validate the entire blockchain. iners could fi this, at the cost of something like an etrannnnpnnennrnndnnennvnninncnnennfnnonnrnnannmnnonnrnnenndnnenncnnennnnntnnnnnnnn,nnbnnunntnntnnhnnennynndnnonnnnnonntnn−nnfnnonnrnntnnhnnennonnbnnvnninnonnunnsnnrnnennannsnnonnnnntnnhnnanntnn per device for a more decent , but they do not - for the obvious reason thatnnnnpnnernndnnennvnninncennfnnornnamnnorenndnnecennnnntnnnn,nnbnnunnttnnhnneynndnnonnnnnonntnn−nnfnnornntnnhnneonnbnnvnninnonnunnsrennannsonnnnntnnhanntnn is less than $. nstead, they ask mining pools to generate mining data for them. he "mining data" in question refers to the block header, a few hundred bytes of data containing the hash of the previous block, the root of a erkle tree containing transactions, the timestamp and some other ancillary data. iners take this data, and continue incrementing a value called a "nonce" until the block header satisfies the proof-of-work condition. rdinarily, miners would take this data from the block that they independently determine to be the latest block here, however, the actual selection of what the latest block is is being relegated to the pools.nnhus, what do we have ell, right now, essentially thisnnhe mining ecosystem has solidified into a relatively small number of pools, and each one has a substantial portion of the network - and, of course, last week one of those pools, ash, reached %. iven that every time any mining pool, whether eepbit in  or ash in , reached % there has been a sudden massive reduction in the number of users, it is entirely possible that ash actually got anywhere up to % network hashpower, and is simply hiding some of it. here is plenty of evidence in the real world of large corporations creating supposedly mutually competing brands to give the appearance of choice and market dynamism, so such a hypothesis should not at all be discounted. ven assuming that ash is in fact being honest about the level of hashpower that it has, what this chart literally says is that the only reason why there are not % attacks happening against itcoin right now is that iscus ish, a mining pool run by a nineteen-year-old in angzhou, hina, and ash, a mining pool run supposedly in the  but may well be anywhere, have not yet decided to collude with each other and take over the blockchain. lternatively, if one is inclined to trust this particular nineteen-year-old in angzhou (after all, he seemed quite nice when  met him), ligius or uild can collude with ash instead.nno what if, for the sake of eample, ash gets over % again and starts launching % attacks (or, perhaps, even starts launching attacks against altcoin echanges at %) hat happens thennnirst of all, let us get one bad argument out of the way. ome argue that it does not matter if ash gets over %, because there is no incentive for them to perform attacks against the network since even one such attack would destroy the value of their own currency units and mining hardware. nfortunately, this argument is simply absurd. o see why, consider a hypothetical currency where the mining algorithm is simply a signature verifier for my own public key. nly  can sign blocks, and  have every incentive to maintain trust in the system. hy would the itcoin community not adopt my clearly superior, non-electricity-wasteful, proof of work here are many answers  might be irrational,  might get coerced by a government,  might start slowly inculcating a culture where transaction reversals for certain "good purposes" (eg. blocking child pornography payments) are acceptable and then slowly epand that to cover all of my moral prejudices, or  might even have a massive short against itcoin at  leverage. hose middle two arguments are not crazy hypotheticals they are real-world documented actions of the implemenation of me-coin that already eists ayal. his is why decentralization matters we do not burn millions of dollars of electricity per year just to move to a currency whose continued stability hinges on simply a slightly different kind of political game.nndditionally, it is important to note that even ash itself has a history of involvement in using transaction reversal attacks against gambling sites specifically, one may recall the episode involvingnnetoin icenn. f course, ash denies that it took any deliberate action, and is probably correct rather, the attacks seem to be the fault of a rogue employee. owever, this is not an argument in favor of ash much the opposite, it is a piece of real-world empirical evidence showing a common argument in favor of decentralization power corrupts, and equally importantly power attracts those who are already corrupt. heoretically, ash has increased security since then in practice, no matter what they do this central point of vulnerability for the itcoin network still eists.nnowever, there is another, better, argument for why mining pools are not an issue namely, precisely the fact that they are not individual miners, but rather pools from which miners can enter and leave at any time. ecause of this, one can reasonably say thatnnrs echnica's claimnnthat itcoin's security has been "shattered by an anonymous miner with % network power" is completely inaccurate there is no one miner that controls anything close to %. here is indeed a single entity, called .io, that controls % of ash, which is scary in itself but nevertheless far from the scenario that the headline is insinuating is the case. f individuals miners do not want to participate in subverting the itcoin protocol and inevitably knocking the value of their coins down by something like %, they can simply leave the pool, and such a thing has now happened three times in itcoin's history. owever, the question is, as the itcoin economy continues to professionalize, will this continue to be the case r, given somewhat more "greedy" individuals, will the miners keep on mining at the only pool that lets them continue earning revenue, individually saving their own profits at the cost of taking the entire itcoin mining ecosystem collectively down a cliffnnolutionsnnven now, there is actually one strategy that miners can, and have, taken to subvert ash.io mining on the pool but deliberately withholding any blocks they find that are actually valid. uch a strategy is undetectable, but with a  /s miner mining in this way it essentially reduces the profits of all ash miners by about .%. his sort of pool sabotage completely negates the benefit of using the zero-fee ash over other pools. his ability to punish bad actors is interesting, though its implications are unclear what if ash starts hiring miners to do the same against every other pool hus, rather than relying on vigilante sabotage tactics with an uneamined economic endgame, we should ideally try to look for other solutions.nnirst of all, there is the ever-present  mining pool, ool. ool has been around for years, and works by having its own internal blockchain with a -second block time, allowing miners to submit shares as blocks in the chain and requiring miners to attempt to produce blocks sending to all of the last few dozen share producers at the same time. f ool had % network hashpower, the result would not be centralization and benevolent dictatorship rather, the limiting case would simply be a replica of the plain old itcoin blockchain. owever, ool has a problem it requires miners to be fully validating nodes. s described above, given the possibility of mining without being a fully validating node this is unacceptable.nnne solution to this problem, and the solution that thereum is taking, is to have a mining algorithm that forces nodes to store the entire blockchain locally.  simple algorithm for this in itcoin's case isnndef minenn(nnblock_header, , noncenn)nnnnonnnnnn]nnfornninninnnrangenn(nnnn)nnnno.appendnn(nnshann(nnblock_header + nonce + inn))nnnnnnnnn]nnfornninninnnrangenn(nnnn)nnnnnnnn(nnonnnninn]nn/nnnn**nn)nn% nnn.appendnn(nntnn(nn, onnnninn]nn))nnreturnnnshann(nnblock_header + strnn(nnnnn))nnherennt(, k)nnis a function that returns the kth transaction in block , wrapping around modulo the number of transactions in that block if necessary, and  is the current block number. ote that this is a simple algorithm and is highly suboptimal some obvious optimizations include making it serial (ie.nnoi+]nndepends onnnni]nn), building a erkle tree out of thennoi]nnvalues to allow them to be individually verified, and, as the thereum protocol already does, maintaining a separate state tree and transaction list so the algorithm only needs to query the current block. he one minor roadblock to successful implementation in thereum is simply that the current trie implementation has no concept of the "kth node" of a tree the closest analog would probably need to be "first node with a key leicographically after k, with wraparound", something for which it is possible to produce a compact atricia tree proof.nnhis actually solves two problems at the same time. irst, it removes the incentive to use a centralized pool instead of ool. econd, there is an ongoing crisis in itcoin about how there are too few full nodes the reason why this is the case is that maintaining a full node with its  blockchain is epensive, and no one wants to do it. ith this scheme, every single mining  would be forced to store the entire blockchain, a state from which performing all of the functions of a full node becomes trivial.nn second strategy is another cryptographic trick make mining non-outsourceable. pecificically, the idea is tonncreate a mining algorithmnnsuch that, when a miner creates a valid block, they always necessarily have an alternative way of publishing the block that secures the mining reward for themselves. he strategy is to use a cryptographic construction called a zero-knowledge proof, cryptographically proving that they created a valid block but keeping the block data secret, and then simultaneously create a block without proof of work that sends the reward to the miner. his would make it trivial to defraud a mining pool, making mining pools non-viable.nnuch a setup would require a substantial change to itcoin's mining algorithm, and uses cryptographic primitives far more advanced than those in the rest of itcoin arguably, compleity is in itself a serious disadvantage, and one that is perhaps worth it to solve serious problems like scalability but not to implement a clever trick to discourage mining pools. dditionally, making mining pools impossible will arguably make the problem worse, not better. he reason why mining pools eist is to deal with the problem of variance miners are not willing to purchase an investment which has only a % chance of earning any return. f the possibility of pooling is impossible, the mining economy will simply centralize into a smaller set of larger players - a setup which, unlike now, individual participants cannot simply switch away from. he previous scheme, on the other hand, still allows pooling as long as the local node has the full blockchain, and thereby encourages a kind of pooling (namely, ppool) that is not systemically harmful.nnnother approach is less radical don't change the mining algorithm at all, but change the pooling algorithms. ight now, most mining pools use a payout scheme called "pay-per-last--shares" () - pay miners per share an amount based on the revenue received from the last few thousand shares. his algorithm essentially splits the pool's own variance among its users, resulting in no risk for the pool and a small amount of variance for the users (eg. using a pool with % hashpower, the epected standard deviation of monthly returns is ~%, far better than the solo mining lottery but still non-negligible). arger pools have less variance, because they mine more blocks (by basic statistics, a pool with  more mining power has a  smaller standard deviation as a percentage). here is another scheme, called  (pay-per-share), where a mining pool simply pays a static amount per share to miners this scheme removes all variance from miners, but at the cost of introducing risk to the pool that is why no mining pool does it.nneni osenfeld's ulti- attempts to provide a solution. nstead of mining into one pool, miners can attempt to produce blocks which pay to many pools simultaneously (eg.   to one pool,   to another, .  to a third and .  to a fourth), and the pools will pay the miner for shares proportionately (eg. instead of one pool paying .  per share, the first pool will pay ., the second ., the third . and the fourth .). his allows very small pools to only accept miners giving them very small rewards, allowing them to take on a level of risk proportionate to their economic capabilities. or eample, if pool  is  bigger than pool , then pool  might accept blocks with outputs to them up to  , and pool  might only accept  . f one does the calculations, one can see that the epected return for pool  is eactly ten times what pool  gets in every circumstance, so pool  has no special superlinear advantage. n a single- scenario, on the other hand, the smaller  would face . higher risk compared to its wealth.nnhe problem is, to what etent is the problem really because of variance, and to what etent is it something else, like convenience ure, a % mining pool will see a % monthly standard deviation in its returns. owever, all mining pools see something like a % monthly standard deviation in their returns simply because of the volatile  price. he difference between % standard deviation and % standard deviation seems large and a compelling reason to use the largest pool the difference between % and % not so much. o what other factors might influence mining pool centralization nother factor is the fact that pools necessarily "hear" about their own blocks instantly and everyone else's blocks after some network delay, so larger pools will be mining on outdated blocks less often this problem is critical for blockchains with a time of ten seconds, but in itcoin the effect is less than % and thus insignificant.  third factor is convenience this can best be solved by funding an easy-to-use open-source make-your-own mining pool solution, in a similar spirit to the software used by many small  providers if deemed important, we may end up partially funding a network-agnostic version of such an effort. he last factor that still remains, however, is that ash has no fee rather, the pool sustains itself through its connection to the  cloud-mining company .io, which controls % of its hashpower. hus, if we want to really get down to the bottom of the centralization problem, we may need to look at s themselves.nnsnnriginally, itcoin mining was intended to be a very egalitarian pursuit. illions of users around the world would all mine itcoin on their desktops, and the result would be simultaneously a distribution model that is highly egalitarian and widely spreads out the initial  supply and a consensus model that includes thousands of stakeholders, virtually precluding any possibility of collusion. nitially, the scheme worked, ensuring that the first few million bitcoins got widely spread among many thousands of users, including even the normally cash-poor high school students. n , however, came the advent of mining software for the  ("graphics processing unit"), taking advantage of the 's massive parallelization to achieve - speedups and rendering  mining completely unprofitable within months. n , specialization took a further turn with the advent of s. s, or application-specific integrated circuits, are specialized mining chips produced with a single purpose to crank out as many  computations as possible in order to mine itcoin blocks. s a result of this specialization, s get a further - speedup over s, rendering  mining unprofitable as well. ow, the only way to mine is to either start an  company or purchase an  from an eisting one.nnhe way the  companies work is simple. irst, the company starts up, does some minimal amount of setup work and figures out its plan, and starts taking preorders. hese preorders are then used to fund the development of the , and once the s are ready the devices are shipped to users, and the company starts manufacturing and selling more at a regular pace.  manufacturing is done in a pipeline there is one type of factory which produces the chips for s, and then another, less sophisticated, operation, where the chips, together with standard parts like circuit boards and fans, are put together into complete boes to be shipped to purchasers.nno where does this leave us t's obvious that  production is fairly centralized there are something like - companies manufacturing these devices, and each of them have a significant level of hashpower. owever,  did not realize just how centralized  production is until  visited this unassuming little building in henzhen, hinannn the third floor of the factory, we seennhat we have in the first picture are about  miners of  /s each, making up a total  /s of miners - more than .% of total network hashpower - all in one place. he second picture shows boes containing another  /s. ltogether, the factory produces slightly more than the sum of these two amounts - about  /s -nnevery single daynn. ow, look at this chartnnn total, the itcoin network gains about  /s every day. hus, even adding some safety factors and assuming the factory shuts down some days a week, what we have is one single factory producingnnover a quarter of all new hashpowernnbeing added to the itcoin network. ow, the building is a bit large, so guess what's on the first floor hat's right, a fabrication facility producing crypt s equal to a quarter of all new hashpower added to the itecoin network. his projects an image of a frightening endgame for itcoin the itcoin network spending millions of dollars of electricity every year only to replace the  dollar's mining algorithm of "nn white guysnn" with a few dozen guys in henzhen.nnowever, before we get too alarmist about the future of mining, it is important to dig down and understand () what's wrong with s, () what's okay with s, and () what the future of  mining is going to look like. he question is a more comple one than it seems. irst of all, one might ask, why is it bad that s are only produced by a few companies and a quarter of them pass through one factory s are also highly centralized integrated circuits are being produced by only a small number of companies, and nearly all computers that we use have at least some components from  or ntel. he answer is, although  and ntel produce the s, they do not control what's run on them. hey are general-purpose devices, and there is no way for the manufacturers to translate their control over the manufacturing process into any kind of control over its use. -laden "trusted computing modules" do eist, but it is very difficult to imagine such a thing being used to force a computer to participate in a double-spend attack.nnith  miners, right now things are still not too bad. lthough s are produced in only a small number of factories, they are still controlled by thousands of people worldwide in disparate data centers and homes, and individual miners each usually with less than a few terahashes have the ability to direct their hashpower wherever they need. oon, however, that may change. n a month's time, what if the manufacturers realize that it does not make economic sense for them to sell their s when they can instead simply keep all of their devices in a central warehouse and earn the full revenue hipping costs would drop to near-zero, shipping delays would go down (one week shipping delay corresponds to ~.% revenue loss at current hashpower growth rates) and there would be no need to produce stable or pretty casings. n that scenario, it would not just be % of all s that are produced by one factory in henzhen it would be % of all hashpowernnrun out ofnnone factory in henzhen.nnhen visiting the headquarters of a company in angzhou that is involved, among other things, in itecoin mining,  asked the founders the same question why don't you just keep miners in-house hey provided three answers. irst, they care about decentralization. his is simple to understand, and is very fortunate that so many miners feel this way for the time being, but ultimately mining will be carried out by firms that care a little more about monetary profit and less about ideology. econd, they need pre-orders to fund the company. easonable, but solvable by issuing "mining contracts" (essentially, crypto-assets which pay out dividends equal to a specific number of /s of mining power). hird, there's not enough electricity and space in the warehouses. he last argument, as specious as it seems, may be the only one to hold water in the long term it is also the stated reason why miner stopped mining purely in-house and started selling  miners to consumers, suggesting that perhaps there is a strong and universal rationale behind such a decision.nnssuming that the funding strategies of selling pre-orders and selling mining contracts are economically equivalent (which they are), the equation for determining whether in-house mining or selling makes more sense is as followsnnn the left side, we have the costs of in-house mining electricity, storage and maintenance. n the right side, we have the cost of electricity, storage and maintenance eternally (ie. in buyers' hands), shipping and the penalty from having to start running the  later, as well as a negative factor to account for the fact that some people mine at least partially for fun and out of an ideological desire to support the network. et's analyze these figures right now. e'll use thennutterfly abs onarchnnas our eample, and keep each  running for one year for simplicity.nnnternal electricity, storage, maintenancenn- according to 's checkout page, internal electricity, storage and maintennance cost $ per year, which we will mark down to $ assuming  takes some profitnnternal electricitynn- in ntario, prices are aboutnn$. per wnn.  utterfly abs onarch will runnn /s at  nn normalizing this to per-, this means an electricity cost of $. per day or $ for the entire yearnnternal storagenn- at home, one can consider storage free, or one can add a convenience fee of $ per day hence, we'll say somewhere from $ to $nnternal maintenancenn- hard to quantify this value for technically skilled invididuals who enjoy the challenge it's zero, and for others it might be hard hence, we can say $ to $nnhipping costnn- according to , $.nnevenuenn- currently,  /s gives you .  or $. per day. ince in our analysis hashpower doubles every  days, so the effectiveness of the  halves every  days, we get  days of life or $ revenuennhipping timenn- according to my hinese sources, one weeknnashpower doubling timenn- three months. ence, the entire epression for the shipping delay penalty isnn * ( - . ^ .)  .nnobbyist/ideology premiumnn- currently, a large portion of itcoin miners are doing it out of ideological considerations, so we can say anywhere from $ to $nnhus, adding it all up, on the left we have $, and on the right we have $ + $ + $  $, up to plus $ and minus up to $. hus, it's entirely ambiguous which one is better errors in my analysis and the nebulous variables of how much people value their time and aesthetics seem to far outweigh any definite conclusions. ut what will happen in the future undamentally, one can epect that electricity, storage and maintenance would be much cheaper centrally than with each consumer simply due to economies of scale and gains from specialization additionally most people in the "real world" are not altruists, hobbyists or admirers of beautiful  coverings. hipping cost are above zero, and the shipping delay penalty is above zero. o thus it seems that the economics roundly favor centralized mining...nn... ecept for one potential factor heat. ight now, s are still in a rapid development phase, so the vast majority of the cost is hardware the  miner used in the above eample costsnnnn,nnbnnunntnntnnhnnennennlnnenncnntnnrnninncnninntnnynncnnonnsnntnnsnn, but the electricity costsnnnn,nnbnnunnttnnhnneennlnnecnntnnrnninncnninntnnycosnntnnsnn. n the future, however, development will be much slower ultimately we can epect a convergence to oore's law, with hashpower doubling every two years, and even oore's law itself seems to be slowing. n such a world, electricity costs may come back as the primary choke point. ut how much does electricity cost n a centralized warehouse, quite a lot, and thennsquare-cube lawnnguarantees that in a centralized environment even more energy than at home would need to be spent on cooling because all of the miners are in one place and most of them are too deep inside the factory to have eposure to cool fresh air. n a home, however, if the outside temperature is less than about ', the cost of electricity is zero all electricity spent by the miner necessarily eventually turns into "waste" heat, which then heats the home and substitutes for electricity that would be spent by a central heater. his is the only argument for why  decentralization may work rather than decentralization happening because everyone has a certain quantity of unused, and thereby free, units of computational time on their laptop, decentralization happens because many people have a certain quantity of demand for heating in their homes.nnill this happen any itcoin proponents seem convinced that the answer is yes. owever,  am not sure it is an entirely empirical question whether or not electricity cost is less than maintenance plus storage plus shipping plus shipping delay penalty, and in ten years' time the equation may well fall on one side or the other.  personally am not willing to simply sit back and hope for the best. his is why  personally find it disappointing that so many of the core itcoin developers (though fortunately not nearly all) are content to consider the proof of work problem "solved" or argue that attempting to solve mining specialization is an act ofnn"needless re-engineering"nn. t may prove to be, or it may not, but the fact that we are having this discussion in the first place strongly suggests that itcoin's current approach is very far from perfect.nn esistancennhe solution to the  problem that is most often touted is the development of -resistant mining algorithms. o far, there have been two lines of thought in developing such algorithms. he first is memory-hardness - reducing the power of s to achieve massive gains through parallelization by using a function which takes a very large amount of memory. he community's first attempt was crypt, which proved to be not resistant enough in anuary,  attempted to improve crypt's memory-hardness withnnaggernn, an algorithm which is memory-hard to compute (to the etent of  ) but easy to verify however, this algorithm is vulnerable to shared-memory attacks where a number of parallel processes can access the same   of memory. he current state-of-the-art in memory-hard o isnnuckoonn, an algorithm which looks for length- cycles in graphs. t takes a large amount of memory to efficiently find such cycles, but a cycle is very quick to verify, requiring  hashes and less than  bytes of memory.nnhe second approach is somewhat different create a mechanism for generating new hash functions, and make the space of functions that it generates so large that the kind of computer best suited to processing them is by definition completely generalized, ie. a . his approach gets close to being "provably  resistant" and thus more future-proof, rather than focusing on specific aspects like memory, but it too is imperfect there will always be at least some parts of a  that will prove to be etraneous in such an algorithm and can be removed for efficiency. owever, the quest is not for perfect  resistance rather, the challenge is to achieve what we can call "economic  resistance" - building an  should not be worth it.nnhis is actually surprisingly likely to be achievable. o see why, note that mining output per dollar spent is, for most people,nnsublinearnn. he first  units of mining power are very cheap to produce, since users can simply use the eisting unused computational time on their desktops and only pay for electricity (nnnn). oing beyond  units, however, one needs to pay for both hardware and electricity (nn + nn). f s are feasible, as long as their speedup over commodity hardware is less thannn( + ) / nn, then even in an -containing ecosystem it will be profitable for people to spend their electricity mining on their desktops. his is the goal that we wish to strive for whether we can reach it or not is entirely unknown, but since cryptocurrency as a whole is a massive eperiment in any case it does not hurt to try.