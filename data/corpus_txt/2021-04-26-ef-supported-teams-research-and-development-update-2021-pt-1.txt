Titre: EF-Supported Teams: Research & Development Update\nAuteur: Ethereum Foundation Team\nDate: Team on April 26, 2021\nURL: https://blog.ethereum.org/2021/04/26/ef-supported-teams-research-and-development-update-2021-pt-1\nCatégorie: Non catégorisé\n\n==================================================\n\nriends,nnhe year ahead will be filled with upgrades and big ideas from across the thereum ecosystem. ince our lastnnupported eamsnnpost (which followed the launch of the beacon chain), the network has seen .+ million ther staked, and + active validators online across multiple clients.nnn recent days, the launch of the erlin network upgrade was completed, and since there’s always progress being made by other -supported projects, these updates are an opportunity to highlight more efforts to grow and improve thereum as a whole. ncluded in this edition are updates from many teams highlighted innnthe previous upported eams updatenn, and more.nnnjoy!nnpplied nnuthored by hore ildebrandtnnkoprunnanseob, hance, eoff, achel, innnkoprunnis an optimistic rollup that is private. t supports transfers and atomic swaps. e have completed an audit with east uthority and started anntrusted setupnnwhich will end on pril th. s a net step we are starting a testnet and building a wallet and block eplorer.nnubblenn, aibhav, akennubblennis an optimistic rollup that is transfer specific. e have completed an audit and are now working on client improvements and are onboarding an additional engineer to epedite development.nn lobal alletnnamesnnptimistic rollups (like ptimism) that use ecdsa signatures as default have an upper limit of ~ tps because the signatures need to go on-chain. e use  signatures to reduce the on-chain storage, which can increase throughput to ~ tps. earn morennherenn. he original contracts have been updated to smart contract wallets with meta transactions, and the aggregator is in the process of being updated to match. urther work includes adding token rewards, speccing out social recovery features and to organise an audit. ou can catch ames at the upcomingnncaling thereum ackathonnnwhere he will act as a tech mentor.nnlind findnnevinnnse  to privately search for peers in a social graph and use  to prove that the path eists. hennfirst versionnnhas been completed, we are defining features for the net iteration and starting to grow the team to build a user interface.nnnneiie, orey, annnhe goal ofnnnnis to make collusion among participants difficult, while retaining the censorship resistance and correct-eecution benefits of smart contracts. e are currently applying it in the contet of clr.fund.  has evolved beyond a minimal viable product, and version . will be launched soon. ew features include reusable voting contracts, lower gas usage, and higher capacity, which can support a greater range of quadratic voting use cases.nnicroi vnneromennicroinnis a mier for  and  tokens. t is built onnnemaphorenn, a base layer for privacy dpps. e are now supporting the latest version of node and ethers, and handling multiple networks and tokens. e updated urrogeth for multiple networks and tokens with simplified configuration. e are finalizing work on the , fiing last bugs and working on arbitrum compatibility. uture improvements include removing the need for a surrogate for transaction fees, faster zkp generation in the browser, increasing security for private keys and automatically setting fee values.nnocial edia latform on nirepnna-wen (ivian), oris, achelnne usennnirepnnto build a private decentralised social network like reddit. t allows the user to privately accumulate and prove reputation. ontract spec has been defined and we have completed contract functions including upvote, downvote, post, and comment. e added a reputation nullifier scheme to prevent double a spending issue. et step is to start work on the front end with the help of a designer.nn hase  ser nterfacennoeff, achelnnhe goal of thenn hase  nnproject is to provide an user-friendly way for everyone to perform a trusted setup. he website is done and we are currently using it to run a trusted setup for the kopru. e are collecting feedback and learnings from the live ceremony and eploring features for the net iteration.nnorum oderation with rediction arketsnniamnnse the prediction market for moderation. very post creates a prediction market over whether the mods will mark it as a violation of community standards. iam is leaving the project and we are looking for someone to take it over, see the “curatem” repos onnniam’s ithubnnif this sounds interesting to you.nneputation roving ervicennay, aphaelnnport cryptographic proofs of user attributes from eisting sites where users have accrued reputation (i.e. ithub, witter, etc.). hese proofs can then be verified by sites or decentralized applications.
 first basic version is deployed and the service can now be queried directly through an  to check the reputation of a witter account. he net milestone will allow users to connect with an thereum account and authenticate with witter.nn uadratic ollar omepagennamannnhe uadratic ollar omepage is a spin on the illion ollar omepage. hile it also features a space for images on a webpage, it allows users to vote on how much space each image takes up. oreover, it employs a quadratic and collusion-resistant voting mechanism on thereum called inimal nti-ollusion nfrastructure () to prevent bribery and scale images quadraticallynnhttps//quadratic.page/nn. mplementation is finished and we are planning to do some test rounds soon.nnata ublishing arketplacennacksoomnnhennprojectnncreates a place to trustlessly publish data after crowdsourcing funds. he user shares an encrypted dataset (e.g. picture our audiofile) that is trustlessly revealed under the condition that a certain crowdfunding goal has been reached. he project is moving quickly, contracts have been implemented and a first version of the website is live, net up is circuit implementation.nnollup iff ompressionnnlagojnnollups require you to publish a diff between the state before and state after. his project investigates ways of reducing that diff in order to reduce rollup costs for the case of airdrops specifically. urrently we are at the final stages of eperimenting with different data compression approaches/algorithms and benchmarking their performance. et steps are choosing the optimal data compression approach for an iterative multi-stage retrospective airdrop and implementing the algorithm so it can be tested and used in practice on . he implementation will be on top of the  lobal allet project above.nn.und eployernnpencer raham, anonymous contributornnhe goal of the clr fund-deployer is to make it as easy as possible for anybody (project, protocol, community, etc.) to create their own instance of clr.fund to fund public goods for their domain. lrfund-deployer has  planned releasesnnoggynn- basically, a web  from which to deploy all the dependencies and then configure the contractsnnranslucentnn- etending that web  to deploy and configure the user and recipient registries and also start a funding round!nnransparentnn- from that same web , deploy (and customize!) a new web  to host their instance of clrfundnne just released oggy, and are getting started on ranslucent, and also starting on some  design.nncosystem upport rogramnnuthored by  eamnne recently published ournn llocation pdatennwith details on the grants awarded in the last quarter of , with over $ million distributed across all categories.nneanwhile on the support side, we've mied things up a bit! e're processingnninquiriesnnthrough our website as always, but over the past few months we've eplored some different ways of delivering supportnnffice hoursnne've found that an informal conversation can be a surprisingly powerful tool. tarting in ebruary we piloted "office hours", where teams or individuals can sign up for one-on-one calls with the  team on topics like project feedback, eploring whether  is a good fit, or help navigating the thereum ecosystem. e held our first rounds with a limited time window, but we've been happy with the outcome and we'll be keeping signups open consistently from now on! f you're interested to chat with us, you can submit a requestnnherenn.nnocused grant roundsnne have also recently hosted two grant waves targeting specific areas for &. hese rounds let us spotlight areas that are particularly timely or high priority, and might also have slightly different goals or selection criteria from 's standard grants.nntaking ommunity rants, held in ecember, awarded over  grants for efforts to improve the thereum staking eperience. he results of this round have now been published - check out thennannouncement postnnfor more details and to eplore some of the resources produced by the amazing thereum staking community!nnollup ommunity rantsnninvited proposals to grow the rollup community ecosystem, from developer tools to infrastructure, interoperability, educational resources and more. pplications for this wave have now closed and we're in the process of evaluating submissions keep an eye out for a post announcing the grantees soon.nnth esearchnnuch of what the research team is up to is covered in the inalized and “tate of th” updates. eyond the very public items that make it in there, we have been digging more into stateless research, proofs of custody for  eecution, sharding specs and prototypes, and other scaling/security research. ost of our progress can be found on posts on ethresear.ch.nnind a few of our recent posts belownnhe tate of th, an. nninalized #nninalized #nninalized #nnthereum.orgnnuthored by am ichardsnnew homepagenne launched a fresh new homepage! s the biggest entry point fornnethereum.org,nnwe wanted to make sure our homepage did a better job of eplaining thereum by showing off what it enables and by helping users start their journey down the rabbit hole. et us know what you thinknnhttps//ethereum.org/en/nnaunchpad improvements and localizationnno promote a healthier, more accessible, more decentralized network, the launchpad is now available in  different languages (more coming soon). longside this localisation effort, we also rolled out some content changes and  improvements to help users set up their beacon chain validators.nnhttps//launchpad.ethereum.org/en/nnave ideas for improvements e welcome collaborators. ere's the reponnhttps//github.com/ethereum/eth.-depositnnranslate more recent contentnne rolled out translations for some of our newest content in  of our  total languages (more coming soon)nnhttps//ethereum.org/en/languages/nnearn how to get involvednn.nnse case pagesnnhings like ei and the recent boom in digital art s are driving users to investigate thereum. hey're also compelling reasons to join in. e want to make sure we cover these topics, in the beginner-friendly way you just can't get on rypto witter, so new users can learn more about the most concrete use cases of thereum.nne launched  new pagesnnhttps//ethereum.org/en/defi/nnhttps//ethereum.org/en/nft/nnhttps//ethereum.org/en/dao/nnnow a great thereum use case that's missing et us know!nnake a look at ethereum.org andnnour previous updatesnnto see what else we’ve worked on since you last visited. o make our work more accessible and to foster more community collaboration, we've also started sharing an overview of our quarterly roadmap goals, which you can find on ithub (seennnnandnnnn).nnf you want to contribute, you cannnfind ways to get involvednn, stop bynnour iscordnnor raise an issue/ innnitubnn. pecial thanks tonnall the incredible people who have helped so farnn!nnwasmnnuthored by le eregszaszinnnnhe work on  has continued and we releasednnupdate nnin late anuary. n this update, we proposed two different models for pricing the new instructions, and shared estimated costs of - operations using these models. dditionally, the update provided a brief overview of further potential improvements to the .nnesides the earlier released partial - implementation (evmcurves), new work eploring the applicability of  to i hashing was alsonnpublishednn. i is one of the zk-s friendly hashing algorithms. e were able to show a substantial gas reduction using  (including in the eample use case of ornado ash).nnmportant to mention is that the work on i showed some limitations of the interfaces (-v and -v) proposed in update # and sparked subsequent work for a modified interface.nnpdates about  can be followed on thennappropriate thagicians topicnn.nnnn .. has been released, improving thennevmcnn tool and the utility libraries (new addition isnnevmchenn). ee thenncomplete changelognnfor more detail.nnhennaselinenninterpreter has landed in the evmone project. t provides a relatively straightforward  implementation with performance competitive with the oldernndvancednninterpreter. ee thennevmone .. release notesnnandnn#nnfor additional details.nnoth  and evmone have work in progress support for thennerlinnnhardfork, in the form ofnn-nnimplementation (nnevmc#nnandnnevmone#nn. hese and related changes are going to be included in the upcoming releases.nn set ofnnsynthetic benchmarksnnhas been added to the evmone project. hey target individual low-level computational  instructions. e plan to further etend this and use it in an upcoming report.nne have also released a write up callednn bject ormatnn. he goal is to improve the structure of  bytecode. his will allow for easier introduction of various improvements and features going forward. ollow upcoming updatesnnherenn.nnode erkleizationnnhile initially proposed to use , due to demand wennpivoted to using nnfor the code tree.nnddednnproof generation and verification support to fastssz (an  library for o), and eperimented with proof compression approaches.nnlsonnimplementednncode merkleization logic in geth, as well as hooks which compute code proof sizes (for different encoding formats and compression methods i.e.  and  encoding, nappy compression) for historical blocks. ee thesennlab notesnnabout the go-ethereum changes as a guide.nnn parallel to the work on the  approach we have also started contributing tonngo-verklennin order to gain insights into the feasibility of code verkleization.nnizzynnhenn.nnandnn.nnreleases of izzy focused on introducing a  and a ust , as well as adding support fornnnn. reparing for the . release we are incorporating improvements suggested by users.nnollowing the goals set in our previous update, we have been evaluating efficient runtime metering approaches and have an implementation with a small overhead.nne also continued upstreamingnntesting improvementsnnto the official ebssembly test suite, with a dozen changes merged this year.nnormal erificationnnhe ormal erification eam posted their own quarterly update at the end of  ( arch, ). he post covers work on ct, hevm, and hecker, andnnyou can see it here!nnethnnersion .. of eth was released on  arch,  ahead of the erlin network upgrade.  detailed announcement post, which covers updates and new features (authored by éter zilágyi)nnis available herenn.nnavascript eamnnuthored by olger rewesnnerlin was knocking at the door and kept us occupied. e had ann v..nnrelease out mid arch with full erlin support and ann v..nnsoon after adding - ccess ist generation functionality. thers became erlin-ready with thennv.. releasennwith the addition of typed t support being the major change (and challenge). n the sideline hris put some significant effort to help ardat on thenn v upgradenn. hile ardat should have a erlin-ready release out soon after integration, we generally realized that the overall dev ecosystem readiness for upcoming s is a systemic weak spot (where we take our share). e will give this some additional thinking if we can help here on coordination in the future.nnpeaking about the future what's going on with our client o make it short we will still play modest here. e will likely be able to do a first alpha release within the net - weeks being capable to do passive full-syncing on the major networks. ajor role of this client will nevertheless remain for now to help us internally on development. e have started with thenn-nnimplementation (actually this progressed already pretty well 😀) and our client will help us significantly to test this under real world conditions early on.nne'll also start preparing for "he erge" tm] relatively soon (weeks), you will be able to follow the progressnnherenn. nd while we'll likely not quite make it to join thennayonismnnhackathon our client will enable us to connect to an  node via  early on and test our tech stack against the merge requirements.nnast but not least our client significantly helped to harden ournndevppnnimplementation and a firstnnreallynnproduction-ready release is imminent (also few weeks at most). e will continue to evolve here and net tackle annwit/nnprotocol implementation for witness syncing recentlynnannouncednnby ason arver from the ython team which particularly ecited us and which we can then integrate along our ownnneam yncnneperiments.nneminnuthored by ann evreaunnhe quarterly emi eam update is also live! ind updates on the team and members, eact, ode etension, atomo, orkspace, and more on thennemi edium pagenn.nnnake harmers ython cosystem y/rinity/eb.py/e-lang]nnuthored by rant uerkernne-lang is a high-level language implemented in ust. he team is focused on providing the community with language features and tooling that make it easy to create reliable smart contracts.
ere are some development highlights from the first part of nnonthly releases e began cuttingnnreleasesnnevery month starting in anuary and will continue to do so.nnore features e continue to add useful features to the language. ere are some worth notingnnstructsnneternal contract typesnnintegrated safe-mathnnniswap- core demo e set a goal to support annbasic implementationnnof the niswap protocol by pril. e finished this by the beginning of arch.nnternal contributions e’ve received contributions from five people outside of the .nnany people get ecited about writing ust. aturally, a number of ustaceans have emerged to help with development.nne’ve also received help fuzzing the compiler fromnnagrocenn. or more info, read hisnnpostnn.nnhe team will continue working on the following thingsnnetting a stable release to users.nnpanding type support and more thorough checking.nndding a module system and standard library.nnmproving error messages.nnifferential contract fuzzing.nndvanced language features.nnebpynnuthored by eri lowesnnhe two major features that the webpy team has been focused on are the th eacon , and making progress toward async support. e’re proud to report that the eacon  is ready for use! ur documentation and help guides have also seen a lot of love lately, and we’ve started to plan the v release which will likely be coming later this year! nd of course, community support and bug fies always take priority when they come up.nntateless thereumnnuthored by iper erriamnnhe tateless thereum effort continues on with statelessness a high priority for the th merge. he primary blocker for statelessness is currently witness sizes, which can easily be ’s or ’s of megabytes under the current protocol. ur original plans focused on converting to a binary trie, which was projected to reduce witness sizes down to just a few megabytes. he recent research on ate commitments and the development of the erkle rie has shaken up the roadmap a bit. he c gives us a firm upper bound of b with an epected average witness of kb which is a massive reduction in size. ork is underway on  implementations of the unified erkle trie in the go-ethereum codebase.nne are also making progress on  changes that would place firm economic bounds on the total size of the state via “state epiry”. ather than deleting state, “state epiry” instead moves pieces of the state that haven’t been touched for a while into an “inactive” state. nything that is inactive can be activated by providing the protocol with a proof, elevating it back to being “active”.nnn addition, the  has established a new fund for building out tateless lient nfrastructure to ensure that we are not only able to make the protocol support statelessness, but that clients will be able to bring the benefits of statelessness to end users via lighter weight clients.nnecurity ecurity / onsensus ests]nnuthored by artin olst wendennhe foundation security efforts covers a wide range, from cross-client fuzzing to high level protocol and architectural changes to the thereum stack.nnince the last update, two important changes were introduced to the consensus layernn , which provides a backwards-compatible way to adjust gas pricings for trie-dependent opcodes. djusting opcodes according to the actual resource consumptions is important to avoid o vulnerabilities in the platform core, and has previously been performed e.g. in  . he "new twist" with  is that the adjustment is backwards-compatible, making all "breakage" which occurs due to the raised cost possible to "unbreak", viann , which allows callers to specify, and pre-pay for, certain slots that are accessed later during eecution. y charging this cost up front, it is possible to make the raised cost un-noticeable during the eecution.nnn the protocol side, the - protocol has been implemented in go-ethereum, and it's epected that other clients will follow the same path. - adds request identifiers to the protocol level. hy is this important from a security perspectivenns clients work right now, any time a client sends a request to a peer and gets a response, they need to do some guesswork to determine which request a given incoming packet is in response to. his works "as long as it works", but is error-prone e.g. in cases where peers drop off and reconnect, or respond slow enough that the request times out.nnecause of the inherent lossiness of the current protocol, it's hard for any client to be strict about response checking, and implement any kind of rules for how to treat misbehaving peers -- it's simply very difficult to pinpoint if the cause of a mismatch is due to a malicious peer, or if it's caused by network lag.
ith request identifiers, the road is open to implement a lot more sophisticated and efficient networking stack.nnrom the fuzzing side, we identified one 'crasher' concerning esu, which could have been eploited on mainnet, one esu berlin-related consensus issue with olov, two consensus issues related to ethermind. side from that, the standard reference-tests eecuted on ive found an issue in penthereum, which was eploitable with particular versions of the ust compiler.nn lot of the fuzzing work lately has been performed by arius van der ijden, who recently finished his aster hesis about fuzzing ethereum virtual machines.nnongratulations and well done ariusnn🎉!nnoliditynnuthored by ranziska eintelnn.. reaking elease and ew eaturesnns an early hristmas present, we released olidity .. mid of ec . v.. is a breaking release and most notably introduces checked arithmetic operations by default. his feature can be disabled locally by using annnuncheckednnblock. urthermore,  coder v is now activated by default. ou can activate the old coder usingnnpragma abicoder vnn. ead all details about olidity .. in thennrelease announcementnnand find a list of breaking changes in thenndocumentationnn.nne subsequently released olidity versions ..., .. and ..nnv.. introduces many new features for the hecker and allows to catch panic errors.nnore detailsnn.nnv.. adds an optimizer stage that can inline small amounts of code to save gas and provides more means to work with code documentation by eporting inline comments and allowing custom natspec tags.nnore detailsnn.nnv.. fies thennolidity ptimizer eccak aching ugnn, which is present in all prior versions of olidity, and, in addition, includes two improvements to the optimizer which can provide a big gas benefit when writing structs that cover a full storage slot to storage. t also adds new hecker docs and a tutorial.nnore detailsnn.nnhe many improvements to the still eperimental support to compile via our intermediate language ul are not visible in the changelog because the feature is not officially released yet. till, we encourage everyone to try it out throughnnsolc --eperimental-via-irnnand provide feedback!nnolidity eveloper urvey  esultsnnennpublishednnthe results of the olidity eveloper urvey . f you’re looking for a digest, you can find summary threads with highlightsnnherennandnnherenn. e want to etend a big thank you to all of the olidity developers that participated!nncosystem utreachnne are constantly working on improving our outreach to and interactions with the olidity ecosystem. elow you can find a few initiatives we launched in .nnore nclusive anguage esignnnn our effort to foster echange of information, encourage more developers to give feedback about olidity and join the discussions on language design and future direction of the compiler, we launched thennolidity forumnn. he olidity forum is now the dedicated place to discuss topics & questions related to the design of the olidity programming language. or a quick guide on how to use the forum and its categories, see thennannouncementnn. f you’d like to learn more about how to participate in the language design, also have a look at thisnnontributing nn.nnloser change with ooling evelopersnne launched thennsolc-toolingnnchat, which is meant to serve as a short & easy communication line between olidity tooling devs and the olidity compiler team. he chat room is public and lives on atri, with a bridge to elegram.nnegular snne continue to host regular olidity team s. heck out the results from the latest nnherenn.nnocalization of olidity ocumentationnne set up a new workflow and home for translations of the olidity documentation.
ow, we are looking for language maintainers who will organize the translation efforts for their respective language, assure quality and accuracy and make sure translations are kept in sync and are on an up-to-date level and bot eperts who can help with some automation. he translations are meant to lower the entry barriers for non-nglish speaking developers and hence will allow a broader set of developers from all over the world to get to know olidity. lease spread the word about this initiative in your local communities!nnf you want to contribute to this mammoth task by translating or helping organize the process please join us in the newnnolidity docs itub orgnnand in thennforumnn.nnote that the nglish reference version is and will remain the only officially supported version by the olidity team and will always be the most accurate and up-to-date one. hen in doubt, always refer to the nglish (original)nndocumentationnn.nnoratesnnuthored by hibaut chaeffernnn the past quarter, the orates team focused on a newnnbreaking releasennof the toolbo. his new version is now released with support for new powerful constructsnnconstant genericsnnsupport for the keccak family of hash functionsnninference on integer literalsnnand more!nnhese additions enable a much more compact implementation of a wide range of algorithms, at no cost.nnn top of that, a lot of internal optimisations reducing proving and compilation footprint of orates programs were introduced. or a complete list of the changes, check out thennchangelognn.nninally, closer eploration with the  esearch team was started with the goal of supporting snarks schemes with universal setups.