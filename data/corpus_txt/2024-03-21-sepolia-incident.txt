Titre: Sepolia Incident\nAuteur: Marius van der Wijden, Toni Wahrstätter, Parithosh Jayanthi\nDate: March 21, 2024\nURL: https://blog.ethereum.org/2024/03/21/sepolia-incident\nCatégorie: Non catégorisé\n\n==================================================\n\nhis blog post discloses a threat against the thereum network that was present from the erge up until the encun hard fork.nnackgroundnnrior to the merge, different message size limits for  communication were set to protect clients from denial-of-service () attacks. hese limits, applied to messages received via  endpoints, were carried over to the engine , which plays a crucial role in connecting ecution and onsensus ayer clients during block production. ue to the engine 's involvement in block production, it became possible for blocks to be produced that surpassed the  size limits of some clients but remained within the acceptable range for others.nnf an attacker creates a message that eceeds the size limit of the client with the lowest setting, while still adhering to the gas limit requirements, and then waits for a block to be produced, it could result in a situation where some clients regard the block as valid, while others reject it, issuing a  error code " ontent oo arge."nnmpactnnn attacker that could craft these messages would be able to force the majority of nodes (geth) to reject blocks that a minority would accept. hese blocks would be forked away and the proposer would miss out on rewards.nnn the beginning we thought that it was only possible to create these blocks by using builders or a modified version of a client. eth has a builtin limit of  for transactions, which means that a big transaction like the one under discussion would not end up in the transaction pools of any geth node. t was however possible to still trigger the limit by having a client with a higher limit propose the block and the  requesting validation of this proposed bigger block.nne proposed a solution in temporarily lowering the  limit on all clients to the lowest value (). his would make the block invalid and an attacker would be very limited in the chaos they can cause in the network since the majority of the nodes would reject their blocks.nnowever on ebruary th we discovered that it was possible to create a block that would hit the  limit with a bunch of transactions that are below the  limit and not eceed  million gas.nnhis is a bigger issue because we realized an attacker could create a bunch of high paying transactions and send them to the network. ince he outpays everyone else in the mempool, every node (even geth nodes) would include the attack transactions in their block thus creating a block that would not be accepted by the majority of the network, resulting in a lot of forks (all being deemed valid by the minority nodes) and the chain keeps reorging over and over again.nnater on ebruary th, we came to the conclusion that everyone raising their  limits would be the safer alternative.nnimelinenn--  oni (), ari () and ustin (esu) try to submit a specificly grinded transaction to the network. he transaction contributes to up to .  blocks when snappy compressed.nn--  ari receives errors from his local eth node although the transaction should be valid.nn--  ustin managed to put the transaction in a block and submitted it through the esu client.nn--  am () alerts ari (special thanks tonnmysticryuujinnnon ), oni and le about certain epolia nodes struggeling.nn--  eam double checks with arius from eth and confirms the bug.nn--  he gang gets together to debug itnn--  e decided for all clients to limit their  request limit to nn--  e discovered that there might be a bigger issue and the attack can be eecuted with transactions less than  size.nn--  e decided for all clients to increase the  request limit.nn--  he fi was merged in geth.nn-- eth was releasednnemediationnnhile eth was the only client affected by this bug, other clients have also updated their defaults to be safe of this attack even if gas limits are increased.
he client teams indicated that the following updates have the safe rpc limitsnneth v..nnethermind v..nnesu ..nnrigon v..nneth v..-alpha.