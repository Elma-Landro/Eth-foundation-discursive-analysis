Titre: Mainnet Merge Announcement\nAuteur: Protocol Support Team\nDate: August 24, 2022\nURL: https://blog.ethereum.org/2022/08/24/mainnet-merge-announcement\nCatégorie: Non catégorisé\n\n==================================================\n\nthereum is moving to proof-of-stake! he transition, known as he erge, must first be activated on the eacon hain with the ellatri upgrade. fter this, the proof-of-work chain will migrate to proof-of-stake upon hitting a specificnnotal ifficultynnvalue.nnhe ellatri upgrade is scheduled for epochnnnnon the eacon hain --nnam  on ept , nn.nnhennerminal otal ifficultynnvalue triggering he erge isnnnn, epected betweennnept -, nn.nnote asnnannounced earliernn, the iln testnet is being sunset. perators will shut down on eptember , .nnackgroundnnollowing years of hard work, thereum's proof-of-stake upgrade is finally here! he successful upgrade of all public testnets is now complete, and he erge has been scheduled for the thereum mainnet.nnhe erge is different from previous network upgrades in two ways. irst, node operators need to update both their consensus layer () and eecution layer () clients in tandem, rather than just one of the two. econd, the upgrade activates in two phases the first, named ellatri, at an epoch height on the eacon hain, and the second, named aris, upon hitting annotal ifficultynnvalue on the eecution layer.nnpgrade nformationnnimingnnhe ergennis a two-step process. he first step is a network upgrade, ellatri, on the consensus layer triggered by an epoch height. his is followed by the eecution layer's transition from proof-of-work to proof-of-stake, aris, triggered by a specificnnotal ifficultynnthreshold called thennerminal otal ifficultynn(nnnn).nnhe ellatri upgrade is scheduled for epochnnnnon the eacon hain --nnam  on ept , nn.nnaris, the eecution layer's portion of the transition, will be triggered by thennerminal otal ifficulty ()nnofnnnn, epected betweennnept -, nn. he eact date at whichnnnnis reached depends proof-of-work hash rate. stimates for the transition can be found atnnbordel.wtfnnandnn.io/themergenn.nnnce the eecution layer reaches or eceeds thennnn, the subsequent block will be produced by a eacon hain validator. he erge transition is considered complete once the eacon hain finalizes this block. nder normal network conditions, this will happen  epochs (or ~ minutes) after the first post- block is produced!nn new - block tag,nnfinalizednn, returns the latest finalized block or an error if no such post-merge block eists. his tag can be used by applications to check if he erge has been completed. imilarly, smart contracts cannnquery thennnnopcode (nnnn)nn(renamed tonnnnpost-merge) to determine if he erge has happened. e recommend infrastructure providers monitor overall network stability in addition to finalization status.nnlient eleasesnnhe following client releases support he erge on the thereum mainnet. ode operators must runnnbothnnan eecution and consensus layer client to remain on the network during and after he erge.nnhen choosing which client to run, validators should be especially mindful of the risks of running a majority client on both the  and . n eplainer of these risks and their consequences can be foundnnherenn. n estimate of current  and  client distribution and guides for switching from one client to another can be foundnnherenn.nnonsensus ayernnamennersionnninknnighthousennv..nnownloadnnodestarnnv..nnownloadnnimbusnnv..nnownloadnnrysmnnv..nnownloadnnekunn..nnownloadnnarningnn imbus version v.. is a high-urgency upgrade that fies a critical pre- block production issue affecting users that restarted their node after ellatri. t also improves compatibility with esu, rysm and slow block builders and provides a speed boost in block processing important for those running on aspberry i and similar hardware.nnarningnn ighthouse version v.. is a high-priority release contains an important fi to ensure that ighthouse does not attempt to produce invalid blocks. he --strict-fee-recipient flag for the ighthouse alidator lient has also been found to prevent block proposals in the period between the ellatri upgrade (ept th) and the  date (estimated ept th). e are presently inside that period of time and therefore all stakers using that flag are affected. e advise that anyone using the --strict-fee-recipient flag should remove it and restart the alidator lient as soon as possible.nnhis does not affect the --suggested-fee-recipient flag.nnarningnn rysm v.. is a highly recommended update as it contains several important fies and features for the merge.nnarningnn eku version .. is a required update.nnecution ayernnamennersionnninknnesunn..nnownloadnnrigonnnv..-alphannownloadnngo-ethereum (geth)nnv..nnownloadnnethermindnnv..nnownloadnnarningnn esu .. is a recommended release for the erge and ainnet users. .. remains erge-ready. his release provides additional robustness before the erge with some fies and improvements in sync, peering, and logging.nnarningnn rigon version v..-alpha fies invalid block production due to insufficient verification of digital signature components, block snapshot production that sometimes occurs during  reverse header download and a lot of smaller bugs and safety issues. ll rigon users are recommended to upgrade to this or a later version prior to the erge.nnarningnn geth version v.. contains a critical database issue, do not use this version, and if you have already upgraded, please upgrade to v.. as soon as possible.nnpgrade pecificationsnnonsensus-critical changes for he erge are specified in two placesnnhe consensus layer changes under thennellatrinndirectorynnof the consensus-specs repositorynnhe eecution layer changes under thennarisnnspecnnin the eecution-specs repositorynnn addition to these, two other specifications cover how the consensus and eecution layer clients interactnnhe ngine , specified in thenneecution-apis repositorynn, is used for communication between the consensus and eecution layersnnptimistic ync, specified in thennsyncnnfolder of the consensus-specs repository, is used by the consensus layer to import blocks as the eecution layer client is syncing and to provide a partial view of the head of the chain from the former to the latternnerge ug ounty onusnnll erge-related bounties for vulnerabilities have received a  multiplier between now and the th of eptember. ritical bugs are now worth up tonn$ million nn.nnee thennbug bounty programnnfor more details.nnnns a node operator, what should  donnost-merge, an thereum full node is the combination of a consensus layer () client which runs the proof-of-stake eacon hain and an eecution layer () client which manages the user-state and runs the computations associated with transactions. he  and  client communicate over an authenticated port using a new set of   methods called thennngine nn. he  and  client authenticate each other using a  secret.nnode operators should refer to their clients' documentation for instructions about how to generate and configure this value.nnn other words, if you were already running a node on the eacon hain, you now also need to run an eecution layer client. imilarly, if you were running a node on the current proof-of-work network, you will need to run a consensus layer client. or them to communicate securely, a  token must be passed to each client. n update to thenn'un a ode' sectionnnof the ethereum.org website goes over these steps in more detail.nnt is worth emphasizing that while they are both part of consensus layer client releases, running a eacon ode is distinct from running a alidator lient. takers must run both, but node operators only need the former.nnhis postnneplains the difference between both components in more detail.nnlso, note that each layer will maintain an independent set of peers and epose its own s. henneaconnnandnn nns will both continue working as epected.nns a staker, what do  need to donns eplained above,nnvalidators on the eacon hain will need to run an eecution layer client after he erge in addition to their consensus layer clients.nnre-merge, this was strongly recommended, but some validators have outsourced these functions to third-party providers. his was possible because the only data required on the eecution layer were updates to the deposit contract.nnost-merge, validators must ensure that user transactions and state transitions blocks that they create and attest to are valid. o do this, each beacon node must be paired with an eecution layer client. ote that multiple validators can still be paired to a single beacon node & eecution layer client combo. his epands validators' responsibilities but also gives a validator who proposes a block the right to its associated transaction priority fees (which currently go to miners).nnhile validator rewards still accrue on the eacon hain and will require a subsequent network upgrade to be withdrawn, transaction fees will be paid, burned, and distributed on the eecution layer. alidators can specify any thereum address as a recipient for transaction fees.nnfter updating your consensus client, be sure to set thennfee recipientnnas part of your validator client configurations to ensure transaction fees are sent to an address you control.nnf you have staked using a third-party provider, it is up to your selected provider to specify how these fees are allocated.nnhe taking aunchpad has annerge eadiness hecklistnnthat stakers can use to ensure they have gone through each step of the process. thtaker have also hostednnalidator rep orkshopsnn, with more being planned.nntakers who wish to run a validator on a testnet in preparation for the mainnet proof-of-stake transition can do so on oerli (now merged with rater), which also has anntaking aunchpad instancenn.nnhy is the estimated date for thennerminal otal ifficultynnso broadnnhe incremental difficulty added per block is dependent on the network hash rate which is volatile. f more hash rate joins the network,nnnnwill be reached sooner. imilarly, if hash rate leaves the network,nnnnwill be reached later. n the event of a significant drop in hash rate levels, ann verridenncould be coordinated as was done onnnopstennn.nns an application or tooling developer, what should  donns eplained in annprevious postnn, he erge will have only minimal impact on a subset of contracts deployed on thereum, none of which should be breaking. dditionally, the lion's share of user  endpoints remain stable (unless you use proof-of-work specific methods such asnneth_getorknn).nnhat said, most applications on thereum involve much more than on-chain contracts.nnow is the timennto ensure that your front-end code, tooling, deployment pipeline and other off-chain components work as intended. e strongly recommend that developers run through a complete testing & deployment cycle on epolia or oerli and report any issues with tools or dependencies to those projects' maintainers. f you are unsure where to open an issue, please usennthis repositorynn.nndditionally, please note that all testnets aside from epolia and oerli will be deprecated post-merge. f you are a user of opsten, inkeby or iln, you should plan to migrate to oerli or epolia. ore information about this can be foundnnherenn.nns an thereum user or ther holder, is there anything  need to donnhether you are using thereum applications on-chain, holding ther on an echange or in a self-custodied wallet, you do not have to do anything. f an application, echange or wallet you use offers additonal instructions or recommendations, you should verify these are actually coming from them. e on the lookout for scams!nns a miner, is there anything  need to donno. f you are mining on the thereum mainnet, you should be aware that the network will operate entirely under proof-of-stake after he erge. t that point, mining will no longer be possible on the network.nnhat happens if  am a miner or node operator and  do not participate in the upgradennf you are using an thereum client that is not updated to the latest version (listed above), your client will sync to the pre-fork blockchain once the upgrade occurs.nnou will be stuck on an incompatible chain following the old rules and will be unable to send ther or operate on the post-merge thereum network.nns a validator, can  withdraw my stakenno. he erge is the most complicated upgrade to thereum to date. o minimize risks of network disruptions, a minimal approach was taken which ecluded any non-transition changes from this upgrade.nnithdrawals from the eacon hain will likely be introduced in the first upgrade after he erge. pecifications for both thennconsensusnnandnneecutionnnlayers are in progress.nn have more questions, where can  ask themnnoin client team developers, members of taker, researchers, and more on the netnnerge ommunity allnnon riday, ept  at  !nnhank ounnthereum's transition to proof-of-stake has been annloooongnntime coming. hank you to everyone who contributed to researching, specifying, developing, analyzing, testing, breaking, fiing, or eplaining everything that got us to he erge.nnhere have been far too many contributors over the years to list here, but you know who you are. ithout all of you in the bazaar, we wouldn't have built this cathedral.nnwen merge ery 🔜.nnhank you to oseph chweitzer and omo aito for the cover image for this post!