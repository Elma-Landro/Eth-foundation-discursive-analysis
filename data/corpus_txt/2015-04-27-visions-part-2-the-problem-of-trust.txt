Titre: Visions, Part 2: The Problem of Trust\nAuteur: Vitalik Buterin\nDate: April 27, 2015\nURL: https://blog.ethereum.org/2015/04/27/visions-part-2-the-problem-of-trust\nCatégorie: Non catégorisé\n\n==================================================\n\npecial thanks to obert ams, avin ood, ark arpeles and countless cryptocurrency critics on online forums for helping to develop the thoughts behind this articlennf you were to ask the average cryptocurrency or blockchain enthusiast what the key single fundamental advantage of the technology is, there is a high chance that they will give you one particular predictable answer it does not require trust. nlike traditional (financial or other) systems, where you need to trust a particular entity to maintain the database of who holds what quantity of funds, who owns a particular internet-of-things-enabled device, or what the status is of a particular financial contract, blockchains allow you to create systems where you can keep track of the answers to those questions without any need to trust anyone at all (nnat leastnninnntheorynn). ather than being subject to the whims of any one arbitrary party, someone using a blockchain technology can take comfort in the knowledge that the status of their identity, funds or device ownership is safely and securely maintained in an ultra-secure, trustless distributed ledger acked y ath™.nnontrasting this, however, there is the standard critique that one might hear on forums likennbuttcoinnn what eactly is this "trust problem" that people are so worried about ronically enough, unlike in "crypto land", where echanges seem to routinelynndisappearnnwithnnmillionsnnofnndollarsnninnncustomer fundsnn, sometimes after apparentlynnsecretly being insolvent for yearsnn, businesses in the real world don't seem to have any of these problems. ure, credit card fraud eists, and is annmajor source of worrynnat least among mericans, but the total global loss is a merenn$ billionnn- less than .% of global , compared to the to loss that seems to have cost potentially more thannnthe value of all itcoin transactions in that yearnn. t least in the developed world, if you put your money in a bank, it's safe even if the bank goes awry, your funds are in most cases protected up to over $, by your national equivalent of the  - even in the case of the yprus depositor haircut, everything up to the deposit insurance limit was kept intact. rom such a perspective, one can easily see how the traditional "centralized system" is serving people just fine. o what's the big dealnnrustnnirst, it is important to point out that distrust is not nearly the only reason to use blockchains  mentioned some much more mundane use cases innnthe previous part of this seriesnn, and once you start thinking of the blockchain simply as a database that anyone can read any part of but where each individual user can only write to their own little portion, and where you can also run programs on the data with guaranteed eecution, then it becomes quite plausible even for a completely non-ideological mind to see how the blockchain might eventually take its place as a rather mundane and boring technology among the likes of ongo, ngular andnncontinuation-based web serversnn- by no means even close to as revolutionary as the internet itself, but still quite powerful. owever, many people are interested in blockchains specifically because of their property of "trustlessness", and so this property is worth discussing.nno start off, let us first try to demystify this rather complicated and awe-inspiring concept of "trust" - and, at the same time, trustlessness as its antonym. hat eactly is trust ictionaries in this case tend not to give particularly good definitions for eample, if we check iktionary,nnwe getnnnnonfidence in or reliance on some person or quality e needs to regain her trust if he is ever going to win her back.nnependence upon something in the future hope.nnonfidence in the future payment for goods or services supplied credit  was out of cash, but the landlady let me have it on trust.nnhere is also thennlegal definitionnnnn relationship created at the direction of an individual, in which one or more persons hold the individual's property subject to certain duties to use and protect it for the benefit of others.nneither is quite precise or complete enough for our purposes, but they both get us pretty close. f we want a more formal and abstract definition, we can provide one as followsnntrust is a model of a particular person or group's epected behavior, and the adjustment of one's own behavior in accordance with that modelnn. rust is a belief that a particular person or group will be affected by a particular set of goals and incentives at a particular time, and the willingness to take actions that rely on that model being correct.nnust from the more standard dictionary definition, one may fall into the trap of thinking that trust is somehow inherently illogical or irrational, and that one should strive hard to trust as little as possible. n reality, however, can see that such thinking is completely fallacious. veryone has beliefs about everything in fact, there arenna setnnofnntheoremsnnwhich basically state that if you are a perfectly rational agent, you pretty much have to have a probability in your head for every possible claim and update those probabilities according to certain rules. ut then if you have a belief, it is irrationalnnnotnnto act on it. f, in your own internal model of the behavior of the individuals in your local geographic area, there is a greater than .% chance that if you leave your door unlocked, someone will steal $ worth of goods from your house, and you value the inconvenience of carrying your key around at $, then you should lock your door and bring the key along when you go to work. ut if there is a less than .% chance that someone will come in and steal that much,nnit is irrational to lock the doornn.nn"rustlessness" in its absolute form does not eist. iven any system that is maintained by humans, there eists a hypothetical combination of motivations and incentives that would lead those humans to successfully collude to screw you over, and so if you trust the system to work you are necessarily trusting the total set of humans not to have that particular combination of motivations and incentives. ut that does not mean that trustlessness is not a useful direction to strive in. hen a system is claiming to be "trustless", what it is actually trying to do isnnepand the possible set of motivationsnnthat individuals are allowed to have while still maintaining a particular low probability of failure. hen a system is claiming to be "trustful", it is trying tonnreduce the probability of failure given a particular set of motivationsnn. hus, we can see the "trustlessness" and "trustfulness", at least as directions, are actually the eact same thingnnote that in practice the two may be different connotatively "trustless" systems tend to try harder to improve system trustability given a model where we know little about individuals' motivations, and "trustful" systems tend to try harder to improve system trustability given a model where we know a lot about individuals' motivations, and we know that those motivations are with higher probability honest. oth directions are likely worthwhile.nnnother important point to note is that trust is not binary, and it is not even scalar. ather, it is of key importancennwhat it is that you are trusting people to do or not to donn. ne particular counterintuitive point is that it is quite possible, and often happens, that we trust someone not to do , but we don't trust them not to do ,nneven though that person doing  is worse for you than them doing nn. ou trust thousands of people every day not to suddenly whip a knife out of their pockets as you pass by and stab you to death, but you do not trust complete strangers to hold on to $ worth of cash. f course, the reason why is clear no one has an incentive to jump out at you with a knife, and there is a very strong disincentive, but if someone has your $ they have a $ incentive to run away with it, and they can quite easily never get caught (and if they do the penalties aren'tnnthatnnbad). ometimes, even if incentives in both cases are similar, such counterintuitive outcomes can come simply because you have nuanced knowledge of someone else's morality as a general rule, you can trust that people are good at preventing themselves from doing things which are "obviously wrong", but morality does quite often fray around the edges where you can convince yourself to etend the envelope of the grey (see ruce chneier's concept of "moral pressures" innniars and utliersnnand an riely'snnhe onest ruth about ishonestynnfor more on this).nnhis particular nuance of trust has direct relevance in finance although, since the  financial crisis, there has indeed been an upsurge in distrust in the financial system, the distrust that the public feels is not a feeling that there is a high risk that the bank will steal the people's assets blatantly and directly and overwrite everyone's bank balance to zero. hat is certainly thennworstnnpossible thing that they could do to you (aside from the  jumping out at you when you enter the bank branch and stabbing you to death), but it is not annlikelynnthing for them to do it is highly illegal, obviously detectable and will lead to the parties involved going to jail for a long long time - and, just as importantly, it is hard for the bank  to convince themselves or their daughter that they are still a morally upright person if they do something like that. ather, we are afraid that the banks will perform one of many more sneaky and mischievious tricks, like convincing us that a particular financial product has a certain eposure profile but hiding the black swan risks. ven while we are always afraid that large corporations will do things to us that arennmoderatelynnshady, we are at the same time quite sure that they won't do anythingnnetremelynnoutright evil - at least most of the time.nno where in today's world are we missing trust hat isnnournnmodel of people's goals and incentives ho do we rely on but don't trust, whonncouldnnwe rely on but don't because we don't trust them, what eactly is it that we are fearing they would do, and how can decentralized blockchain technology helpnninancennhere are several answers. irst, in some cases, as it turns out, the centralized big boys still very muchnncan'tnnbe trusted. n modern financial systems, particularly banks and trading systems, there eists a concept of "settlement" - essentially, a process after a transaction or trade is made the final result of which is that the assets that you boughtnnactuallynnbecome yours from a legal property-ownership standpoint. fter the trade and before settlement, all that you have is a promise that the counterparty will pay - a legally binding promise, but even legal bonds count for nothing when the counterparty is insolvent. f a transaction nets you an epected profit of .%, and you are trading with a company that you estimate has a chance of  in  of going insolvent on any particular day, then a single day of settlement time makes all the difference. n international transactions, the same situation applies, ecept this time the parties actually don't trust each other's intentions, as they are in different jurisdictions and some operate in jurisdictions where the law is actually quite weak or even corrupt.nnack in the old days, legal ownership of securities would be defined by ownership of a piece of paper. ow, the ledgers are electronic. ut then, who maintains the electronic ledger nd do we trust them n the financial industry more than anywhere else, the combination of a high ratio of capital-at-stake to epected-return and the high ability to profit from malfeasance means that trust risks are greater than perhaps almost any other legal white-market industry. ence, can decentralized trustworthy computing platforms - and very specifically,nnpolitically decentralizednntrustworthy computing platforms, save the daynnccording to quite a few people, yes they can. owever, in these cases, commentators such asnnim wansonnnhave pointed out a potential flaw with the "fully open" o/o approach it is a little too open. n part, there may be regulatory issues with having a settlement system based on a completely anonymous set of consensus participants more importantly, however, restricting the system can actually reduce the probability that the participants will collude and the system will break. ho would younnreallynntrust more a collection of  well-vetted banks that are clearly separate entities, located in different countries, notnnowned by the same investing conglomeratesnn, and are legally accountable if they collude to screw you over, or a group ofnnmining firmsnnof unknown quantity and size with no real-world reputations, % of whose chips may be producednnin aiwan or henzhennn or mainstream securities settlement, the answer thatnnmostnnpeople in the world would give seems rather clear. ut then, in ten years' time, if the set of miners or the set of anonymous stakeholders of some particular currency proves itself trustworthy, eventually banks may warm up to even the more "pure cryptoanarchic" model - or they may not.nnnteraction and ommon nowledgennnother important point is that even if each of us has some set of entities that we trust, not all of us havennthe samennset of entities.  is perfectly fine trusting , but  would likely not want its own critical infrastructure to be running on top of oogle's cloud. ven more pertinently, neither  nor oogle may be interested in having their critical infrastructure running on top of encent's cloud, and potentially increasing their eposure to the hinese government (and likewise, especially following the recent  scandals, there has been increasing interest innnkeeping one's data outside the nn, although this must be mentioned with the caveat that much of the concern is about privacy, not protection against active interference, and blockchains are much more useful at providing the latter than the former).nno, what if  and encent want to build applications that interact with each other heavily ne option is to simply call each other's services via -, or some similar framework, but as a programming environment this is somewhat limited every program must either live in  land, and take  milliseconds round-trip to send a request to encent, or live in encent land, and take  milliseconds to send a request to . eliability also necessarily drops below %. ne solution that may be useful in some cases is to simply have both pieces of code living on the same eecution environment, even if each piece has a different administrator - but then, the shared eecution environment needs to be trusted by both parties. lockchains seem like a perfect solution, at least for some use cases. he largest benefits may come when there is a need for a very large number of users to interact when it's just  and encent, they can easily make some kind of tailored bilateral system, but when  companies are interacting with each other, you would need either nnnnbilateral systems among every pair of companies, or you can more simply make a single shared system for everyone - and that system might as well be called a blockchain.nnrust for the est of snnhe second case for decentralization is more subtle. ather than concentrating on thennlacknnof trust, here we emphasize thennbarrier to entrynnin becoming a locus of trust. ure, billion dollar companies can certainly become loci of trust just fine, and indeed it is the case that they generally work pretty well - with a few important eceptions that we will discuss later on. owever, their ability to do so comes at a high cost. lthough the fact that so many itcoin businesses have managed to abscond with their customers' funds is sometimes perceived as a strike against the decentralized economy, it is in fact something quite different it is a strike againstnna economy with low social capitalnn. t shows that the high degree of trust that mainstream institutions have today is not something that simply arose because powerful people are especially nice and tech geeks are less nice rather, it is the result of centuries of social capital built up over a process which would take many decades and many trillions of dollars of investment to replicate. uite often, the institutions only play nice because they are regulated by governments - and the regulation itself is in turn not without large secondary costs. ithout that buildup of social capital, well, we simply have thisnnnd lest you think that such incidents are a unique feature of "cryptoland", back in the real world we also have thisnnhe key promise of decentralized technology, under this viewpoint, is not to create systems that are even more trustworthy than current large institutions if one simply looks at basic statistics in the developed world, one can see that many such systems can quite reasonably be described as being "trustworthy enough", in that their annual rate of failure is sufficiently low that other factors dominate in the choice of which platform to use. ather, the key promise of decentralized technology is to provide a shortcut to let future application developers get there fasternnraditionally, creating a service that holds critical customer data or large quantities of customer funds has involved a very high degree of trust, and therefore a very large degree of effort - some of it involving complying with regulations, some convincing an established partner to lend you their brand name, some buying etremely epensive suits and renting fake "virtual office space" in the heart of downtown ew ork or okyo, and some simply being an established company that has served customers well for decades. f you want to be entrusted with millions, well, better be prepared to spend millions.nnith blockchain technology, however, the eact opposite is potentially the case.  -of- multisig consisting of a set of random individuals around the world may well have annlowernnprobability of failure than all but the largest of institutions - and at a millionth of the cost. lockchain-based applications allow developers to prove that they are honest - by setting up a system where they do not even have any more power than the users do. f a group of largely -to--year old college dropouts were to announce that they were opening a new prediction market, and asked people to deposit millions of dollars to them via bank deposit, they would likely be rightfully viewed with suspicion. ith blockchain technology, on the other hand,nnthey can release ugurnnas a decentralized application, and they can assure the whole world that their ability to run away with everyone's funds is drastically reduced. articularly, imagine what would be the case if this particular group of people was based in ndia, fghanistan or, heck, igeria. f they were not a decentralized application, they would likely not have been able to get anyone's trust at all. ven in the developed world, the less effort you need to spend convincing users that you are trustworthy, the more you are free to work on developing your actual product.nnubtler ubterfugenninally, of course, we can get back to the large corporations. t is indeed a truth, in our modern age, that large companies are increasingly distrusted - they are increasingly distrusted by regulators, they are increasingly distrusted by the public, and they are increasingly distrusted by each other. ut, at least in the developed world, it seems obvious that they are not going to go around zeroing out people's balances or causing their devices to fail in arbitrarily bad ways for the fun of it. o if we distrust these behemoths, what is it that we are afraid they will do rust, as discussed above, isn't a boolean or a scalar, it's a model of someone else's projected behavior. o what are the likely failure modes in our modelnnhe answer generally comes from the concept of base-layer services, as outlined in thennprevious part of this seriesnn. here are certain kinds of services which happen to have the property that they () end up having other services depending on them, () have high switching costs, and () have high network effects, and in these cases, if a private company operating a centralized service creates a monopoly they have substantial latitude over what they can do to protect their own interests and establish a permanent position for themselves at the center of society - at the epense of everyone else. he latest incident that shows the danger camennone week agonn, when witter cut video streaming service eerkat off of its social network . eerkat's offense allowing users to very easily import their social connections from witter.nnhen a service becomes a monopoly, it has the incentive to keep that monopoly. hether that entails disrupting the survival of companies that try to build on the platform in a way that competes with its offerings, or restricting access to users' data inside the system, or making it easy to come in but hard to move away, there are plenty of opportunities to slowly and subtly chip away at users' freedoms. nd we increasingly do not trust companies not to do that. uilding on blockchain infrastructure, on the other hand, is a way for an application developer to commit not to be a jerk, forever.nn... nd azinessnnn some cases, there is also another concern what if a particular service shuts down he canonical eample here is the various incarnations of "eminde" services, which you can ask to send you a particular message at some point in the future - perhaps in a week, perhaps in a month, and perhaps in  years. n the -year case (and realistically even the -year case), however, all currently eisting services of that kind are pretty much useless for a rather obvious reason there is no guarantee that the company operating the service will continue to eist in  years, much less . ot trusting people not to disappear is a no-brainer for someone to disappear, they do not even have to be actively malicious - they just have to be lazy.nnhis is a serious problem on the internet, wherenn% of documents cited in court casesnnare no longer accessible because the servers on which the pages were located are no longer online, and to that end projects likennnnare trying to resolve the problem via a politically decentralized content storage network instead of referring to a file by the name of the entity that controls it (which an address like "https//blog.ethereum.org////visions-part--the-value-of-blockchain-technology/" basically does), we refer to the file by the hash of the file, and when a user asks for the file any node on the network can provide it - in the project's own words, creating "the permanent web". lockchains are the permanent web for software daemons.nnhis is particularly relevant in the internet of things space in annrecent  reportnn, one of their major concerns with the default choice for internet of things infrastructure, a centralized "cloud", that they cite is as followsnnhile many companies are quick to enter the market for smart, connected devices, they have yet to discover that it is very hard to eit. hile consumers replace smartphones and s every  to  months, the epectation is for door locks,  bulbs and other basic pieces of infrastructure to last for years, even decades, without needing replacement ... n the o world, the cost of software updates and fies in products long obsolete and discontinued will weigh on the balance sheets of corporations for decades, often even beyond manufacturer obsolescence.nnrom the manufacturer's point of view, having to maintain servers to deal with remaining instances of obsolete products is an annoying epense and a chore. rom the consumer's point of view, there is always the nagging fear what if the manufacturer simply shrugs off this responsibility, and disappears without bothering to maintain continuity aving fully autonomous devices managing themselves using blockchain infrastructure seems like a decent way out.nnonclusionnnrust is a complicated thing. e all want, at least to some degree, to be able to live without it, and be confident that we will be able to achieve our goals without having to take the risk of someone else's bad behavior - much like every farmer would love to have their crops blossom without having to worry about the weather and the sun. ut economy requires cooperation, and cooperation requires dealing with people. owever, impossibility of an ultimate end does not imply futility of the direction, and in any case it is always a worthwhile task to, whatever our model is, figure out how to reduce the probability that our systems will fail.nnecentralization of the kind described here is not prevalent in the physical world primarily because the duplication costs involved are epensive, and consensus is hard you don't want to have to go to five of eight government offices in order to get your passport issued, and organizations where every decision is made by a large eecutive board tend to decrease quickly in efficiency. n cryptoland, however, we get to benefit from forty years of rapid development of low-cost computer hardware capable of eecuting billions of processing cycles per second in silicon - and so, it is rational to at least eplore the hypothesis that the optimal tradeoffs should be different. his is in some ways the decentralized software industry's ultimate bet - now let's go ahead and see how far we can take it.nnhe net part of the series will discuss the future of blockchain technology from a technical perspective, and show what decentralized computation and transaction processing platforms may look like in ten years' time.