Titre: EF-Supported Teams: Research & Development Roundup\nAuteur: Ethereum Foundation Team\nDate: Team on August 12, 2021\nURL: https://blog.ethereum.org/2021/08/12/ef-supported-teams-research-and-development-update-2021-pt-2\nCat√©gorie: Non cat√©goris√©\n\n==================================================\n\nelcome to ondon! his is an eciting time for the thereum ecosystem, and the pace will only pick up further as we approach ltairnn]nn]nnandnnthe ergennin the months ahead.nnhe eacon hain now has .+ million ther staked, and + active validators online across five clients, and the network is nownnburning thernnas part of the changes made with the ondon update.nns always, there‚Äôs much more progress being made by -supported projects and teams that help to improve our thereum eperience. his roundup series is an opportunity to highlight their efforts to grow and improve thereum as a whole. ncluded in this edition are updates from many teams highlighted innnthe previous upported eams updatenn, and more.nnnjoy!nncosystem upport rogramnnuthored by  eamnnffice hoursnnoad to evcon rantsnne‚Äôre collaborating with the evcon team on a round of small grants and other support for community event organizers. rganizers of virtual and in-person events can apply directly for grants of $- to cover costs like space or equipment rental, swag, snacks or other incidentals. earn more and applynnherenn.nnee esta p√°gina en espa√±olnnnnÁî®‰∏≠ÊñáÈòÖËØªÊú¨È°µnn.nne also recently published ournn llocation pdatenn, with details of  grants awarded in  totaling $,,.nnth esearchnneyond the content that makes it into anny yan‚Äôsnninalizednnseries, the research team has continued into areas including stateless research, proofs of custody for  eecution, sharding specs and prototypes, and other scaling/security research. ost of their progress can be found on posts on ethresear.ch.nndditionally, find a few of their recent posts and other content belownn e are the 's esearch eam (t.   une, )nninalized #nn- anny yannninalized #nn- anny yannn country's worth of power, no more!nn- arl eekhuizennnthereum.orgnnuthored by am ichardsnno make our work more accessible and to foster more community collaboration, our team publishes an overview of our quarterly roadmap goals. ee last quarter's roadmap here #.nnreetings fellow thereans!nnappy  summer üòé (or winter for our friends in the southern hemisphere)! ope you're enjoying your time in this space - we know we are! s always,nnour vision with ethereum.orgnnis to create the best portal for thereum's growing community, and to serve as the front door to thereum for the millions of new visitors each month.nnontent updatesnnn  ournnethereum.orgnnproduct focus will be to keep pace with all the incredible progress in the space so that our broader community can stay informed on developments on thereum network upgrades, ayer  projects, developer tooling, user applications and more.nnhank you to the hundreds of folks who have contributed content so far ‚ù§Ô∏ènnearn how to get involvednn funding round for th projectsnnew funding mechanisms for public goods offer massive potential for the thereum ecosystem and the world beyond crypto. hile not directly related to ethereum.org, our team is part of the thereum oundation, which is one of the largest funders of grants and public goods within the ecosystem. e want to increase the cultural momentum around ecosystem funding for public goods as well as eperiment with mechanisms in which support is allocated to the ecosystem.nne'll continue our work from  with teams in the space, aiming to launch ann.fundnnround for th projects on an  mainnet by the end of .nnhis work will also allow our team to stay on top of the latest tools, technologies, and best practices involved with dapp development, from testing and deployment tools to identity solutions and ayer  technologies. e plan to to bring these first-hand insights back intonnour developer resourcesnn.nnearn more, follow along & get involvednnranslation rogramnnhanks to our , volunteer translators over the past couple years,nnethereum.org now supports  languagesnn! et as the website has grown & is constantly updated to keep pace with the developments in the space, many of our languages have fallen somewhat out of date. e'll be making a push in  to update + of our translations to more recent versions of our website content.nnith our new ranslation rogram ead, lukassim, we also plan to improve ournnsupporting documentationnn& improve use of our translation tools to improve consistency and quality throughout the translation process.nnearn how to get involvednnommunity growthnns you can see from all our goals above, our success is driven by our open source community of collaborators. ontributors come in many shapes & sizes - translators, developers, copywriters, designers, eperts & amateurs. e want to continue to educate & empower folks who are curious to get involved in the thereum ecosystem & our ethereum.org community.nnur new ommunity ead, minimalsm, will be leading efforts to support & empower our growing ethereum.org community. tay tuned for the specific initiatives we plan to roll out this quarter!nnave ideas each out onnnour iscord servernnor here on itub.nnow does that soundnne appreciate feedback on our roadmap. ur guiding principles are based on delivering the most value in the shortest time, so if there's something you think we should work on, please let us know! e welcome ideas and s from anyone in the community.nnore on contributingnnpsilon (previously wasm)nnuthored by le eregszaszinnhe wasm team has rebranded to a new name psilon.nnt is a reference to the state transition function defined in thennellow apernn. e want to signal that our work for a long time has been more broad than only wasm.nnhe team‚Äôs core concern is the eecution environment / engine of thereum (aka the  or any future versions or replacements of it). e provide analysis and implementation of own and third party proposals (i.e. new s proposing changes to the ), provide tooling (nnevmcnn,nnevmonenn,nnfizzynn), and support eisting teams (e.g. olidity, go-ethereum, ilkworm) with implementation and analysis.nnost of our content isnnpublished herenn.nn bject ormat ()nnn thennprevious updatennwe have mentioned the  bject ormat () as a new proposal. n the last three months a lot of progress has been made. he first step,nn-nn, has been accepted into the ondon update -- this only reserves a starting byte which can be used to introduce  in a future protocol update.nn concrete proposal,nn-nn, which introduces the container format and code-and-data separation has been published. urthermore there is annneplainer documentnngiving background and a roadmap (this will be updated as we go), and we also gave a an presentation (nnvideonnandnnslidesnn).nnoth - and - have been implemented in geth and evmone.nnastly, we shared a shortnnproposal to revamp - using nnandnnother teams considered building on nn.nnddress pace tension ()nnhe second big topic for us has been the address space etension, which is a requirement fornnthe state epiry roadmapnn.nnt was first described in an thereum agicians post and various discussions on the th & discord.nnur specificationnnbuilds on all this prior work and aims to give a coherent overview of how to implement this change. n additional document listing a comprehensive set ofnntest casesnnwas also released.nnhile the core of the proposal is not too complicated, there arennmany implicationsnn. his discussion document is the basis of the ongoing ddress pace tension orking roup, which already had three calls (recordingsnn#nn,nn#nn, andnn#nn).nnther researchnnn the topic of code merkleization / code chunking, we published a thoroughnnanalysis of the impact of code chunking costsnn. he new version of thennverkle treennproposal reconsidered costs based on the results.nnhe idea of annnnninstructionnnwas prompted by the research onnnnn. e published annshort writeupnndetailing this proposal, providing a pricing, and evaluating the benefits for regular contracts besides the use in .nnnn.. releasennerlin support, new callbacks to update global account/storage accessed list.nn.. releasennondon support andnnblock_base_feennadded to transaction contetnnevmc runnnwithnn--benchnnevmonenn.. releasennerlin supportnnptimizations in aseline interpreter's jumpdest analysisnnmprovements to the ++ nn.. releasennondon support andnnnninstruction implementationnnnstruction tracing followingnn-nnformat added to aseline interpreternnption to count the number of eecuted instructions in aseline interpreternnore optimizations in aseline interpreter and innnintnnandnnethashnnlibraries.nnmprovements to benchmarking toolsnnormal erificationnnhe ormal erification eam will post their own updates (covering ct, hevm, hecker and more)nnherenn, and in recent months, some of the notes saw improvement as well.nnctnn backend rewritennretty printed countereamplesnnhevmnnnvariant testingnnerlin supportnnolidity . supportnnymbolic constructor argumentsnnourcemap support for olidity immutablesnnheckernnupport to olidity free functions/constantsnnternal calls to known codennrusted modenneport contract invariants to the usernnethnnauthored by eli angennn , we shipped four releases of eth. he team was mostly busy implementing
the ondon fork changes, especially -. e also conducted a lot of testing of
the new snap sync, which is now enabled by default in eth.nnnd as always, make sure to download thennlatest versionnnof eth!nnavascript eamnnuthored by olger rewesnnn  we substantially grew our team and had three team members joining to work on the thereum libraries - ndrew, mmett and abriel. ur work itself largely concentrated on getting - ready to ship and overall make our libraries ready for the ondon . he latest round ofnnreleasesnn( v..,  v.. and others) from early uly now come with finalized ondon support including all hardfork block numbers and are ready to send - style ts over the wire.nnhe  t library update brought in a lot of community requests and responses and we took the occasion to have a closer look at the usability of the library. s some follow-up we improved a lot on documentation and also made several substantial usability improvements which should make the library easier to use. e also caught up with the recent broader trend of thereum activity moving to side chains and  and our t library is now better prepared to send ts to networks like rbitrum, olygon or aihain, see tnnnnfor details.nnnd, worth to mention this again, though thennreleasennitself is already some while ago (late pril) due to a lot of live testing we did along our thereum client development, our devpp library is now finally ready to be used in production and we are eager to see your use cases along digging deeper into the thereum devpp networking stack.nnome outlook we recently merged ournnfirst nnon ‚Äúhe erge‚Äù allowing our client some first interaction with an th . o client via . his will likely be followed by a lot of additional work and be a main work emphasis for the upcoming quarter.nnrivacy & caling plorationsnnuthored by hore ildebrandtnnhe rivacy & caling plorations team works to bridge the gap between cutting-edge research in zero-knowledge proofs, and application development on thereum.nnzknnhe goal of zk is to run smart contracts in a zk-rollup. nfortunately, the  was not designed to run in a zk circuit which makes it a challenge. rojects like zksync tackle this problem by recompiling to some other vm. e want to implement the full set of  opcodes directly into the zk circuits so a smart contract running on  can be deployed to  with minimal modifications. his will allow full compatibility with eisting tooling and enable us to leverage knowledge of the  that the ecosystem has built up over the past years.nne have put together a team over the past couple of months, got many of the hard research problems out of the way, and are in the process of designing and building the first prototypes.nne've defined two snarks to check the computation validity of the , a state proof and an  proof. he former protects the read-write consistency of the stack, memory, and storage. he latter checks the eecution integrity of opcodes.nne've specced out a way to do common arithmetics on  bit word in the circuit. e specified basic  opcodes and in the progress of implementation. e have test cases for witnessing  eecution created. nd we are in the process of specifying the way to do cross contract message calls.nnerpetual owers of aunnn eptember , we launched thennerpetual owers of aunnceremony ().  aims to benefit the zero-knowledge ecosystem, particularly zk- projects built on thereum, by partially easing the burden of trusted setup ceremonies. any zk- projects require two phases of parameter generation, and  replaces the first phase, which can be shared by all circuits. ndividual teams can choose any contribution from the ceremony to branch out and perform their own phase- setup.nnhis ceremony supports circuits up to  ^  constraints, which means that each contribution requires a  download, a -day computation, and a  upload. t the time of writing, we collected  contributions and all contribution files can be downloaded and independently verified against a public ceremonynntranscriptnn.nnrojects that are planning to use or have used the ceremony includenntornado.cashnn,nnemaphorenn,nnermeznn,nnnnandnnzkoprunn. he easiest way to contribute is to reach out to ei ie via elegram weijiek. isten tonnthis podcastnnto hear ei ie speak about the ceremony.nn hase  nnhe goal of a trusted setup is to securely generate zk- parameters. s long as one party in the ceremony behaves honestly and is not compromised, the entire setup is trustworthy. he computation can be split up into two phases. n the first phase (seennerpetual owers of aunn) participants generate powers of a secret (tau) on an ongoing basis. n the second phase, participants take the output of phase one and apply it to a specific circuit. rojects that want to conduct a trusted setup can reduce their work as only the (circuit specific) second phase needs to be performed.nnur goal with the  hase   project was to make it easy for projects to run a user-friendly public phase  trusted setup without having to develop their own infrastructure. e successfully performed a ceremony fornnzkoprunnwith a first version of the  and applied learnings from this process in thennlatest releasenn. f you want to learn more check out thennreponnand join ournntelegram channelnn.nnubblennptimistic ollups () allows greater layer  scalability with the use of on-chain data availability and fraud proofs. ubble allows for the creation of optimistic rollup chains with the same interface so that people can enter the rollup space once and then move between chains instantly at negligible costs and remove the need to ever "eit" the low cost rollup world.nney features include mass migrations and a global account registry. urn auctions will be used to decentralise the coordinator and to distribute  to ‚Äôs. ransfers to new accounts are possible directly from  without having to deposit on . ith the help of  signatures the team was able to achievenn~ tpsnn. he hubble  wallet aims to support other ‚Äôs such as rbitrum, ptimism and uel.nnubble's code is available onnnithubnn. e have a stable devnetnnup and runningnn, completed database work and multi-token t pool. et step is polishing clients and we are targeting a testnet release soon.nnkoprunnzkopru (zk-optimistic-rollup) is a layer- scaling solution for private transactions using zk- and optimistic rollup. t supports private transfer and private atomic swap within the layer- network between , ,  at a low cost. t also provides instant withdrawal with pay-in-advance features and compliance compatibility using spending key and viewing keys. anseobnnpresentednnthe system at zk-summit.
e havenncompleted a trusted setupnnfor the project (one of the largest ever conducted). e also completed an audit with east uthority and are in the process of doing a second one. ithin the net couple ofnnweeks we will launch koprunnon public testnet and, if all goes well, also on mainnet. tay tuned for updates onnnour medium blognnand join thenntelegram groupnn.nnlind indnnlind indnnis a pp network allowing users to search for others without revealing their identity. fter a successful search, the user can prove the search path eists in the network with a -based construction, without revealing the path itself. hennv.nnsearch protocol now works.nnor the net version of lind ind, we are changing our direction to build a privacy-reserved reputation system in a peer-to-peer network, based onnnigenrustnn. o learn more and discuss, please join thenntelegram groupnn.nnnirep & nirep ocialnnniepnnis a private and non-repudiable reputation system. sers can receive positive and negative reputation from attesters, and voluntarily prove that they have at least a certain amount of reputation without revealing the eact amount. oreover, users cannot refuse to receive reputation from an attester. e are using nire to buildnnnirep ocialnn a reddit-like platform that allows users to privately accumulate karma.nne finished the core functions in nirep and nirep ocial, started building and designing the nirep ocial frontend. et steps are setting up a website and deploying nirep on testnet.nnoin thenntelegram channelnnto learn more and discuss!nn ig ggregationnnhe project aims to tower layer  transaction cost via a smart contract wallet. mart contract wallets give users additional safety mechanisms independent of any wallet  they may use, but are epensive to deploy (and use on) on thereum's layer . ayer  solutions like ptimism and rbitrum greatly lower this cost-barrier, and allow more users to benefit from smart contract wallets. his is primarily due to these being general purpose computation solutions. pps bridged to layer  will be more usable than those only on layer  thanks to faster transactions at lower-cost, but there are further gas savings to be had by pps and users. e use  signatures to reduce the on chain storage which can increase throughput to ~ tps. ou can check the project's current status onnnithubnn. et steps are to deploy to optimistic-kovan and gas cost/estimation as well as social recovery functionality.nn.fund for veryonennhe goal of the project is to make it easy for any community to run their own  round with clr.fund. e paused somennbacklog worknnto focus on an instance of clr.fund for cryptorelief. e ran into some scale limits for that instance, so refocused around upgrading clr.fund core contracts to use new   circuits and  ... art of clr.fund-deployer‚Äôs promise is to enable easy deployment of the clr.fund app, so we also participated in the recent work to coordinate merging select features from the  clr.fund instance‚Äôs app into the canonical clr.fund front end.
et focus it to coordinate trusted ceremonies for the new  circuits, to finalize the clr.fund subgraph and to deploy the net round of clr.fund. ee the projectnnon ithubnn.nnnterepnneputation is the key to trust. eople spend years building up their reputation on centralized social platforms, but they have to start from nothing whenever they start using a new app. nterep aims to make reputation portable to epand the compounding benefits of trusted human interactions across the web.nnheck out this blogpostnnfor the initial announcement. e're working on the net iteration of the project.nnesearchnnollup iff ompressionnne have investigated how the data footprint of a rollup can be further compressed for the airdrop use case. e used eddit‚Äôs airdrop as an eample. heck out ournnblogpostnnfor more info.nn ollup eviewsnnere conducting a series of security reviews on  ptimistic rollups starting with ptimisim. he review is completed and will be available soon, in the meantime we published thisnneplanatory blogpostnnon the system.  review for rbitrum is currently in the process.nnnnriginally proposed by italik uterin in annnethresear.ch postnn, systems built withnnnnmake collusion among participants difficult, while retaining the censorship resistance and correct-eecution benefits of smart contracts. lthough  can provide collusion resistance only if the coordinator is honest, a dishonest coordinator can neither censor nor tamper with its eecution. ee ei ie eplaining how  worksnnon outubenn. ou can use the nncommand-line interfacennto run a demo.nnhe team has completed a major milestone (version . of the smart contracts and zero-knowledge circuits), and we are completing end-to-end test suites. urthermore, we have started working with an auditor to challenge the security and functional assumptions of the system. e are still working closely with  folks working on an  funding round and also a ovid relief funding round. e have also begun work on an additional feature that allows for negative voting.nnoin thennelegram groupnnto learn more and discuss.nneminnuthored by ob tupaynnn  emi worked on its ability to interoperate with other tools in the ecosystem.nnee more innnour blognn.nnnake harmers ython cosystem y/rinity/eb.py/e]nne-langnnuthored by rant uerkernnn the past, e development has focused on supporting the features needed to compile certain demo contracts. he most advanced demo being the niswap  core contracts. n  of , development focus was shifted from demos to preparing for a release that can be used in production safely (aka  release). e plan on cutting an  release before the end of the year.nnere are some development highlights from nnour more alpha releases (.. - ..).nneleasesnnhttps//github.com/ethereum/fe/releasesnndded ust-style diagnostic messages.nnore runtime checks.nn data validationnnrithmetic overflow checksnnupport for custom error types and panic codes following olidity.nnied bugs identified by compiler fuzzing.nnhttps//github.com/ethereum/fe/issuesqis%issue+author%agroce+is%closednnaunched website with links to documentation and tutorials.nnhttps//fe.ethereum.org/nnegular development updates.nnlognnhttps//snakecharmers.ethereum.org/tag/fe/nnebpynnuthored by eri lowesnnhe main focus of the webpy team in  has been - compatibility and support for asynchronous - calls. sync work will continue into . ocumentation was a priority in  as well, adding many clarifications and eamples from commonly asked questions.nntateless thereumnnuthored by iper erriamnnhe tateless thereum effort continues. n the last months, we have filled in the last remaining roadmap items needed to deliver on the end goal of protocol level support for stateless block eecution.nnhennerkle riennis a new data structure for storing the thereum state which solves the problems of reducing block witnesses down to a manageable size. ur plans for ‚Äútate piry‚Äù give a clean and easy way to migrate the eisting heary patricia trie onto the new verkle trie structure.nnhis will also solve the ‚Äústate rent‚Äù problemnn, establishing economic bounds to the total state size.nnhe verkle trie migration also simplifies the process of establishing economic bounds on the size of block witnesses, something that was previously much more difficult under the heary patricia trie. he last major puzzle piece which needs to be figured out is how to eecute on ‚Äúddress pace tension‚Äù aka .nnhese items represent everything necessary to support stateless block eecution in our protocol, but maybe more importantly, they are significant upgrades to our protocol which address multiple long standing and difficult to fi issues.nnecurity ecurity / onsensus ests]nnuthored by artin olst wendenn was mainly focused on the ondon hardfork, implementation of   and cross client testing. nnneploitable flaw was foundnnin the specification which could cause maliciously bloated transactions/blocks. rigon has also been added to the fuzzing framework.nnhe ive testing framework identified issues in the  interoperability between esu and other clients, causing  echange to fail.nnoliditynnuthored by ranziska eintelnnn , we released olidity versions ..., .., .. and ..nnolidity ..nnaddsnncustom structured errorsnn,nnbytes.concat(...)nn, allows more fleible configuration of the hecker and fies annbug in the olidity  decoder vnn.nnolidity ..nnallows conversions fromnnbytesnntonnbytesnnvalues, adds thennverbatimnnbuiltin function to inject arbitrary bytecode in ul and fies several smaller bugs.nnolidity ..nnfies some non-critical but annoying bugs, especially a warning about unreachable code that is in fact reachable.nnolidity ..nnintroduces support for the ondon upgrade, includes various improvements to ul to  code transformation, the hecker and some bugfies. ondon support means support for thennnnopcode (- and -) which eposes the block‚Äôs base fee. his can be accessed via the globalnnblock.basefeennor usingnnbasefee()nnin inline assembly or ul.nnoreover, thennoptimizer documentationnnsection has been epanded with more material and we eplained the soliditylang.org domain umbrella and location of binaries on thennblognn.nneveral olidity team members presented at th. ou can watch their talks on ouubennhris eitwiessnernnolidity in nneo ltnnully utomated ormal erification ow far can we gonnranziska eintelnnourcify - owards afer ontract nteractions for umansnnast but not least, we are looking for annnew team membernn! lease reach out if you are a ++ engineer and are keen on developing and maintaining the olidity language and compiler and contributing to language design discussions and decisions!nnoratesnnuthored by hibaut chaeffernnhis quarter, the orates team made progress on all fronts.nnanguagennhen it comes to language features, orates now has improved support for constant generics, user-defined and low level constants. his enables clearer code which works on a variety of inputs, proof systems and curves. he u type was also added.nnuntimennuntime performance was improved thanks to cheaper conditionals and random array access as well as optimised comparison checks. hey translate into fewer generated constraints, which in turn reduces the cost of proof generation. n addition, an optional branch isolation feature was added to simulate short circuiting at eecution.nntandard ibrarynnhe standard library gained support for the  family of hash functions, as well as the -friendly oseidon hash function. nother major addition is the support for recursive proof composition.nnargetsnninally, orates now supports the arlin universal  as a target, which reduces the trust requirements to a single trusted setup phase.nnor a full list of the changes, check out thennchangelog