Titre: Ethereum Protocol Update 1\nAuteur: Stephan Tual\nDate: August 4, 2015\nURL: https://blog.ethereum.org/2015/08/04/ethereum-protocol-update-1\nCatégorie: Non catégorisé\n\n==================================================\n\nere comes the first rontier patch, and this is a big one!nnefore you go further, if your keys date back from o . rc or ++ .., note that you should regenerate all of your keys . hough some releases of the pre-alpha and alpha clients are secure, this depends on which codebase and which version. ou should assume that all keys generated prior to these clients are insecure and compromised. his, note, does not affect the pre-sale wallets.nnhawingnnhe thawingnnpull requestnnhas been merged for thenno clientnnand the aster branch has been updated. f you're still running branch release .. please switch to aster.nns for thenn++nnusers, they can also switch to master once merged, and binaries will be made available shortly. f you’d rather not update eth but still wish to help thaw the network, you can also just restart eth with an etra parameter of --gas-floor .nn thought that 'd also repost a quick eplanation on how the gas limit targeting process operates, and why we cannot guarantee a time by which we'll reach the  limit necessary to process one basic transaction per block.nnach miner runs a copy of geth or eth. n the rontier enesis release, both were set to target k and never deviate from that figure. ow, with this update, both clients will be updated to instead target  gas limit per block.nnut they cannot switch to a  gas limit just like that, because the protocol forces them to climb slowly at a certain rate. hat rate is equal to previous block limit / . ow, assuming all miners update their clients, and none of them mess around with the settings, we're going to reach  within h assuming a steady s block time including propagation. ut here's the thing - not all miners are going to update in time, some might forget and some might never update!nno, going forward, if a winning block is mined by a updated miner, the block limit will adjust upwards by the rate intended, but if it is mined by a 'lazy' miner who didn't update, it will adjust back downwards (as the lazy miner is still targeting k).nnor this reason, it will take a minimum of h to get to a  gas limit per block( tr per block), and a minimum of h to get to . n practice, it will likely take considerably longer than that.nnhis is where the free market come into play. echnically, miners could even have colluded a few days ago to modify the client code and make the network behave rather differently than what we had in mind. e merely act as advisers to the community.nnefault, community chosen, enesis blocknnhe enesis block we have seen adopted by the community has now been hardcoded in the clients, and you no longer need to specify the --genesis parameter to start eth or geth. hat said, you can still specify a hand-crafted genesis block if you want to start a private chain with different genesis, for eample.nnug fiesnnn the o client side, a series of bug fies and improvement have been merged into .., including readying ourselves for a o . release.nnied crash in chain managernn#nnog number fiesnn#nnrypto fi for go .nn#nni for eth_call and eth_estimateasnn#nnonsolennresendnnmethod finn#nnn the ++ client, a full eternal audit has been carried out on its ey tore and cryptography. ll actions recommended by our epert reviewers have been acted upon. umerous optimizations and security improvements were added to the clientnn unique ++ client feature is ecure ecrets all heap memory used to store your secrets is securely overwritten immediately after it is finishednnhe ++ client now relies upon boostrandom_device, giving a cryptographically secure random-number generationnneveral crash and build fies for letheronnnhancements to lethzero, especially regarding account informationnnhe  tool ‘ethkey’ can now be used in concert with lethero to inspect and sign an otherwise unsigned transaction. his allows you to have a completely air-gapped cold-wallet-devicennifficulty adjustment schemenn lot of you have been wondering how we would implement a switch from o to o in time for erenity. his will be handled by the newly introduced difficulty adjustment scheme, which elegantly guarantees a hard-fork point in the net  months.nnt works as follow starting from block , (very roughly  days from now), the difficulty will undergo an eponential increase which willnnonly become noticeable in about a yearnn. t that point (just around the release of the erenity milestone), we'll see a significant increase in difficulty which will start pushing the block resolution time upwards.nno, a year on, the network will continue to be useful for roughly - months, but eventually will reach an 'ce ge' of sorts the difficulty will simply be too high for anyone to find a block. his will allow us to introduce o, perhaps viannaspernn, if it proves itself.