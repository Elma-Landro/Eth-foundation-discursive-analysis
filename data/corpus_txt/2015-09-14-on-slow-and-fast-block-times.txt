Titre: On Slow and Fast Block Times\nAuteur: Vitalik Buterin\nDate: September 14, 2015\nURL: https://blog.ethereum.org/2015/09/14/on-slow-and-fast-block-times\nCatégorie: Non catégorisé\n\n==================================================\n\nne of the largest sources of confusion in the question of blockchain security is the precise effect of the block time. f one blockchain has a block time of  minutes, and the other has an estimated block time of  seconds, then what eactly does that mean hat is the equivalent of si confirmations on the -minute blockchain on the -second blockchain s blockchain security simply a matter of time, is it a matter of blocks, or a combination of both hat security properties do more comple schemes havennote this article will not go into depth on the centralization risks associated with fast block times centralization risks are a major concern, and are the primary reason not to push block times all the way down to  second despite the benefits, and are discussed at much more lengthnnin this previous articlenn the purpose of this article is to eplain why fast block times are desirable at all.nnhe answer in fact depends crucially on the security model that we are using that is, what are the properties of the attackers that we are assuming eist re they rational, byzantine, economically bounded, computationally bounded, able to bribe ordinary users or not n general, blockchain security analysis uses one of three different security modelsnnormal-case modelnn there are no attackers. ither everyone is altruistic, or everyone is rational but acts in an uncoordinated way.nnyzantine fault tolerance modelnn a certain percentage of all miners are attackers, and the rest are honest altruistic people.nnconomic modelnn there is an attacker with a budget of $ which the attacker can spend to either purchase their own hardware or bribe other users, who are rational.nneality is a mi between the three however, we can glean many insights by eamining the three models separately and seeing what happens in each one.nnhe ormal asennet us first start off by looking at the normal case. ere, there are no attackers, and all miners simply want to happily sing together and get along while they continue progressively etending the blockchain. ow, the question we want to answer is this suppose that someone sent a transaction, andnnknnseconds have elapsed. hen, this person sends a double-spend transaction trying to revert their original transaction (eg. if the original transaction sent $ to you, the double-spend spends the same $ but directs it into another account owned by the attacker). hat is the probability that the original transaction, and not the double-spend, will end up in the final blockchainnnote that, if all miners are genuinely nice and altruistic, they will not accept any double-spends that come after the original transaction, and so the probability should approach % after a few seconds, regardless of block time. ne way to rela the model is to assume a small percentage of attackers if the block time is etremely long, then the probability that a transaction will be finalized can never eceednn-nn, wherennnnis the percentage of attackers, before a block gets created. e will cover this in the net section. nother approach is to rela the altruism assumption and instead discuss uncoordinated rationality in this case, an attacker trying to double-spend can bribe miners to include their double-spend transaction by placing a higher fee on it (this is essentially eter odd'snnreplace-by-feenn). ence, once the attacker broadcasts their double-spend, it will be accepted in any newly created block, ecept for blocks in chains where the original transaction was already included.nne can incorporate this assumption into our question by making it slightly more comple what is the probability that the original transaction has been placed in a block that will end up as part of the final blockchain he first step to getting to that state is getting included in a block in the first place. he probability that this will take place afternnknnseconds is pretty well establishednnnfortunately, getting into one block is not the end of the story. erhaps, when that block is created, another block is created at the same time (or, more precisely, within network latency) at that point, we can assume as a first approimation that it is a  chance which of those two blocks the net block will be built on, and that block will ultimately "win" - or, perhaps, two blocks will be created once again at the same time, and the contest will repeat itself. ven after two blocks have been created, it's possible that some miner has not yet seen both blocks, and that miner gets lucky and created three blocks one after the other. he possibilities are likely mathematically intractable, so we will just take the lazy shortcut and simulate themnncript herennhe results can be understood mathematically. t  seconds (ie. % of the block time), the faster blockchain gives a probability of ~. slightly smaller than the matheatically predictednn-/e ~ .nnbecause of the possibility of two blocks being created at the same time and one being discarded at  seconds, the slower blockchain gives a probability of ., only slightly smaller than the predicted . because with -minute blocks the probability of two blocks being created at the same time is very small. ence, we can see that faster blockchains do have a slight disadvantage because of the higher influence of network latency, but if we do a fair comparison (ie. waiting a particular number of seconds), the probability of non-reversion of the original transaction on the faster blockchain is much greater.nnttackersnnow, let's add some attackers into the picture. uppose that portionnnnnof the network is taken up by attackers, and the remainingnn-nnis made up of either altruistic or selfish but uncoordinated (barring selfish mining considerations, up tonnnnit actually does not matter which) miners. he simplest mathematical model to use to approimate this is the weighted random walk. e start off assuming that a transaction has been confirmed fornnknnblocks, and that the attacker, who is also a miner, now tries to start a fork of the blockchain. rom there, we represent the situation with a score ofnnknn, meaning that the attacker's blockchain isnnknnblocks behind the original chain, and at every step make the observation that there is a probability ofnnnnthat the attacker will make the net block, changing the score tonnk-nnand a probability ofnn-nnthat honest miners mining on the original chain will make the net block, changing the score tonnk+nn. f we get tonnk  nn, that means that the original chain and the attacker's chain have the same length, and so the attacker wins.nnathematically, we know that the probability of the attacker winning such a game (assumingnn  .nnas otherwise the attacker can overwhelm the network no matter what the blockchain parameters are) isnne can combine this with a probability estimate fornnknn(using thennoisson distributionnn) and get the net probability of the attacker winning after a given number of secondsnncript herennote that for fast block times, we do have to make an adjustment because the stale rates are higher, and we do this in the above graph we setnn  .nnfor the s blockchain andnn  .nnfor the s blockchain. ence, the faster blockchain does allow the probability of non-reversion to reach  much faster. ne other argument that may be raised is that the reduced cost of attacking a blockchain for a short amount of time over a long amount of time means that attacks against fast blockchains may happen more frequently however, this only slightly mitigates fast blockchains' advantage. or eample, if attacks happen  more often, then this means that we need to be comfortable with, for eample, a .% probability of non-reversion, if before we were comfortable with a .% probability of non-reversion. owever, the probability of non-reversion approaches  eponentially, and so only a small number of etra confirmations (to be precise, around two to five) on the faster chain is required to bridge the gap hence, the -second blockchain will likely require ten confirmations (~three minutes) to achieve a similar degree of security under this probabilistic model to si confirmations (~one hour) on the ten-minute blockchain.nnconomically ounded ttackersnne can also approach the subject of attackers from the other side the attacker has $ to spend, and can spend it on bribes, near-infinite instantaneous hashpower, or anything else. ow high is the requisitennnnto revert a transaction afternnknnseconds ssentially, this question is equivalent to "how much economic ependiture does it take to revert the number of blocks that will have been produced on top of a transaction afternnknnseconds". rom an epected-value point of view, the answer is simple (assuming a block reward of  coin per second in both cases)nnf we take into account stale rates, the picture actually turns slightly in favor of the longer block timennut "what is the epected economic security margin afternnknnseconds" (using "epected" here in the formal probability-theoretic sense where it roughly means "average") is actually not the question that most people are asking. nstead, the problem that concerns ordinary users is arguably one of them wanting to get "enough" security margin, and wanting to get there as quickly as possible. or eample, if  am using the blockchain to purchase a $ coffee, then a security margin of $. (the current bitcoin transaction fee, which an attacker would need to outbid in a replace-by-fee model) is clearly not enough, but a security margin of $ is clearly enough (ie. very few attacks would happen that spend $ to steal $ from you), and a security margin of $ is not much better. ow, let us take this strict binary enough/not-enough model and apply it to a case where the payment is so small that one block reward on the faster blockchain is greater than the cost. he probability that we will have "enough" security margin after a given number of seconds is eactly equivalent to a chart that we already saw earliernnow, let us suppose that the desired security margin is worth between four and five times the smaller block reward here, on the smaller chain we need to compute the probability that afternnknnseconds at least five blocks will have been produced, which we can do via the oisson distributionnnow, let us suppose that the desired security margin is worth as much as the larger block rewardnnere, we can see that fast blocks no longer provide an unambiguous benefit in the short term they actually hurt your chances of getting more security, though that is compensated by better performance in the long term. owever, what they do provide is more predictability rather than a long eponential curve of possible times at which you will get enough security, with fast blocks it is pretty much certain that you will get what you need within  to  minutes. ow, let us keep increasing the desired security margin furthernns you can see, as the desired security margin gets very high, it no longer really matters that much. owever, at those levels, you have to wait a day for the desired security margin to be achieved in any case, and that is a length of time that most blockchain users in practice do not end up waiting hence, we can conclude that either (i) the economic model of security is not the one that is dominant, at least at the margin, or (ii) most transactions are small to medium sized, and so actually do benefit from the greater predictability of small block times.nne should also mention the possibility of reverts due to unforeseen eigencies for eample, annblockchain forknn. owever, in these cases too, the "si confirmations" used by most sites is not enough, and waiting a day is required in order to be truly safe.nnhe conclusion of all this is simple faster block times are good because they provide more granularity of information. n the  security models, this granularity ensures that the system can more quickly converge on the "correct" fork over an incorrect fork, and in an economic security model this means that the system can more quickly give notification to users of when an acceptable security margin has been reached.nnf course, faster block times do have their costsnn stale rates are perhaps the largest, and it is of course necessary to balance the two - a balance which will require ongoing research, and perhaps even novel approaches to solving centralization problems arising from networking lag. ome developers may have the opinion that the user convenience provided by faster block times is not worth the risks to centralization, and the point at which this becomes a problem differs for different people, and can be pushed closer toward zero by introducing novel mechanisms. hat  am hoping to disprove here is simply the claim, repeated by some, that fast block times provide no benefit whatsoever because if each block is fifty times faster then each block is fifty times less secure.nnppendi yal and irer's itcoin nn recent interesting proposal presented at thenncaling itcoinnnconference in ontreal is the idea of splitting blocks into two types (i) infrequent (eg.  minute heartbeat) "key blocks" which select the "leader" that creates the net blocks that contain transactions, and (ii) frequent (eg.  second heartbeat) "microblocks" which contain transactionsnnhe theory is that we can get very fast blocks without thenncentralization risksnnby essentially electing a dictator only once every (on average) ten minutes, for those ten minutes, and allowing the dictator to produce blocks very quickly.  dictator "should" produce blocks once every ten seconds, and in the case that the dictator attempts to double-spend their own blocks and create a longer new set of microblocks, annlashernn-style algorithm is used where the dictator can be punished if they get caughtnnhis is certainly an improvement over plain old ten-minute blocks. owever, it is not nearly as effective as simply having regular blocks come once every ten seconds. he reasoning is simple. nder the economically-bounded attacker model, it actually does offer the same probabilities of assurances as the ten-second model. nder the  model, however, it fails if an attacker has % hashpower then the probability that a transaction will be final cannot eceed % until at least two key blocks are created. n reality, which can be modeled as a hybrid between the economic and  scenarios, we can say that even though -second microblocks and -second real blocks have the same security margin, in the -second microblock case "collusion" is easier as within the -minute margin only one party needs to participate in the attack. ne possible improvement to the algorithm may be to have microblock creators rotate during each inter-key-block phase, taking from the creators of the last  key blocks, but taking this approach to its logical conclusion will likely lead to reinventing full-on lasher-style proof of stake, albeit with a proof of work issuance model attached.nnowever, the general approach of segregating leader election and transaction processing does have one major benefit it reduces centralization risks due to slow block propagation (as key block propagation time does not depend on the size of the content-carrying block), and thus substantially increases the maimum safe transaction throughput (even beyond the margin provided through thereum-esque uncle mechanisms), and for this reason further research on such schemes should certainly be done.