Titre: Roundup Round III\nAuteur: Vitalik Buterin\nDate: May 24, 2017\nURL: https://blog.ethereum.org/2017/05/24/roundup-round-iii\nCatégorie: Non catégorisé\n\n==================================================\n\nver the last month and a half we saw vigorous ongoing research and development on all sides of the thereum roadmap, and progress is rapidly starting to translate into real results that can be run and verified inside of an thereum client.nnn etropolisnngendas for core dev meetings  and  herennhttps//github.com/ethereum/pm/issues/nnandnnhttps//github.com/ethereum/pm/issues/nnist of accepted s herennhttps//github.com/ethereum/s/blob/master/.mdnn(mostly agreed on, though we are still going back and forth on details such as gas costs)nnost of the s have been implemented in ++ and ython and are being implemented in other clients tests are being actively written and added herennhttps//github.com/ethereum/tests/tree/develop/eneraltateestsnn(see the various branches for different tests)nnlients that have not implemented eneraltateests could provide a docker image for   ive testing (contact artin wende). ll eneraltateests are being converted into lockhainests and run on ive.nn release date has still not been finalized the general consensus is to wait until all tests are passing on major clients before setting one. ecause of the rapid increases in block difficulty, the ice age continues to be delayed current prognosis assuming no further increases (arguably a very pessimistic estimate) is that block times will not eceed s until uly , and will not eceed s until ep .nnhe thereum blockchain has hit several new all-time highsnnifficultynn( ) andnnhashratenn(. )nnransactions per daynn(, or ~. per sec)nnas usage per day has not yet reached the all-time high of un , when the blockchain was heavily spammed as part of the  attack and various counterattacks, but is nearing it with annn-month highnnof . billion per day. hat’s  gas per block, or ~% full blocks for the day (reminder gas limits arenndynamically adjustingnn, so congestion with rapidly increasing fees is not likely) .nnncle ratennon that day was only ~.%.nnn various side projectsnn has been deployed, andnnauctions are ongoingnn.nnhisper is getting a proper , which is in alignment with our general , the  should be ready soon and a workable whisper version will be released.nnwarm has made a number of significant improvements, including (i) supporting directory upload and download via the http interface, (ii) full  support, (iii) a new protocol pss for node-to-node messaging, (iv) replacing the chunk hash with a erkle tree hash to enable more efficient data inclusion proofs. rogress toward  is going at full steam.nnyethereum development has picked up quicklynnan ie and his team have successfully synced a pyethapp node to the most recent block on the mainnet.nneveral bugs in the implementation have been fied, and the client is now passing all state tests and most pre-etropolis blockchain tests. ork to find the remaining issues is ongoing.nnost etropolis s have been implemented, including thennfour new precompilesnn.nnhe tester module has been revamped so that it is fully based on the hain module, and a new and more convenient interface has been added, including functionality such as creating state tests.nnasper research is now in the process of fine-tuning the incentives for liveness, and implementing the logic inside of pyethereum. his includesnnhennvalidator daemonnnhe hybrid asper fork choice rulennasper contracts including testsnnignature validation code, including for  andnnquantum-resistant hash-ladder signaturesnnther research stuffnnubstantial work has been done on sharding, and specifically the dreaded “data availability problem” see herennhttps//github.com/ethereum/research/wiki/-note-on-data-availability-and-erasure-codingnnhe harding nnhas been updatednnreg olvin's " ." proposals are now  draftsnnnnandnnnneth developmentnnemoved the artificial  shannon minimum gas limit from the transaction poolnn, enabling eth nodes to accept and relay arbitrarily priced transactions. his should help enable a real gas market.nndentified a sync regression for  users, resulting in annheavy rewrite of fast sync codenn, making it much more robust and stable.nndentified and fied a few  bottlenecksnn, causing comple contracts to eecute up to % faster doing up to % less memory allocations.nnolishing the light client and itsnnmobile bindingsnnin collaboration withnntatusnn,nnallethnnand others. reliminary proof-of-concept done for light client event retrievals.nnorking on a new filtering mechanismnn, with very promising results, reducing the time required to filter the entire blockchain for contract events from minutes to seconds.nnnvestigating a new mining strategy, which should move transaction processing for miners completely parallel to mining, hence reducing the overhead of transaction inclusion to . his should permit miners to lower fees without transactions impacting the probability of finding blocks and/or having them included.nnlowly adding minor polishes to uppeth, lique and inkeby, such as anntiered faucetnnfor ther withdrawals,nnconfigurable gas dynamicsnnfor private network miners and automatic  integration.nnn eternal security-audit has been performed by ruesec . o critical issues were found.nn++ developmentnnthe monitoring node achieved a full sync to the mainnetnnmetropolis snnare almost completennwork onnnfast syncnnand snapshot sync has begunnnesteth tool has new option --statediff for debug information on a praticular test case as well as new test format  eneraltateests (enhancement of the old statetests) nnnn]nneminnalmost finished a new static analysis module that can detect reentrancy bugs (eternally contributed by “soad”) nnnn]nnadded a folder view to show open files inside folders - files imported via e.g. import "github.com/ethereum/solidity/std/tandardoken.sol" are now visible in the folder view nnnn]nndebugger can now display mappings nnnn]nnrearranged tabs to provide better overview nnnn]nnoliditynnwe released the unified standard json interface to interact with the compiler nnnn]nnadded “interface contract” featurennnn]nnadded some more safety checks statements without effect, and unary plus and unused variables nnnn,nnnn,nnnn]nnfurther work on the new intermediate language including web assembly and . backends nnnnand lots more]nnalmost finished work on eporting and especially also importing the  (this will allow mutation testing and lots of other etensions) nnnnand others]nnistnnecouple geth specific hard-coded node and network handling, allow for arbitrary nodes and networks defined by local or remote clientinaries.jsonnnefactor of the settings backend in preparation for a settings nndded mac and indows ode-igning, preparing github/swarm based auto-updaternnany of the audit findings will incorporated in the coming releasesnnhanges to the provider will make ist and other rojects like etaask and status.im more future proof, as developers don’t need to depend on high level libraries not changing over time.nnhere will be a few announcements concerning the new providernn. iscussion about that is happening atnnhttps//github.com/ethereum/interfaces/issues/nneb.jsnne are currently adding generation and signing with private keys right into web.js. o that you can easily create wallets and sign messages in your dapps. ou can find the current eperimental docs herennhttp//webjs.readthedocs.io/en/./web-eth-accounts.htmlnnhe net steps will be adding maiavictor’s swarm library and the new whisper  and the new web.js should be ready for test drive by the community.