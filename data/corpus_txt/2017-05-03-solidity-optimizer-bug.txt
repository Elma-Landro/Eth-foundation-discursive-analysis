Titre: Solidity optimizer bug\nAuteur: Martin Swende\nDate: May 3, 2017\nURL: https://blog.ethereum.org/2017/05/03/solidity-optimizer-bug\nCatégorie: Non catégorisé\n\n==================================================\n\nbug in the olidity optimizer was reported through thennthereum oundation ounty programnn, by hristoph entzsch. his bug is patched as of --, with the release of olidity ...nnackgroundnnhe bug in question concerned how the optimizer optimizes on constants in the byte code. y "byte code constants", we mean anything which isnnnned on the stack (not to be confused with olidity constants). or eample, if the valuennfffffffffffffffffffffffffffffffffffffffffffffffennisnnnned, then the optimizer can either donn fffffffffffffffffffffffffffffffffffffffffffffffenn, or choose to encode this asnn  nn.nnn error in the optimizer made optimizations of byte code constants fail for certain cases by producing a routine that did not properly recreate the original constant.nnhe behavior described in the reported bug was found in a contract in which one method ceased functioning when another - totally unrelated - method was added to the contract. fter analysis, it was determined that a number of conditions must eist at once for the bug to trigger. ny combination of conditions that would trigger the bug would consistently have the following two conditionsnnhe constant needs to start withnn...nnand end with a long series of zeroes (or vice versa).nnhe same constant needs to be used in multiple locations, for the optimizer to choose to optimize this particular constant. lternatively, it needs to be used in the constructor, which optimises for size rather than gas.nnn addition to the two conditions above, there are further, more complicated conditions that are required.nnnalysisnnhis bug is present in all released versions of olidity from at least as far back as summer  to the present. lthough the bug has been present since , it seems very hard to trigger by “random” codenne performed a static analysis of all contract code deployed on the blockchain, and found no occurrence of such an invalidly generated routine. ote, the fact that we have not found a bug in all the contract code does not guarantee the absence of such occurrences.nnmprovementsnnn order to provide better transparency and increased awareness of bugs in olidity, we have started eporting information about olidity-related vulnerabilities as -files in the olidity code repository(nnnn,nnnn). e hope that block eplorers will integrate this information along with other contract-related information.nntherscan has already implemented this, which can be seennnherennandnnherenn.nnoncerning the bug itself, we added a mini- to the optimizer which verifies the correctness of each generated routine at compile time.nnurthermore, work has already started on a fully-specified and more high-level intermediate language. uture optimizer routines on this language will be much easier to understand and audit and it will replace the current optimizer.