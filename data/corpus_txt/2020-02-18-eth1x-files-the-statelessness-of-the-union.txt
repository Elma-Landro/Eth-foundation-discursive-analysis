Titre: The 1.x Files: The State(lessness) of the Union\nAuteur: Griffin Ichiba Hotchkiss\nDate: February 18, 2020\nURL: https://blog.ethereum.org/2020/02/18/eth1x-files-the-statelessness-of-the-union\nCatégorie: Non catégorisé\n\n==================================================\n\nhe net tateless thereum research call is coming up in less than a week! he telegram chat now has hundreds of messages to catch up on, and only a small portion of the topics discussed have made it into the ethresearch forums.nnhis post is just a quick primer and general update we'll re-cap most issues under discussion currently, and set the stage for call # as well as the . researcher's summit following th.nnhis post assumes a higher-than-average technical understanding of the concepts at play, because there is a lot to catch up on. f you are coming in fresh,  recommend readingnnhe tateless thereum ech reennfor a more thorough contet.nnt may be helpful to refer to this diagram from the linked post abovennhe eneral copenntateless thereum is an initiative to upgrade the current thereum protocol to allow for "stateless" client paradigm, in which not all nodes are required to keep a current copy of the state trie. nstead, stateless nodes rely on a "witness" produced by a full state node in order to eecute new blocks.nnitnesses are the central conceptual object in stateless discussions, and most stateless research is along two main lines of inquirynnitness format and implementationnntate and itness data availabilitynnn the former, we have questions about the structure of witnesses themselves, changes required to the state trie format, questions about client database implementations, and optimizations to bound and shrink hypothetical witness size.nnn the latter are less understood questions about network topology, gossip protocols for efficiently passing around witnesses, and quantitative questions about network performance and incentives.nnnown nownsnno get where we want to go, some things will all-but-certainly need to happen. hese are in detail outlined in italik's post onnnrotocol hanges to bound itness izennnn transition to a binary trie via either a 'progressive' or 'clean cut' strategy.  progressive switchover requiresnnparse erkle reesnn, while a clean-cut approach will likely cause a temporary disruption to the chain.nnitnesses will be produced by miners keeping a copy of full state, and should be paid for by gas included within the transaction. his will likely involve gas price increases for , , , and  opcodes.nnn addition to these general points, we have some solid numbers from eperiments that have been run by gor andrigennnitness sizes in the binary trie representation are always more efficient than heary, and weigh in somewhere in the ballpark of .-.  depending on the witness. nnsourcenn]nnn the case of partial-state nodes, it's possible to reduce the storage requirements substantially by keeping partial data in the cache and building state incrementally from witnesses. nnsourcenn]nninally,nna first draft witness specificationnnhas been submitted to the tateless thereum specs repository, and is now under review.  formal witness specification is an important step toward the implementation of a stateless prototype.nne don'tnnquitennknow, but we know we can work it outnnhere are a few points of research that fit into the category ofnn"e know we need to do this, we don't know how eactly we're going to do it, but we have good intuitions and are reasonably confident it'll work".nnode merkleization is one such area. o avoid unnecessarily large witnesses for contract calls, code merkleization splits up contract code so that only the portion of the code called needs to be included in the witness for a transaction.  current prototype eists that makes use of  instructions in the code to split up code chunks into more manageable sizes, but this is considered a 'leaky' abstraction because it eposes witness sizes to code semantics.  better approach would be fied code chunk sizes, which is workable if a little bit of meta-data is put into each witness (specifying valid jump destinations), or if code is validated with all static jumps enforced at validation.nnnother clear need is for witness indeing, i.e. to have some sort of 'canonical' identifier for all nodes to easily see that they have retrieved the correct witness for a given blocknnbeforennvalidating it locally. he most straightforward way to handle this is a protocol change to includennwitnessashnnin the block header. his prevents potential attack vectors and makes generating a witness an eplicit requirement for miners producing blocks to build an associated witness.nnlso in this category are the large collection of 'meta' items that will help research continue and accelerate. his includes developer tools for eperimenting with and collecting more useful data from the historical chain, formal  semantics, and a platform for running network simulations.nnnown unknownsnnany of the more fundamental questions concerning thennnetworknnfall into the "unknown" category. hese are questions that need a lot more investigation before we're confident about a direction to move forward in.nnata discovery and delivery for syncing nodes is a major concern for tateless thereum, because unlike the current paradigm of sync, a new node cannot epect a random assortment of peers to have the pieces of state it needs to eecute the current block.nnecause the current th protocol does not provide an interface for clients to query about what state connected peers have available, this is a non-trivial problem. t a minimum, nodes will need the ability to query their peers for several different types of data, such as headers, receipts, transactions, and specific parts of state. here are plenty of open questions here about how that data is delivered to the requesting node, how full nodes will orient themselves in a network with many stateless peers, and how the network will prevent state data from getting lost forever.nn more detailed epositionnnof this topic by iper irriam was posted on the ethresear.ch forums.nnhe inherent challenge in these more distant questions is the fact that the network topology of stateless ethereum can only be guessed at based on assumptions of rational behavior and current activity. nlike th research, however, tateless thereum is similar enough to the current chain that historical statistics from th are relevant and useful for testing against. till, more and higher quality data will be needed to inform further work on network topology.nn parallel line of quantitative inquiry will emerge once we have a reliable cluster of beam-syncing nodes to study and attack.  beam syncing node is essentially a janky version of a stateless node, which uses a "naive" primitive (nngetodeatann) to collect (and keep) missing pieces of state. e can learn a lot about desirable network primitives by trying to break beam sync, and then iterate on those lessons to bring beam sync closer to the "real" stateless sync paradigm.nnpecific questions about the eventual transition to th are largely unanswered, although italik'snnalternative th  th transitionnnproposal is most in line with current thinking in the  group.nno aris!nnhe  researchers will meet in aris to discuss issues and work out solutions in person, the weekend following th. his small in-person research summit will be a great opportunity to push forward with the work, and to collaborate on the more obscure and less understood challenges in tateless thereum.nnllons-y!nntateless thereum call #nnhe net call is scheduled for uesday, ebruary th. each out to ancock if you would like a calendar invite, and as always, gichiba for feedback on these updates or requests for new topics.