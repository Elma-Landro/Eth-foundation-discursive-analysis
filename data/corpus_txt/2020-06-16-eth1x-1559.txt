Titre: The 1.x Files: EIP 1559 and the Ethereum Improvement Horizon\nAuteur: Griffin Ichiba Hotchkiss\nDate: June 16, 2020\nURL: https://blog.ethereum.org/2020/06/16/eth1x-1559\nCatégorie: Non catégorisé\n\n==================================================\n\n've been thinking recently about post-apocalyptic wastelands. pecifically, about this scene from ad a ury oad, when the main characters have just escaped the first wave of pursuit, and are staying ahead of their would-be captors. hey need to keep moving, but still need to do maintenance on the centerpiece of the movie a gigantic "war rig" truck driving them to safety. o harlize heron climbs out under the cab to make some repairs en-routennhe idea of conducting repairs on a big complicated trucknnwhile it's still movingnnis just so appropriate for the film's high-octane drama. t occurred to me while  was watching that this situation is an apt metaphor for the  process and the work of the core devs.nnhanges to the thereum protocol happennnnn, and a lot of careful, comple engineering goes into crafting upgrades so that everything, and everyone (if possible) keeps rolling along. here are still bumps on the road out in the blockchain badlands, but by and large thereum remains well ahead of any other marauding vehicles (technical debt) -- so long as the rig keeps pace and doesn'tnnstop moving toward the horizonnn. ew proposals have the potential to be a little disruptive in the short term to the status quo, but are usually valuable improvements overall to the protocol.nnhe upgrade  want to discuss today fits into the category of "thereum .", but it'snnnotnnpart of the tateless thereum effort  new gas fee market / block size mechanism. he proposal has become a really interesting case study in community and developer feedback for thereum improvement. y looking at how this  has changed over time with more developer discussion,  think we can learn a lot about constructive discussion in thereum development, and hopefully have some clear insights (or at the very least, vague aphorisms) to help guide the discussion on significant changes further out from the tateless thereum initiative.nnrdinarily in this series  try to be very methodical and 'into the weeds', but in this instance  want to put more emphasis on the content and character of the discussion surrounding the proposals, rather than the technical minutia contained within. ut we have to havennsomennidea of what we're talking about here, so let's look very briefly at what - and 'scalator' propose before going "meta" and considering how the discussion has progressed and where it's at today.nn nnhe motivations for the originalnn nnare a good place to start, and they're fairly straightforwardnnhe current “first price auction” fee model in thereum is inefficient and needlessly costly to users. his  proposes a way to replace this with a mechanism that adjusts a base network fee based on network demand, creating better fee price efficiency and reducing the compleity of client software needed to avoid paying unnecessarily high fees.nnn the current system, newly submitted transactions must wait to be included in the net block by a miner, but they can incentivize miners to include their transaction by increasing thenngasricennparameter higher than the network average. iners, if they are being rational, will always be looking to fill new blocks with transactions that maimize their payout, and thus the transactions included first in the net block can be always epected to be the ones with the highest gas price.nnhe trouble with this first price auction model is that things can get out of hand quickly in times of high demand. hen blocks are close to full, the cost of getting a transaction included in the net block can spike dramatically as users try to out-bid each other for inclusion. ven though currently miners have some ability to increase the number of transactions included in a single block, that limit can't change very quickly and realistically miners are happy to capitalize on small full blocks rather than push the block gas limit up higher (larger blocks are, because of ncle rates, a more risky proposition for a miner). specially if your wallet is using pricing algorithms to target inclusion within a specified time frame (read provide a good ordinary user eperience), you might end up payingnnpretty ridiculous feesnnto get your transaction into a (nearly) full net block.nn  introduces the concept of a 'base fee' in gas that is set to dynamically adjust so that the overall gas usage in a block moves toward the current limit of  million gas. ather than going into the pockets of miners, the base fee is burned. o provide incentive for inclusion, users specify a 'tip' parameter, together with the maimum amount they are willing to pay for the transaction to be included in a block, and miners keep the tip.nnecause the base fee does not fluctuate wildly at the whim of instantaneous network demand, users are somewhat insulated from the inefficiencies of a first price auction model (the 'tip' remains first-price), and because the base fee is burned rather than given to the miners, there is no incentive for miners to try and manipulate the fee. mportantly, the mechanism also attempts to solve a big problem for wallet developers automatically trying to estimate network fees by making them much more predictable.nnhere are several places to read more about    would recommendnnitalik's  nnandnnarnabe's upyter notebooknnif you want to go deeper.nn new challenger approaches scalatornnnefficiency of the current first price auction system for thereum fees is not controversial, and it's important to point this out eplicitly o one disputes that the current fee mechanism could be better, and finding an alternative to the first price auction would be indisputably good for thereum as a whole -- at the end of the day it'll make things better for both developers and end users alike. e all can and should agree on this.nnhe new mechanism proposed in   is, however, justnndifferentnnfrom the way it's done right now, and changing it will cause some problems, in particular with any software that builds and submits thereum transactions for users. allets in particular will need to make significant changes to accommodate the new mechanism. ven if things eventually become better for everyone in the long run, in the short term it puts a big burden on the developers working to adjust to the change and prevent their software from breaking.nnfter   had been floating out in the primordial soup for a while, the community started to weigh in, including wallet developers who would be most affected by the changes proposed. ather than resist the , wallet developers took an interesting route of discussion. hey reconsidered the core motivations for the  (improving the  of thereum transactions), and put the  into that contet, essentially saying "f we're going to be doing all this worknnanywaysnnwe should from the very beginning have an idea of what it's going to look like to a user, and we should use that to help guide what's being proposed".nnhis is the over-simplified story behindnnan inlay's counter-proposal to   he scalator lgorithmnn. t's similar in a lot of ways to the mechanism of , and has nearly identical motivations and goals. scalator is presented to stand in as annnalternativennimprovement proposal which allows for a much more nuanced discussion ofnneithernnmechanism presented in isolation.nno facilitate a more productive and concrete discussion about the gas fee market,  felt it was important to present an alternative that is clearly superior to the status quo, so that any claimed properties of - can be compared to a plausible alternative improvement.nnhe scalator mechanism is similar to the current single price auction model, with a few important changesnnather than submitting a transaction with a fied bid, users submit aptly-named 'escalating' bids and specify a maimum amount they are willing to pay to get the transaction included. ll bids are put into a queue of 'escalators' that gradually and predictably increase all bids in queuennat the same ratenn. his provides a good mechanism for price discovery that still allows users to tweak their settings based on how urgently they want a transaction included, and how much they are willing to pay for it.nnhe main advantage for escalator is that it enables highly efficient price discovery, while at the same time protecting users from over-paying by charging the second price in queue. t has some of the same strengths as  as well, making it easier for users to choose the right fee, even in times of network congestion. otably, the escalator by itself would not make any changes to the mechanisms that determine block size.nnhe "scalator lgorithm" proposal is interesting in its own right, and  highly recommend readingnnthe 'user strategy' sectionnnto get a good high-level comparison of the  different models of transaction processing. f you like this kind of thing,nnthe paper that introduces the escalator algorithmnnis also well worth digging into, but  digress...nnn an  implementer's call, an presented mock-ups showing how the various parameters in an wallet would look to a user, highlighting how they can be hidden or eposed depending on the desired level of user intervention.nnhe designs were intended to be a reference for community discussion, and help us imagine both  and the escalator algorithm from the perspective of a user.nny introducing a reasonable alternative proposal and re-framing developer criticism to prioritize the challenges of users, the   / scalator discussion has very deftly created new space of eplorationnntoward the end goal of improving the fee marketnn. t's far from teed up for the net hardfork, but like the big rig in ad a, it's still moving forward.nnhe future of thereum ll shiny and chromenn believe  / scalator is an important issue for the thereum community to watch and learn from, particularly because it has many of the same characteristics as another more distant (and more dramatic) improvement on the tateless thereum horizonnnil/arma  semantic changesnn. ust as in the fee market, some of the proposed modifications are going to have significant second-order effects on developers and users. lso as in the case of , there is a clear user eperience aspect to rally behind, and thus an opportunity for coordination withnndevelopers who understand that eperiencennto help proposals keep momentum toward an eventual successful upgrade.nnmproving thereum (.) and any other public blockchain is an arduous journey. he right route of discussion should be one that keeps meaningful improvements still on the horizon, and moreover ensures that the developers and users most impacted are heard and their concerns incorporated. ecause at the end of the day, we're all riding the same big rig toward the gates of alhalla... er, erenity. taying ahead ofnnthe state bloat problemnnmeans continuously and constructively proposing, criticizing, and amending changes without losing momentum— our survival depends on it!