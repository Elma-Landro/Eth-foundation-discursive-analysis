Titre: EF-Supported Teams: Research & Development Update\nAuteur: Ethereum Foundation Team\nDate: Team on April 14, 2020\nURL: https://blog.ethereum.org/2020/04/14/ef-supported-teams-research-and-development-update-2020-pt-1\nCatégorie: Non catégorisé\n\n==================================================\n\nriends,nnrom our team to you and yours, we hope everyone and their families are well and keeping safe during these complicated weeks. o help pass some time while we’re all stuck in doors, it’s time again to update the community on progress made by some of the -supported projects not covered innnlast week’s  llocation pdatenn. hile the last inter edition in this series was posted only a few months ago, we’ve all come a long way since the launch of the stanbul network upgrade, and many teams have news to share.nns always, these updates focus on -supported teams and efforts whose members are working to grow and improve thereum as a whole. ncluded in this edition are updates from many teams highlighted innnthe previous reportnn, and other new and rotating news.nnnjoy!nnleth / ++ thereumnnuthored by aweł ylicannn ecember , thenn..nnversion of leth was released. t contains a number of fies and improvements related to a variety of aspects of how this ++ thereum node functions. n particular, we made improvements to the  interface, blockchain sync and network protocol, and testing tools (testeth, aleth-vm). eennnnfor more details.nnhis release also contains substantial work related to the consensus mechanismnnuir laciernnnetwork upgrade support.nn-nn"educed gas cost for call to self" implementation.nn-nn"educed gas cost for static calls made to precompiles" implementation.nnupport for individual  activation to facilitatenn-centricnnnetwork upgrade process.nnleth .. is the last planned version. rom now on, we are only committed to basic maintenance of the code, ull equest review and fulfilling the remaining needs of testing and  reviews. t this point ’d like to thank all leth contributors, especiallynnils-rik rantzellnnwho put a lot of effort in the project in the past year.nnt is also worth mentioning maintenance releases of sibling projectsnnnn..nn,nnevmonenn..nnandnn..nn.nnast but not least, we have published an article onnnfficient gas calculation algorithm for nn, later included in evcon  presentationnnptimization techniques for  implementationsnn.nnpplied nnuthored by oh ei ie and obi urkannnhe pplied  team works to bridge the gap between cutting-edge research in zero-knowledge proofs, and application development on thereum.nnerpetual owers of aunnn eptember , we launched thennerpetual owers of au ceremonynn().  aims to benefit the zero-knowledge ecosystem, particularly zk- projects built on thereum, by partially easing the burden of trusted setup ceremonies. very zk- project requires two phases of parameter generation, and  replaces the first phase, which can be shared by all circuits. ndividual teams can choose any contribution from the ceremony to branch out and perform their own phase  setup.nnhis ceremony supports circuits up to  ^  constraints, which means that each contribution requires a  download, a -day computation, and a  upload. t the time of writing, we collected  contributions from  unique individuals, and all contribution files can be downloaded and independently verified against annpublic ceremony transcriptnn.nnemaphorennemaphore is pplied ’s flagship project, initiated in mid-. t is a generic privacy gadget which enables use cases such as miers, anonymous login, and anonymous voting. ne use case of emaphore, developed by hih-heng iang, isnnemaphore uthenticationnn, which enables anonymous logins with protection against ybil attacks. e encourage readers to check outnnthis eplanatory blog postnnto understand what emaphore is and how it works.nnecurity audit and code releasenne engaged  onsulting to perform a security audit of emaphore’s zk- circuit code and olidity contracts. e fied the issues they uncovered, andnnreleased the final source codenn. e have included in the audit many components from thenncircom standard librarynn, thus providing a greater set of tools to be used by the wider community of  developers that use circom.nnhase  ceremonynnt the time of writing, we are performing a circuit-specific multi-party trusted setup ceremony. he process we are following isnndocumented herenn. e collaborated withnnupranationalnn, a member of thenn lliancenn, to run a verifiable delay function () on annpre-announced thereum block hashnn, and applied the output of said  onto challenge file # from the erpetual owers of au ceremony (see below), and kicked off the circuit-specific ceremony on the th of pril .nnhanks to ecellent work bynnrian unn, we were able to repurposennztec rotocolnn’s gnition ceremony software for our ceremony. lease check out more details about this ceremony by reading itsnnparticipant guidenn.nneel free to discuss in the emaphore ocietynnelegram chat groupnn.nnemaphore nnemaphore nnprovides a way to perform rate-limiting in a  setting - instead of relying on an on-chain nullifier map to prevent double-signaling, we use hamir ecret haring to epose shares of the broadcaster’s private key. ultiple published shares from the same broadcaster can be used to reconstruct the private key, opening up the possibility for the original holder of the private key to be slashed.nnnnriginally proposed by italik uterin in annnethresear.ch postnn, systems built with  make collusion among participants difficult, while retaining the censorship resistance and correct-eecution benefits of smart contracts. lthough  can provide collusion resistance only if the coordinator is honest, a dishonest coordinator can neither censor nor tamper with its eecution.nnn late , we started work on anntechnical specification and implementationnnand we are nearing completion of a minimal viable product.nnuture work adding anonymization to nn uses a coordinator for processing, where the coordinator uses s to prove integrity, such that a malicious coordinator can only hurt collusion-resistance properties. ne downside of the current approach is that the coordinator is able to link each user’s original key to their final key, as they see all the key changes.
e seek to further improve privacy towards the coordinator by allowing anonymous key changes by users. lease read more on thisnnethresear.ch postnn.nni ountynni has become a popular cryptographic hash function in s due to its great performance. hile it is the oldest of the bunch in the “hash functions with low multiplicative compleity” family of functions, we felt it should receive more critical attention. enninitiated a bountynnfor collision finding in i, which we also plan to etend to oseidon.nnptimistic ollup ub +  ptimistic rollupsnnptimistic ollup allows greater layer  scalability with the use of on-chain data availability and fraud proofs. he ub chain further allows for easy mass migrations between different rollups. he hub allows for easy mass migrations.nn ptimistic ollup builds upon the same idea but for anonymous transfers. nstead of having all the transaction metadata in the clear, each transaction in the rollup is a -to- anonymous transfer.nneekooknneekooknnallows two users to privately match orders, such that no user can discover more information about an order made by another user unless they have an order that would fulfill it.nnperimental directionsnnp until now we’ve described projects that we’ve released — either as mature code, specs or concrete plans. e are continuously investigating new eperimental areas which we hope will mature to fully-fledged projects.
ome of these includennerifying a  in  - allowing for some form of layer  recursionnnlind indnn- an -based construction proving a path eists between users in a pp network, without revealing the path itself.nnractal on thereumnn-based rollupnnnd more )nncosystem upport rogramnnn pril  we posted thenn llocation pdatenn, where we shared some of the work we’ve been doing to improve our processes as well as a list of the projects that received financial support in . atch the blog for more updates, and follow us on witter (_) to keep up with the latest on the projects we support!nnwasmnnuthored by le eregszaszinnince the last update in ecember, the team has continued to work on th . hase  and started to take a more active part in th  research as well.nnur intuition is that certain parts of research are needed by both and can be shared between the two efforts.nnth . / tateless thereumnnn a stateless model, it is not epected that everyone keeps a copy of the entire state of the blockchain. nstead, each block comes with a proof (the so-called witness) of the part of the state affected. he optimal creation, distribution and verification of witnesses becomes a crucial component of this new stateless system. he challenge of creation and verification is what interests our team most.nnhere eist various ideas for reducing block witness size, some of which aul has collected in annsurveynn. iven our background in instruction sets, the first problem we had a look at is reducing code size. his is important, because code also needs to be included in the witness. wo approaches come to mind compression and merklization. n early phasenneperimentnnsuggests we can cut down the amount of code transferred as part of the block witness by -%.nne further plan to eplore options tonnreduce the storage part of the witness,nnto accurately charge for the witness size ("witness metering"),nnand to partake in creating a witness specification.nnth .nnt must be noted, since the eecution model of th . is also stateless, the work done as part of th  becomes applicable here too.nnross-shard designnnithout the ability to efficiently transfer ther (and potentially other tokens), payment for eecution and transactions becomes a complicated matter. ast year a variety of models emerged, including receipts with accumulators, queues and balance maps. aseynnhas proposednnan alternative called thransfer objects.nnn addition to ther transfer, contracts may want to be able to communicate with other contracts on different shards, and potentially perform atomic operations. ll of this leads to a vast design space for hase , which we've been eploring so far.nns an eperiment, starting a few weeks ago, we have been working onnnthnn. his reduces the design space and should allow for quick iterations of different designs.nnnder th each shard is homogenous and is running an instance of th ., with shard  being the current th . mainnet. e are working on multiple small proposals, all of which focus on various ways to accomplish cross-shard communication.nnhis work will give an idea of the compleity of introducing sharding into th, allowing us to gather wider feedback from app developers, and we can take the results into refining the ebssembly-based hase  designs.nnpeednnero-knowledge protocols are becoming increasingly important. t must be ensured they can be efficiently supported on th .. n optimized implementation in ssemblycript of the -friendlynni hash functionnnand a zks-based token eample have been developed. his eample works well as an ecution nvironment. enchmarks show that both can achieve comparable performance to compiler engines and -based (precompile aided) implementations. eennared's summarynnfor numbers.nnhis work also guided further reviews of the big integer , which is an important element of a powerful and safe, ebssembly-based eecution.nnebssemblynnhe last few months have been a fruitful time for ebssembly with the release of the stable . version of the specification.  number of new promising interpreter projects have been announced and/or released. e are keeping a close eye on these and intend to include them in our benchmarking report.nnn anuary we began working onnnizzynn, a new ebassembly engine. eatures such as integer-only support (no floating point operations) and interpreter-only eecution make it well-suited for blockchain use cases. n addition, a clean codebase written in modern ++ and the goal of easy embeddability aim to make izzy a viable, modular component for th . client implementations. y the time of this update, izzy is able to pass almost all official test cases (with the eception of asm validation, which is not yet implemented) and compares very well on speed benchmarks.nnormal erificationnnuthored by eo lt and artin undfallnnctnnctnnis a simple and effective specification language to write formal specifications. t is being developed with input from several groups, and we hope that in the future it will be common to use ct to specify smart contracts.nny allowing properties to be epressed on different levels, the main goal for ct as a tool is to enable modular verification. he specification can be verified as a standalone document, where contract invariants can be checked from the specified function’s pre/post conditions, and the post conditions can be checked from a function’s storage updates. deally this modular verification will make it much easier for other tools to verify that the source code/bytecode are correct.nne are currently working on three proof backends for the intermediate proofsnnoq definitionsnn specsnn theoremsnnach one of the backends has its own pros and cons, and we hope to achieve good performance and coverage by developing all fronts at the same time.nne hope to release a prototype of each proof backend and study how to epress loop invariants until une .nne will soon release a detailed technical post about ct. ontributions to thennrepositorynnare always welcome!nnheckernnhe hecker is a model checking based static analysis module in thennoliditynncompiler that tries to verify source code assertions in compile-time. ast year annnew engine based on onstrained orn lausesnnwas added. his engine's main feature is that it can automatically find inductive invariants that are used to prove assertions, enabling support for loops and state properties.nne recently added internal function calls to the engine and keep improving support for the olidity language. n the net  months we will keep working on increasing language support, countereample generation/presentation and eternal function calls, which will hopefully start to transition the hecker from eperimental into a useful and powerful tool.nnn the future we also want tonnombine the hecker and ct, and study amazing stuff like synthesis of missing code to match the specs / synthesis of adversarial code.nnreate a emi plugin for the hecker which would improve usability greatly.nnerified  encoding/decodingnne are collaborating with onsenys & who are working on a verified  encoder/decoder usingnnul-sabellenn. he idea and discussions started at evcon , and since then, good progress was made and we are close to a prototype.nnnitially we intend to use it together with thennolidity uzzernnto find bugs related to optimization and  encoding/decoding. ur final and slightly ambitious dream is to use the verified  encoder/decoder as part of the olidity compilation process. his would imply that a substantial part of code generation is verified!nnthnne have continuously supported untime erification in maintaining the  formal semantics and verifying the deposit contract and beacon chain specs. he deposit contract is also one of our main benchmarks when developing ct. e would like to provide an alternate specification for the deposit contract and proof for the incremental erkle tree properties via ct by uly, when we also intend to study th hase  and hase  properties that must be proved.nnevmnnevmnn, a haskell  evaluator and debugger can now be used fornnproperty-based testingnn.
sers of thenndappnndevelopment tool can now write olidity tests whose arguments are randomly generated and that are run multiple times against a correctness criteria. his provides a way for smart contract developers to massively increase test coverage in a relatively straightforward manner.nnoing forward we will be eploring etending hevm with symbolic eecution capabilities. his would make it possible to use hevm to formally verify  bytecode.nnethnnuthored by éter zilágyinnver the past quarter the eth team has been busy with network plumbing and laying the groundwork for future releases. his post will only enumerate a few of the major features for a detailed bullet point view please consult ournnrelease notesnn.nn discoverynn feature we've specced out about  years ago and shipped last quarter isnn-based peer discoverynn. oing forward, eth v..+ nodes have two independent mechanisms to find peers. he  lists serve as a fallback mechanism when peers cannot be found through the . hey might also end up being the starting point for a or integration.nn-based discovery is a centralized mechanism, but we have tried to make the operation of this mechanism as transparent and permissionless as possible. he public lists used by default are generated by crawling the discovery . odes running any thereum client which implementsnn-nnandnn-nnwill appear in the public lists automatically. f you want to create a -based node list for your private or public network, please check out ournn iscovery etup guidenn.nnt this time, there are ~ publicly-routed thereum mainnet nodes in the default list and our public lists also serve the opsten, oerli and inkeby test networks. urrently the network generates  million  queries per day to this discovery mechanism.nnransaction propagationnnor a couple years now, most of the network bandwidth used by thereum nodes was shuffling transactions around. nfortunately, this mechanism was never optimized since its inception, so it wasnnverynnwasteful. ver the last quarter, we've spec’d out an update to thennethnnprotocol (nn nn) which enables transactions to be announced between nodes and only transferred upon request.nnhis new protocol was released in eth v.., is already implemented by ethermind and in progress for pen thereum too. ince only about % of the network supports it, the amount of bandwidth saved globally is still a question, but running annneth/nnvs.nneth/nnbootnode eperiment with  peers has promising results.nnased on last week's traffic,nneth/nnis capable of reducing transaction propagation bandwidth by about %. or a bootnode of ours with  full node peers, that's /s saved, or roughly . of bandwidth per month. e are certain there is still room for improvement, but let's take it one step at a time.nnpart fromnneth/nn, eth shipped support for larger than  transactions back in anuary (courtesy of tarkare), with a soft limit originally at  and soon raised to  (higher limits heavily rely on hownneth/nnperforms globally).nnynamic snapshotsnn large bottleneck in running the  and doing an initial sync revolve around the state representation in thereum the erkle atricia trie. ince all the state data is laid out in a tree format, accessing any account takes about - random disk lookups currently on mainnet. uring fast sync, the same random intermediate trie nodes need to be downloaded one by one to get to the actual data.nn feature we've been working on actively for half a year now is dynamic state snapshots in short, creating a flat acceleration structure on disk which allows any account or storage slot to be loaded with  disk lookup. his is similar to pen thereum'snnfatdbnnlayout, ecept this one is dynamic the snapshot mechanism in eth is capable of keeping the acceleration structure updated live as the chain progresses (including the mini forks).nnne benefit of the dynamic snapshots are ()  state reads. lthough this might sound like a holy grail, it is not. ost contract eecutions don't go crazy with disk reads, so the benefit is limited, and most contracts also do lots of writes, which still need to be pushed into the erkle trie. he dynamic snapshots, however, do allownneth_callnnoperations to be blazing fast and they do make o transactions significantly harder to pull off.nnnnmuchnnmore interesting feature enabled by the dynamic snapshots is a new synchronization protocol, which we've been trying to pin down for  years now (originally callednnleaf syncnn). he protocol is still annwork in progressnn, but if our hunches are correct, it should allow syncing the thereum state significantly faster.nniscovery vnnhe initial version of thennnet-gen discovery protocolnnwas implemented in eth, albeit it is not yet enabled. hilst the spec and implementation is still fluid, syncing with the th . requirements, itnnisnna huge milestone to have a working version in the live codebase.nnavascript eamnnuthored by olger rewes, hilipp anghansnnast quarter was eciting for the team. or the first time we came together in person early arch during th in aris, deepened relationships and discussed team cooperation, possible collaborations and future plans. pect to hear more on that once things start to bear fruits.nnthers.jsnnthersnnvnnis going through the lastnnbeta releasesnnbefore final launch.  lot of fies and usability improvements (like more-fitting names for  calls) discussed with the community have been applied preparing for a stable and robust final release. oteworthy new features added lately are the newnnebocketrovidernnand eperimentalnn-nn(thereum rovider avacript ) support.nneb.jsnnfter being the main maintainer for the eb.js library for more than a year, amuel has decided that it is now time to go on withnnnew adventuresnn(thank you amuel for all your great work! ♥️). e enjoyed a last being-together in the days around th. ibrary development will now be taken over by other team members on a shared basis.nnor the moment we have a strong focus on ensuring a steady release process and we are working on familiarizing ourselves with the tech stack and procedures since amuel was the o.  epert here. lease bear with us that we are therefore very selective on adding new features in the near term. or the moment - and for the same reasoning - we also won't do development on thenn. branchnn(currently released as annnalpha versionnnof the library.nnthereumnne moved the thereum  to annmonoreponn, combining structurally related libraries (t, block, blockchain,  configuration (common)) under one roof. his will significantly ease  development in the future and allow for integrated s. here is annv releasennof the  based upon this new structural basis planned to be released soon which will introduce several breaking changes. eel free to drop in and join (and shape) the discussion.nnhanks to the great work ofnndryajovnnwe now also have a workingnnypecriptnnimplementation of thenndevppnnstack.  release on this is imminent.nnridnnthereum rid was split into two parts the desktop application and a core module that can provide binary management outside of the lectron contet e.g. on  or in other tools like test runners or 's (emi, ode). he goal of the core is to provide an engine that itself is very small but can be etended via plugins. he necessary mechanisms that allow a secure and stable etension without having to modify rid in the future have been implemented. his was the main goal of the refactoring and a transition towards a finalized product.nnrid can be etended with small scripts, called workflows, that interact with binaries.  variety of them have been created and demoed at thnnrid orkflowsnnython cosystem y / rinity / eb.py / yper]nnuthored by iper erriamnneb.pynnhe eb.py library has continued work on incremental improvements and stability. hanks to some third party contributions, we epect to have preliminary support for mnemonic phrase and  accounts released in the near term future. e also continue to work towards full async support, though there is still a decent bit of foundational work to be done on this front.nnrinitynnhe rinity client continues work across both the . and . fronts. ork continues on the rinity th client as we get closer to having stable, longer lived public testnets. n the th. side we continue to work towards a functional mainnet client. ne of the biggest things to come out of our work over the last two years is the “tateless thereum” effort which is shaping up to transform the thereum mainnet over the net - months.nnthnnhe th team is working with the olidity team to incorporate the packaging standard such that the compiler is able to compile the resources in a package, produce packages of the compiled resources, and use the th spec for metadata/contract source verification.nneminneel free to check outnnour medium postsnnfor more detailed content.
urnnpublic websitennhas just been released )nnemi  - ive && esktop appnnull support for olidity .. breaking changes and features has been added to the olidity lugin.nnow level interaction are now possible (olidity receive and fallback)nnightnnandnnarknnthemes have been added. e redesigned 's of the olidity lugin and eploy&un lugin.nnhe latestnnemi lugin ngine(v..)nnhas been successfully integrated into emi , as well as remi-simulator (thereum dev node in the browser).nnrom now on,nnthe desktop versionnnis following emi live releases.nnemi pluginnnhe latest version comes with the ability to have websocket plugins and we will add more types (ecure cmascript, ) soon.nnntegration with code is currently in the process and hopefully available soon.nnere’snnthe documentationnnfor developing plugins.nnternal luginsnne support eternal teams to build their plugins and add them to emi .nne have a itter channel dedicated to emi plugins. ou can propose a plugin to the community by creating a  in thennremi-plugins-directory repositorynnf you require financial help to build your plugin, we can probably do something!
ere’s what you need to do - lease create a ithub issue (in the repository where your plugin is located) for describing what you intend to do. - end us a mail -nnremiethereum.orgnn- containing a document describing the project, a link to the ithub issue and an invoice proposal. - e'll do our best to contact you and plan for net steps.nnemi imulatornnntegration with emi  is mostly completed.nnemi static analyzernnemi nalyzer moved to typescript and now uses the latest  (bstract synta tree).nnemi testsnne published new features recently and reached out to the emi community for feedback, and received a good outcome. ere are the medium postsnnpart nn-nnpart nn.nnlog posts & reachout communitiesnne've started to pushnnsome new contentnn, which will be our focus during the coming months.
e are also putting efforts in workshop content, realizing and promoting it.nn estingnnavid aka ioedeveloper joined the team recently and is working on  testing and the emi , aiming to consolidate our release process.nnesearch th. (tateless thereum)]nnuthored by riffin otchkissnnhe set of upgrades to the eisting thereum protocol dubbed “th.” have coalesced into a more unified effort by researchers to implement and transition to “tateless thereum”. he upgrades and topics of inquiry are not just relevant to improving scalability and resilience of the current chain, but are also relevant and in many ways complementary to engineering and design challenges being tackled by th research teams.nnollowing th in aris, there was a tateless thereum research ummit, regarded by attendees as seminal and wildly successful by all accounts.nnpdates about the tateless thereum initiative have been chronicled by riffin chiba otchkiss in an ongoing series called “he . iles”, which in addition to summarizing and digesting monthly calls, dives deep into the core concepts being researched and the road ahead.nnhe pdated tateless thereum ech reenntateless ummit ummarynnhe tate(lessness) of the nionnnhe tate of tateless thereumnnesearch erenity / th]nnuthored by  eamnnanny yan, arl eekhuizen and the th research team have continued regular series like ‘th uick pdate’ and ‘alidated taking on th’ here on the  log. or the latest news and progress as we draw nearer to the launch of hase , check out the latest posts below!nnth quick updatennth quick update no. nn- --nnth quick update no. nn- --nnth quick update no. nn- --nnalidated, staking on ethnnalidated, staking on eth # - ncentivesnn- --nnalidated, staking on eth # - wo ghosts in a trench coatnn- --nnalidated, staking on eth # - harding onsensusnn- --nnecurity ecurity / onsensus ests]nnuthored by artin olst wendennhe health of the thereum ainnet is the top priority, and we have investigated and published an  proposingnnpenaltiesnnfor state trie misses.nnowards the end of , we paid out several bounties. hainecurity earned another  points, for three separate reports  points for a slow eecution on eth, due to an unnecessary copying of data when  variants were made with large calldata  points out of the ‘pot’ of money allocated towards  reviews, with their help in assessing the security of - (which also earned eville retch (contract-library.com)  points).and submitted a o vector for eth/arity, together with aniel erez (split /), which earned them  points each.
n early , the prolific bughunter am un was awarded another  bounty points for thennnnvulnerability which necessitated migrating all records to a new registrar.nnhenno-vmlabnnrepository has been updated to better integrate with eth and help out during analysis of chain operations, as well as creating custom evm-fuzzers.nne have also had two eternal audits done on the upcomingnniscovery version nnprotocol. ne was performed by east uthority, and another by ure. hey are both accessiblennherenn. he protocol is implemented (but not activated) in eth already -- see below.nnonsensus testsnnlockchain test generation code was reworked and migrated to retesteth.
ests are now generated in lockchain test format.
tats web server set up atnnhttp//retesteth.ethdevops.io/nnoliditynnuthored by ranziska eintel, aniel irchner and hristian eitwiessnernnince the last update, the olidity team has released version ... part from the abundance of features already announced in our previous post, this also includes “try/catch” as high-level synta to handle failure conditions for eternal calls. n the meantime, the . series has stabilized in multiple minor releases and early planning for the net major release . has started (a future blog post will announce the features to be epected).nn notable new language feature within the . series is support for immutable variables. tarting from version .. of olidity state variables can be declared “immutable”. mmutable variables can be assigned once during contract creation and be cheaply read from runtime code. he constructor code will directly insert the values specified for the immutables during construction into the runtime code, so that the runtime cost of an access is merely that of a single .nnther language features that recently emerged are interface inheritance (which will be supplemented by  interface s in the near future), optional reason strings for internal reverts and the ability to assign storage pointers via inline assembly. he latter enables constructs useful for writing updateable contracts.
urthermore we introduced synta for  viannnew {salt salt}()nnand are simultaneously migrating the synta for setting gas and value for regular function calls to an analogous syntannc.f{value  ether}()nn.nnhe main focus of the olidity team is on etending the new code generation via ul as intermediate representation.  variety of language constructs is now supported recent notable additions include eternal function calls, try/catch, increased array support, tuples and more.
n the backend side the translation of ul code to wasm is now complete pending some tweaks with regards to types, meaning that finalizing code generation via ul  will yield a olidity to wasm compiler.nnhe ul optimizer continues to be improved most notably we are introducing the ul haser. he phaser is a tool that employs a genetic algorithm to find the best sequence of optimizer steps - in the future it could also be possible to use it on individual contracts if you want to spend more time compiling and get a cheaper contract.nnurther improvements
solc-js is now built to ebssembly instead of asm.js, which should make compilation much faster and increase browser compatibility.
he   eport is now complemented by an  import that can be used e.g. for mutation testing and other eperiments.
here is continued effort towards source verification (atnnhttps//github.com/ethereum/source-verifynn), the effort to build a collection of authenticated  and source codes of deployed smart contracts through the metadata hashes in the bytecode and to provide a trustless way to retrieve authoritative  information from ipfs or other sources.
he olidity grammar is now defined via antlr and the antlr-based grammar will be kept up-to-date by the team.nn heckernnhe hecker module continues to increase its support to olidity, as well as improving its verification techniques. he new  engine now also supports internal function calls and multi-transaction countereamples (unreleased), showing eactly how each transaction must be called in order to break an assertion. e are currently working on support to eternal functions and as usual, supporting more features of the olidity language.nnolidity ummit!nninally, we are looking forward to the olidity ummit, which will take place online on pril -. he olidity ummit is an interactive forum with discussions and short talks about olidity, ul, language design and tooling. e aim to have useful discussions that result in improvement proposals and pave the way for actual implementations. urthermore, we want to foster communication between teams working on similar topics and identify needs for the smart contract ecosystem for thereum. or information about registration, agenda and the livestream please visit thennolidity ummit websitenn.nnollow us onlinennor regular updates, you can follow the olidity teamnnon witternnor check out more olidity-related content like feature deep dives, release announcements and bug reports on the recently launchednnolidity blognn!nnoratesnnuthored by acob berhardtnnince the last update, the orates team designed and released the first version of zokrates.js, a library to compile, eecute and prove orates programs from avacript. t uses  under the hood and is already being used to power our emi plugin!nns part of this effort – and to better support programmatic interaction with orates – a new version of the orates  was developed. t is now capable of eposing comple data types in the same style olidity does through  specifications.nno increase efficiency, we added further optimization techniques to the orates compiler memoization of function calls, detection of unconstrained variables, and more. hese optimizations are under review and subject to testing and we hope to bring them to you in the net release.nnative verification – a feature commonly requested by our users – is implemented as a prototype and currently undergoing testing.nninally, the introduction of unsigned integers in orates which benefit from automatic optimizations is progressing. his is particularly useful when using widespread hash functions such as  and implementing algorithms that inherently use binary representations.nn--nn🦄