Titre: Checkpoint #2: Apr 2025\nAuteur: Nixo\nDate: April 29, 2025\nURL: https://blog.ethereum.org/2025/04/29/checkpoint-2\nCatégorie: Non catégorisé\n\n==================================================\n\nthereum’s weekly ll ore eveloper calls are a lot to keep up with, so this "nnheckpointnn" series aims for high-level updates roughly every - calls, depending on what’s happening in core development. ee the previous updatennherenn.nntldrnnhe past month centered on locking in the scope of the usaka upgrade and final ectra deployment details. he ectra upgrade ships on mainnet in just about a week, after which focus will shift tonnusakanntesting and deciding what goes into thennlamsterdamnnupgrade (in other words, the ”scope” of the upgrade).  new ll ore eveloper (””) call structure will split testing and scoping into separate calls to parallelize and accelerate shipping upgrades.nnectrannainnet client releases are out for the ectra upgrade and it’snnscheduled to go livennonnnay thnn.nnince the last heckpoint,nnectrannwent live on ethereum’s newest long-lived testnet,nnoodinn. t went well, much to the relief of client devs and testing teams who werenncautiousnnto celebrate too soon afternnbumpynnolešky and epolia upgrades.nnn response to these bumpy upgrades, guardrails were established in the forms ofnnprocess formalizationnn, epectednntimelines betweennntestnet upgrades and mainnet upgrade scheduling,nnincident response rolesnn, andnnconfiguration standardizationnn.nnectra’s main features are summarized on thennethereum.org ectra pagennand annwatch partynnwill follow the fork going live.nnistory epirynnistory epiry allows clients to stop storing pre-erge history, easing hardware and network requirements. his does not require a hard fork. lients are set to support pre-erge history epiry on the epolia network by ay st. ainnet support is epected shortly after ectra on mainnet.nnong-term history will still be available throughnnarchive nodesnnand thennortal networknnand client implementations will allow a user to optionally disable pruning.nnusakannhe headliner of thennusaka hard forknnisnneernnand the broad scope has been finalized.nnutside the headlining ,nnight snnwere moved to onsidered for nclusion (”nnnn”).nnnennto cheduled for nclusion (”nnnn”)nnhe remaining  snn(including   s) were moved to eclined for nclusion (”nnnn”).nnot all of the ’d s will necessarily make it into the fork (two of them,nnnn&nnnn, are either/or). hey’ll be added into the testing pipeline and moved to  if their implementation progresses smoothly without introducing ecessive complications. usaka fork testing will have a number of devnets, then fork on testnets, before being scheduled for mainnet. hipping eer is paramount!nneernneer lets nodes verify blobs by sampling instead of needing the full payload, making room in bandwidth and storage requirements for other upgrades. his makes way for scaling - cryptographically secure sampling techniques means that we can scale without sacrificing ethereum’s decentralized validator set. esting is ongoing, just having concluded itsnnsith devnetnn, with the seventh set to launch this week. esting has been anncollaborative effortnnbetween client teams, thereum oundation teams,  core devs, and network tooling researchers.nnnnnnis a multi- upgrade to the . ecause of a significant divide on opinions on if (and whatnnversionnnof)  should be implemented, it was removed from the usaka scope during thenn pr  “final decision” discussionnn. t may yet be proposed for future upgrades.nnebate centered around itsnncompleitynn,nnlong-termnnrelevance, and the potential to add its features piecemeal instead. ritics argue that it could double maintenance costs (legacy + ) and needs more review from app layer devs.nnupportersnnand implementers acknowledge its imperfections, but argue that it’s needed to pay down tech debt, increase security, unlock compiler & gas-efficiency gains, and establish anncleanernnfoundation for future  evolution.nn forksnnhe third  ’d for usaka is thennlob arameter nlynn() forks. his would allow preconfigured blob scaling between hard forks. lob increases would be baked into clients and happen on a pre-defined schedule while being monitored for issues. his  has broad support and plays a significant role in accelerating scalability.nnrocess improvementsnnectra has tested the limits of the current ll ore evs process - this upgrade is the biggest fork in ethereum’s history by number of s, and was even larger before it was split into two it originally contained eer and !nno improve the efficiency of this process, changes are taking shape thatnnetter parallelize upgrades so that the upgrade two forks ahead is already being scoped before the current fork goes live (for eample, if we had the process down right now, the lamsterdam fork scope would be finalized while ectra is in its last stages and usaka implementation is ongoing)nnplit regular callsnninto “all core devs” testing and “all core devs” scoping. esting calls would cover the current fork and scoping calls would deal with ’ing s for the net forknnreatenna new call seriesnnthat discusses longer-term goals and guides research directions. deally, this would lead to more agreement and less debate by the time scoping and then testing is ongoing.nnio’s commentarynnore devs are ambitiously targeting to fork to usaka, which focuses on scaling, by the end of  doable but difficult. n my opinion, if it doesn’t ship by a few weeks prior tonnevconnectnn, it won’t ship until ebruary  because of momentum lost over the holidays, so a “by  ” delivery would be by ctober.nnhe new process of splitting the  calls does seem promising to keep conversations on topic, bring in new voices, and minimize the problem of revisiting old conversations so calls aren’t bogged down by debates around scoping as has been the case with . t also may mitigate any tendency to conflate short-term implementation plans with long-term research directions.nnespite some doom & gloom chatter in wider crypto circles, there’s a ton of momentum in ethereum core protocol development. he process is evolving, research is strong, and implementation is speeding up!nnelevant  callsnn..nn discussionnn(timestamped)nn..nn #nn(nnthagnn)nn..nn #nn(nnthagnn)nn..nn #nn(nnthagnn)nn..nn #nn(nnthagnn)nn..nn #nn(nnthagnn)