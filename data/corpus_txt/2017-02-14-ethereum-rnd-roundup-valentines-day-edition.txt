Titre: Ethereum R&D Roundup: Valentine’s Day Edition\nAuteur: Vitalik Buterin\nDate: February 14, 2017\nURL: https://blog.ethereum.org/2017/02/14/ethereum-rnd-roundup-valentines-day-edition\nCatégorie: Non catégorisé\n\n==================================================\n\nuring the last month and a half, the thereum core development and research teams have been building upon the progress made in the last year, and with the specter of last year's security issues now well behind us, work has begun in full force on implementing the etropolis hard fork.nnirst, ongoing progress on the collaboration with the cash team and the implementation of zk-snnhe full series of "zk- eplainer" posts from myself is now finished, seennhttps//medium.com/italikuterin/quadratic-arithmetic-programs-from-zero-to-hero-fdceann,nnhttps//medium.com/italikuterin/eploring-elliptic-curve-pairings-ccennandnnhttps//medium.com/italikuterin/zk-snarks-under-the-hood-bafnnn update on implementation from hristian eitwiessnernnhttps//blog.ethereum.org////update-integrating-zcash-ethereum/nnn the proof of stake front, myself and lad and others have continued to solidify the asper specification and converge on a roadmap.  key focus of our work has been on a notion of "protocol armor", which can turn many classes of traditional yzantine-fault-tolerant consensus algorithms into "attributable-fault consensus algorithms", where if there is a protocol failure then not only do you know that a large number of validators were faulty, but you also know whom to blame. he work has not yet been fully written out, though it will be further formalized and presented soon, and anyone interested is free to follow along atnnhttps//gitter.im/ethereum/casper-scaling-and-protocol-economicsnn.nn post on parametrizing asper was written herennhttps//medium.com/italikuterin/parametrizing-casper-the-decentralization-finality-time-overhead-tradeoff-fnne hadnntwonncore devnnmeetingsnn, and have approved the following s for likely inclusion into etropolisnnhttp//github.com/ethereum/s/issues/nn(abstraction)nnhttp//github.com/ethereum/s/issues/nn(uncle mining incentive fi)nnhttps//github.com/ethereum/s/issues/nnandnnhttps//github.com/ethereum/s/issues/nn(elliptic curve pairings, the key ingredient for on-chain zk- verification)nnhttps//github.com/ethereum/s/issues/nn(bigint modular eponentation, for use in  and various other big-number-based cryptographic algorithms)nnhttps//github.com/ethereum/s/pull/nn( opcode, equivalent to the "throw" keyword in olidity but without burning etra gas)nnhttps//github.com/ethereum/s/pull/nn(blockhash refactoring, serving the triple duty of (i) simplifying consensus logic, (ii) allowing the  opcode to refer much further back, and (iii) enabling much more efficient and secure light client initial-syncing protocols)nndditionally, there were a few changes to the  process itselfnnhttps//www.reddit.com/r/ethereum/comments/rpmr/update_to_eip_ethereum_improvement_proposal_system/nnork on ist, warm,  and associated infrastructure is continuing at a rapid pace warm is now at the stage where it can serve the wallet app, though the incentivization logic is not yet in place.nnur new developer ictor aia is working on warm integration in ist you can follow progress herennhttps//github.com/ethereum/mist/pull/nnhe work on  includes annname resolvernn, a registrar, annavascript implementation librarynnandnna user-facing dappnn. upport from major thereum wallets is coming soon.nnork on programming languages is also moving forwardnnolidity is adding a fully specified way to access the compiler input, settings and outputnnhttps//solidity.readthedocs.io/en/latest/using-the-compiler.html#compiler-input-and-output-json-descriptionnnhere are plans (not yet completed) to add an intermediate language to olidity to help with understanding what the compiler does and auditing compiler outputnnn the community, thennfp-ethereum functional programming initiativenngot some attentionnniper saw another round of improvements, including support for unit types (timestamp, timedelta, wei, wei per second, etc), bytearrays and more builtin functionsnnhttps//github.com/ethereum/viper/commits/masternnhe avascript-basednndevelopment environment eminnadded much more powerful debugging supportnnork on implementations is progressingnnhe cpp-ethereum project is eperimenting with the performance of the . ome results suggest that the  might be able to get up to a small linear factor close to “raw metal” with the more structurednn . modelnn.nnith its newest .. release, eth supports hardware walletsnnhttps//github.com/ethereum/go-ethereum/releases/tag/v..nnork on integrating the recent pyethereum changes into pyethapp is continuingnnhttps//github.com/ethereum/pyethereum/commits/state_revamp_for_stablenne wish everyone a happy alentine's day!