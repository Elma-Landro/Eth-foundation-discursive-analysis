Titre: eth2 quick update no. 12\nAuteur: Danny Ryan\nDate: June 23, 2020\nURL: https://blog.ethereum.org/2020/06/23/eth2-quick-update-no-12\nCatÃ©gorie: Non catÃ©gorisÃ©\n\n==================================================\n\ns always, a lot continues to happen on the eth front. side from written updates (check out the tate of th post below) and other public summaries, client teams, contributors, and community members/prospective-validators have been busy!nnoday, we'll cover some significant deposit contract news, and big steps toward implementation of spec version v..nntldrnnewnnolidity deposit contractnnformallynnverifiednnand added to the bounty programnnltonannv.nntestnetnnepected to launch in the net weeknnontinuation grant to igma rime fornnbeacon-fuzznnto find all the bugsnn quick plug for mynnlong-winded eth blog postnnolidity deposit contract and formal verificationnnoday, we'd like to announce a new and more secure version of thenneth deposit contractnnwritten in olidity! his contract retains the same public interface (with the addition of annn nnsupportsnterfacennfunction) and thus is an entirelynntransparentnnchange for all eisting client and dev tooling. n fact, the olidity code is primarily a line-by-line translation of the original yper contract to aid in review and formal verification.nnver the past few months, the eth deposit contract was re-written in olidity bynnle eregszaszinn, reviewed by a small group of olidity eperts, andnnformally verifiednnby untime erification largely reusing the -spec originally written for the yper version of the contract.nnlthough the previous yper contract was heavily tested, reviewed, and formally verified there are latent concerns about the safety of the yper compiler as it stands today. uring the original yper bytecode verification, multiple compiler bugs were found (and fied). n addition to the formal verification,nnuhabe ugrarann(onsenys &) conductednna reviewnnof the yper deposit contract and formal verification, leading to many refinements in the formal specification (ultimately aiding in the ease of re-verification of the olidity contract). lthough the verification was assessed as sound, uhabe could not recommend the bytecode as secure as long as it used the yper compiler.nnimultaneously,nnonsenys iligencennandnnrail of itsnndid investigative security reports on the yper compiler, finding many more bugs and raising concerns about systemic issues with the compiler codebase.nnespite these findings, yper is still a very promising language.nnhe python based compiler continues to be developed and a number of contributors are looking into formalizing the language and investigating alternative compilers.nnhile confident in the formally verified bytecode, the issues found in the yper compiler created a heavy reliance on the bytecode verification. t is better to start with a compiler generally agreed upon as safe and to verify bytecode from there, rather than to start with a compiler with known issues and to verify that none of these known (or unknown) issues materialize in the bytecode.nno avoid any shred of doubt in the safety of thisnncriticalnncontract, we recommend using the new olidity contract for eth mainnet, and we welcome olidity contract and  bytecode eperts to review thenncontractnnand associatednnformal verificationnn. ny issues found qualify for thennth hase  ounty rogramnn.nn quick note -- he new contract has not yet made its way into thennspec reponn. 'll be integrating the new olidity contract in this week and release it as a minor version release very soon.  wanted to announce immediately so the community can have plenty of time to review.nnltona v. testnetnnver since the release of spec versionnnv.nn, client teams have been hard at work updating and testing their codebases in preparation for public testnets.nn've seen many questions from the community (on discord, reddit, etc) as to why what seemed like a relatively small update has taken a decent amount of time to complete. lthough each client codebase and the associated challenges at hand are different, teams are takingnnv.nnverynnseriously. hile the update in spec was not too cumbersome, etra time has been taken to tighten up security, optimize functionality, and generally harden the clients before putting them out for what is intended to be the last semi-major version of the spec prior to launch.nnhe time is almost here for the first public, multi-client testnet ofnnv.nn--nnltonannwith an epected launch date in the net seven days. his net will start entirely controlled by the constituent client teams (planned ighthouse, imbus, rysm, and eku), fri, and some  team members. fter initial launch, the deposit contract address will be released to allow for open, public participation.nnike the previous multi-client testnets to date, ltona is more of anndevnetnnthan an end-user focused testnet. hat is, ltona is first and foremost for client teams to sanity checknnv.nnsoftware in a production setting and for eth engineers as a whole to work through any bugs that might only arise in a multi-client setting. hat said, we welcome you to join and grow ltona over time. hen the net step (assuming general success with ltona) is a larger, community focused testnet with the mainnet configuration of a minimum of , validators to start.nnh! and ltona will be using the new olidity deposit contract discussed above. ike  said, this is a % transparent change to eth client software because the public interface is the same. cited to test it in production nonetheless.nnrant for igma rime'snnbeacon-fuzznne're ecited to announce a continuation grant for igma rime's multi-client differential fuzzing effort --nnbeacon-fuzznn. o date, this project has already been huge success, findingnnbugsnninnnallnnof the clients onboarded into the system.nnou can check out thennigma rime blognnto stay up to date on progress. eep your eyes open for the planned "fuzzing at home" etension ofnnbeacon-fuzznnto get involved and maybe find a bug on your home machine!nny long-winded eth blog postnnf you haven't had a chance to read my blog post from a couple of weeks ago, it's not too late! heck outnnhe tate of th, une nnto get a high level overview and understanding of where the eth project stands today and how it fits into thereum as a whole ðŸš€