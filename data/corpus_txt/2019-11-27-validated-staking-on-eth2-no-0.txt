Titre: Validated: Staking on eth2 #0\nAuteur: Carl Beekhuizen\nDate: November 27, 2019\nURL: https://blog.ethereum.org/2019/11/27/validated-staking-on-eth2-no-0\nCatégorie: Non catégorisé\n\n==================================================\n\nhanks to anny and oe for review.nns the launch of the beacon chain grows nearer and eth becomes ever more final, the time has come to fast-sync the community with the latest on the inner workings of eth and on the concrete requirements, incentives and eperience of being a validator. his article will provide a high-level overview of eth which will form the basis for a series on all aspects of eth relevant to validators.
eth has been in the works for a long time now and has improved dramatically over the years. hat were initially separate sharding and roof of take (o) efforts managed via smart contracts has transmogrified into a highly interconnected design which yields dramatic improvements regarding efficiency, scalability and security.nnhe phasesnns parts of eth have become more interconnected, other pieces have been separated out intonnphasesnnto allow for better pipelining of the different aspects of eth. t the time of writing, hase  is nearing launch as developers put the finishing touches on the client software. eanwhile, the specification for hase  is being completed, and hase  is under active &.nnhase nnis concerned with thennbeacon chainnn, the core of eth, which manages validators and the coordination of shards. he beacon chain is the source of ground truth from which all other aspects of eth are bootstrapped.nnhase nnbuilds upon this by allowing data to be put into shards. he implementation compleity of this component is much smaller than the others as phase  lays most of the ground work for the shards.nnhase nnadds eecution to eth basically upgrading eth from a robust database to a fully decentralised computing platform.nnhat eactly is hase nns mentioned previously, the beacon chain tracks the state of both the set of validators and the shards. n practice this means that if you (periodically) follow what is happening on the beacon chain, you will know enough to verify anything said to be happening within eth. rust, but verify.nnn order for a o system to function, there needs to be consensus on who the validators are, and on what each of their stakes are in order to know how much their votes are worth, and to appropriately reward and/or punish them for their behaviour. he beacon chain also manages the sharding aspects of eth by assigning validator duties in the shards as well as tracking the current state of each shard.nnart of what differentiates eth from other o systems is the sheer number of validators that can participate in the protocol. n contrast to the s, s, and s of participants that are possible in other systems, eth scales to hundreds of thousands or even millions of validators. his level of decentralisation is only possible due to the intermediate levels of consensus achieved by groups of validators callednncommitteesnn. he beacon chain uses the eponymous random beacon at its core to assign validators to committees which are tasked with evaluating what is and isn't a part of the beacon and shard chains.  committee's votes are then cryptographically aggregated into annnattestationnnmeaning that verifying an entire committee's votes is only marginally more effort than checking a single vote. herefore, to check the validity of the beacon chain, only a few aggregated signatures need to be considered to evaluate the votes of many validators.nnhe beacon chain also tracks the eth chain and the deposits thereupon so that new validators can join eth by sending  ther to the deposit contract on eth. s a result of the beacon chain voting on the eth chain, eth will, at some point in the future, enhance the security of eth by providing an economic guarantee that blocks that are a part of the canonical eth chain.nnodes vs. lientsnneth makes the distinction between beacon nodes and validator clients, and validators will need both in order to perform their duties. nnbeacon nodenn(or justnnnodenn) concerns itself with maintaining a view of the beacon chain as well as whichever shards may be needed by a user or validator.nns their name suggests,nnvalidator clientsnn(or justnnclientsnn) handle the logic of a single validator. his is achieved by communicating with the beacon node to understand the current state of the chain, by attesting to and proposing blocks as well when appropriate, and finally by asking the beacon node to send this information on to its peers.nnf you are not running a validator, a beacon node contains all of the information you need to trustlessly interact with eth, much like a full node in eth.nnelow are some of the many arguments for this separationnnach validator needs to be initiated with a deposit of eactly  ther and therefore people who wish to stake more  will need to run multiple validator instances. he node-client separation allows such users to only run a single beacon node with multiple validators connected to it thereby reducing computation, memory, and storage requirements.nny having validator nodes be separate modules, they will likely be more secure as it is easier to write, reason about, and audit smaller code modules.nnor users particularly worried about redundancy, multiple nodes can be run in parallel, thus reducing the chance of a validator going offline.nnecause validator clients can only interact with the rest of the eth network via a beacon node, and even then via annrestricted nn, the attack surface of a validator node is greatly reduced.nnor users who wish to interact with eth, but don't want to be a validator, they need only operate a beacon node which will grant them access to the beacon chain and all the shards they require.nnesign hilosophynnhe design philosophy of eth provides useful contet for all the decisions made within eth and in many instances encapsulate the differences between eth and other protocols.nnrotocol über allesnnith the acknowledgement that everything is a trade off, the protocol's safety and liveness take precedence over other design desiderata.nnope for the best, but epect the worstnneth assumes validators will be lazy, take bribes, and that they will try to attack the system unless they are otherwise incentivised not to. urthermore, the network is assumed not to be entirely reliable and that catastrophic events could force large numbers of validators to go offline. or these reasons, eth should be capable of surviving orld ar .nninimally viable compleitynnherever possible, eth has been simplified as this makes it easier to reason about, eplain to others, audit, write bug free clients, and generally avoid edge cases.nnaimally decentralisednnroof of stake protocols commonly compromise on the number of validators that can participate, eth is designed to scale to millions of validators while encouraging these validators to work independently of one another.nnpect the unepectednnll components of eth are resistant to quantum computers or can be swapped out for those that are in the event of a quantum apocalypse.nny the people for the peoplenneth must be able to run on a consumer laptop. he lower the barrier to entry, the more people who can participate which translates into a higher degree of decentralisation.nnrapping upnnow that you have the basics of eth under your belt, the net posts in this series will tackle the juicy details of what makes eth tick.