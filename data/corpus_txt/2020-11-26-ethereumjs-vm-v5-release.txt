Titre: EthereumJS VM v5 Release\nAuteur: The EF JavaScript Team\nDate: November 26, 2020\nURL: https://blog.ethereum.org/2020/11/26/ethereumjs-vm-v5-release\nCatÃ©gorie: Non catÃ©gorisÃ©\n\n==================================================\n\nhile everyone is staring in amazement on ecember st, pm  anticipating the th . eaconchain genesis, within the avacript team we quietly prepared our own little genesis release in the shadows. eing very much around the good ol' th . chain we are nevertheless very much ecited on this too. ðŸ˜€nnome background story thennthereumnnecosystem around thennnnconsists of a very modular set of libraries (vm, blockchain, merkle-patricia-tree, t,...), each encapsulating its own dedicated set of functionality. hile this is great for the user, it turned out to be not so great for development since it often becomes necessary to do changes on several libraries at once which is hard and time-consuming to act upon in a consistency-preserving way having the libraries in different repositories. o early this year we decided to update our setup and combine the -related libraries within a singlennmonoreponn. his is a single repository where it gets possible to target changes on several libraries within a single pull request and run all the different library test suites along all together to ensure consistency. t the same time benefits from having multiple packages all released individually remain.nnince the switch to the monorepo our development activity literally eploded. ðŸ˜‹ e discovered so many things that we wanted to make better that we just couldn't stop, especially since one change often triggered another which was now just "so obvious to do". ðŸ˜œnno we developed. nd developed. nd developed. asically throughout the whole year. hat is the main reason why you heard relatively little from us during the last months, we were just so busy with all this stuff.nnhile at the end of the process we sometimes wondered if we would ever get things together again (see our etensive release notes to get a feeling for what  mean),  am really proud today that  am able to finally announce wenndid itnn. ðŸ˜‹ hanks to an amazing team for all the great and dedicated work on this. ðŸŽ‰nnhis is not one but si major releases on our main libraries with our virtual machine at the forefrontnnethereumjs/common v..nnethereumjs/t v..nnethereumjs/block v..nnethereumjs/ethash v..nnethereumjs/blockchain v..nnethereumjs/vm v..nnn this post we won't go much into the technical details and rather give a high level overview. or a more complete picture see the release notes linked above, we really cared for making these comprise and readable and give a good overview on all the relevant (breaking) changes.nnaybe just one important note we switched to annnew naming schemennalong these releases and you need to use the new names to get the new versions. he formernnethereumjs-vmnnpackage e.g. now installs as followsnnnpmnninstallnnethereumjs/vmnnk. hat is actually in it et's have a quick look.nnll ardforksnnthereum nnvnnnow supports all hardforks back to genesis. his is a primer in the history of avacript thereum and we hope that this will open up for various potentially eciting new use cases. e have got our own, more on this below.nn  on a specific  can be started withnnimportnnnnfromnn'ethereumjs/vm'nnnnimportnnommonnnfromnn'ethereumjs/common'nnnnconstnncommonnnnnnewnnommonnn(nn{nnchainnnnn'mainnet'nn,nnhardforknnnn'spuriousragon'nn}nn)nnnnconstnnvmnnnnnewnnnn(nn{nncommonnn}nn)nnnnn -centric nnhile hardforks are great to bundle a set of agreed changes together a hardfork-centric  has turned out to not be fleible enough to enable a future-driven development where it is not finalized for quite some time which s will make it into a new hardfork (thennerlinnnhardfork seems to be the best eample for this yet).nnith the new  release the internal functional modularization layer has been reworked. his allows for s to now become native citizens within the .   with a special set of s can be instantiated as followsnnimportnnommonnnfromnn'ethereumjs/common'nnnnimportnnnnfromnn'ethereumjs/vm'nnnnconstnncommonnnnnnewnnommonnn(nn{nnchainnnnn'mainnet'nn,nneipsnnnnnnnn]nn}nn)nnnnconstnnvmnnnnnewnnnn(nn{nncommonnn}nn)nnnns a starter we support the following new s (mostly targeted for thennerlinnnhardfork) with the nnvnnreleasenn-nn- imple ubroutinesnn-nn-  recompilesnn-nn- as cost increases for state access opcodesnnypecriptnnn this thereum release cycle we can confidently say that we holistically brought our libraries to a modern technology stack. ne big part of this with the new releases we are closing in on our long planned and eecuted upon ypecript transition and all our major libraries as well as internal dependencies are now written in ypecript.nnust a peak what makes ypecript so great and helps to make our libraries more robust and secure ypecript is a superset of avacript and let developers know the data types for each variable and each object used in the code. s the variable callednnaddressnna string or a binarynnuffernnobject hile you get no eplicit hints about this in avacript - which highly increases the risk for follow-up developer mistakes - in ypecript you will know for sure.nnt also gets a lot more fun to work on our libraries directly or use the libraries within a third-party project since as a developer you can now get hints like this in the  throughout the whole code basennour development environment with proper ypecript typing now just knows that annblockchainnnvariable is annnethereumjs/blockchainnnobject (hold on with your remarks, o and ust developers ðŸ˜… ) and not just "something". o our own code gets respectively your (ypecript) code will get a lot more readable on using the new library versions.nnromisesnnf you are not too much into avacript you can skip this section, but if you are a avacript developer you will likely sigh with relief on these news so we will at least give this a short mentionnnnother transition finalized, all library s are now working with avacript romises. o no more callbacks anywhere throughout our whole stack.nnibrary usage changes fromnnblockchainnn.nngetlocknn(nnblockdnn,nnblocknnnn{nnconsolenn.nnlognn(nnblocknn)nnnn}nn)nnnnew  eamplennconstnnblocknnnnawaitnnblockchainnn.nngetlocknn(nnblockdnn)nnnnconsolenn.nnlognn(nnblocknn)nnnnhe little indentation on this first eample might not seem to mean much on first sight. n several of these old style calls nested together you get deeper and deeper though and at some point code becomes unreadable. ust google "callback hell" if you are interested on how this can look like. ðŸ™‚ romises allow for writing significantly more readable code.nnibrary efactoringsnnt's sometimes a bit hard to imagine on the necessity of an engine change if the car is still running, nevertheless at some point it gets a necessity if you want to safely get through the net . miles. ith refactoring in software it is often a bit similar. ðŸ˜€ ith this release series we reworked the fundamentals of some of our most central libraries and ournnblocknn, ournntnnand partly ournnblockchainnnlibrary received a significant rewrite.nnt should now be a lot easier to work with these libraries and they should be well-prepared to provide a solid and secure basis to be build upon within the thereum avacript ecosystem for the years to come.nnutlooknne hope that you like our new releases. his post can just provide a sneak peak on the most important changes and things are covered in a lot more detail within the release notes linked at the beginning of this post. e are happy to hear your feedback on ournniscordnnserver or our newnnavacriptnntwitter account.nnor ourselves these releases provide some solid ground to move to a more future-guided development cycle and we are eagerly looking forward to see this come into play. ith the  having all hardforks implemented it now gets possible to integrate the  into our revampednnthereum lientnnproject. e won't join mainnet with this client anytime soon. ut we will nevertheless become able to do our share to help improve on client diversity. he new client in its first stages will allow us to join development testnets likennolo vnn(and following) and actively help to discover and protect against consensus bugs between clients. e will also be able to more actively contribute to future protocol research and participate in eventually following research implementations. ou will hear more on this once we have a first usable version of our client ready (targeting fullsync onnnolo vnn), this will be early net year.nnor now we wish everyone a contemplative end of the year being complemented by an eciting beaconchain launch day (week)! ðŸš€nnhe  avacript eam