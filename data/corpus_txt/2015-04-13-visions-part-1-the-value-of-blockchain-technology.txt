Titre: Visions, Part 1: The Value of Blockchain Technology\nAuteur: Vitalik Buterin\nDate: April 13, 2015\nURL: https://blog.ethereum.org/2015/04/13/visions-part-1-the-value-of-blockchain-technology\nCatégorie: Non catégorisé\n\n==================================================\n\nne of the questions that has perhaps been central to my own research in blockchain technology is ultimately, what is it even useful for hy do we need blockchains for anything, what kinds of services should be run on blockchain-like architectures, and why specifically should services be run on blockchains instead of just living on plain old servers actly how much value do blockchains provide are they absolutely essential, or are they just nice to have nd, perhaps most importantly of all, what is the "killer app" going to bennver the last few months,  have spent a lot of time thinking about this issue, discussing it with cryptocurrency developers, venture capital firms, and particularly people from outside the blockchain space, whether civil liberties activists, people in the finance and payments industry or anywhere else. n the process of this,  have come to a number of important, and meaningful, conclusions.nnirst,nnthere will be no "killer app" for blockchain technologynn. he reason for this is simple the doctrine of low-hanging fruit. f there eisted some particular application for which blockchain technology is massively superior to anything else for a significant portion of the infrastructure of modern society, then people would be loudly talking about it already. his may seem like thennold economics jokennabout an economist finding a twenty dollar bill on the ground and concluding it must be fake because otherwise it would already have been taken, but in this case the situation is subtly different unlike the dollar bill, where search costs are low and so picking up the bill makes sense even if there is only a .% chance it is real, here search costs are very high, and plenty of people with billions of dollars of incentive have already been searching. nd so far, there has been no single application that anyone has come up with that has seriously stood out to dominate everything else on the horizon.nnn fact, one can quite reasonably argue that the closest things that we will ever have to "killer apps" are precisely those apps that have already been done and recited and sensationalized ad nauseam censorship resistance for ikileaks and ilk oad. ilk oad, the online anonymous drug marketplace that was shut down by law enforcement in late , processednnover $ billion in salesnnduring its . years of operations, and while thennpayment-system-orchestrated blockadennagainst ikileaks was in progress, itcoin and itecoin donations werennresponsible for the bulk of its revenuenn. n both cases the need was clear and the potential economic surplus was very high - before itcoin, you would have no choice but to buy the drugs in person and donate to ikileaks by cash-in-the-mail, and so itcoin provided a massive convenience gain and thus the opportunity was snatched up almost instantly. ow, however, that is much less the case, and marginal opportunities in blockchain technology are not nearly such easy grabs.nnotal and verage tilitynnoes this mean, however, that blockchains have hit their peak utility ost certainly not. hey have hitnnpeak necessitynn, in the sense ofnnpeak utility per usernn, but that is not the same thing as peak utility. lthough ilk oad was indispensable for many of the people that used it, even among the drug-using community it's not indispensable in general as much as it befuddles this particular author how ordinary individuals are supposed to get such connections, most people have somehow found "a guy" that they know that they can purchase their weed from. nterest in smoking weed at all seems to strongly correllate with having easy access to it. ence, in the grand scheme of things, ilk oad has only had a chance to become relevant to a very niche group of people. ikileaks is similar the set of people who care about corporate and governmental transparency strongly enough to donate money to a controversial organization in support of it is not very large compared to the entire population of the world. o what's left n short, the long tail.nno what is the long tail his is where it gets hard to eplain.  could provide a list of applications that are included in this "long tail" of applications however, blockchains are not indispensable, and do not even offer etremely strong fundamental advantages for each one. or each individual case, an advocate of either the "blockchain applications are overrated, it's the itcoin currency that matters" or the "blockchain tech as a whole is useless" position can quite reasonably come up with a way to implement the scheme just as easily on a centralized server, replace blockchain governance with a legal contract, and apply whatever other replacements to turn the product into something much more similar to a traditional system. nd on that point, they would be completely correct for that particular use case, blockchains are not indispensable. nd that's the whole point those applications are not at the top of the distribution, up there with ikileaks and ilk oad if they were, they would have been implemented already. n the long tail, blockchains are not necessarynnthey are convenientnn. hey are simply marginally better than the net available tool for the job. nd yet, because these applications are much more mainstream, and can benefit hundreds of millions of users, the total gain to society (which can be seen from the area on the above chart) is much larger.nnerhaps the best analogy to this line of reasoning is to ask the following rhetorical question what is the killer app of "open source" pen source has clearly been a very good thing for society, and it is being used for millions of software packages around the world, but nevertheless it is still hard to answer the question. nd the reason is the same there is no killer app, and the list of applications has a very very long tail - basically, just about every kind of software imaginable, with particular emphasis on lower-level libraries that end up reused by millions of projects many times over and critical cryptographic security libraries.nnlockchains, edefined... gainnnow, what are the specific benefits of blockchains that make the long tail worthwhile o start off, let me provide the current description that  use of what a blockchain isnn blockchain is a magic computer that anyone can upload programs to and leave the programs to self-eecute, where the current and all previous states of every program are always publicly visible, and which carries a very strong cryptoeconomically secured guarantee that programs running on the chain will continue to eecute in eactly the way that the blockchain protocol specifies.nnotice that this definition does nnse financially-charged terms like "ledger", "money" or "transactions", or indeed any terms geared toward a particular use casennention any particular consensus algorithm, or indeed mention anything about the technical properties of how a blockchain works (ecept for the fact that it's "cryptoeconomic", a technical term roughly meaning "it's decentralized, it uses public key cryptography for authentication, and it uses economic incentives to ensure that it keeps going and doesn't go back in time or incur any other glitch")nnake a restriction to any particular type of state transition functionnnhe one thing that the definition does well is eplain what a blockchainnndoesnn, and it eplains it in such a way that any software developer will be able to fairly clearly have at least an intuitive grasp of its value proposition. ow, in practice, sometimes the programming language that the programs run in is very restrictive itcoin's language can be seen as requiring a sequence ofnn  tid inde scriptsignnstatements followed by a sequence ofnn  scriptpubkey valuennstatements, wherennscriptpubkeynnis a restricted mathematical formula,nnscriptsignnmust be a satisfying variable assignment to the formula (eg.nn{  , y  }nnsatisfiesnn *  - y  nn), and an attempt to destroy a noneistent coin or destroy a coin without supplying a valid scriptsig for that coin's scriptpubkey, or an attempt to create more coin value than you destroyed, returns an error. ther programming languages, on the other hand, can be much more epressive. t's up to the software developer to analyze what programming language is right for their task, much like it is a software developer's task today to decide between python, ++, ode andnnalbolgenn.nnhe one thing that the definition emphasizes etremely well is that blockchains are not about bringing to the world any one particular ruleset, whether it's a currency with a fied-supply monetary policy, a name registry with ann-day re-registration timenn, a particular decentralized echange design or whatever else rather, they're about creating the freedom to create a new mechanism with a new ruleset etremely quickly and pushing it out. hey're ego indstorms for building economic and social institutions.nnhis is the core of the more moderate version of the "it's the blockchain that's eciting, not the currency" position that is so prevalent in mainstream industry it is indeed true that currency is necessary to make cryptoeconomic blockchains work (although  blockchain-like data structures following thenntellar subjective consensus modelnn), but the currency is there simply as economic plumbing to incentivize consensus participation, hold deposits and pay transaction fees, not as the center-stage point of speculative mania, consumer interest and ecitement.nnow, why are blockchains useful o summarizennou can store data on them and that data is guaranteed to have a very high degree of availabilitynnou can run applications on them and be guaranteed an etremely high uptimennou can run applications on them, and be guaranteed an etremely high uptimenngoing very far into the futurennou can run applications on them, and convince your users that the application's logic is honest and is doing what you are advertising that it doesnnou can run applications on them, and convince your users that your application will remain workingnneven ifnnyou lose interest in maintaining it, you are bribed or threatened to manipulate the application state in some way, or you acquire a profit motive to manipulate the application state in some waynnou can run applications on them, and give yourself the backdoor key if it is absolutely necessary,  put "constitutional" limiations on your use of the key - for eample, requiring a software update to pass through a public one-month waiting period before it can be introduced, or at the very least immediately notifying users of application updatesnnou can run applications on them, and give a backdoor key to a particular governance algorithm (eg. voting,nnfutarchynn, some complicated multicameral parliament architecture), and convince your users that the particular governance algorithm in question is actually in control of the applicationnnou can run applications on them, and those applications cannntalk to each other with % reliabilitynn- even if the underlying platform has only .% reliabilitynnultiple users or companies can run applications on them, and those applications can interact with each other at etremely high speed without requiring any network messages, while at the same time ensuring that each company has total control over its own applicationnnou can build applications that very easily and efficiently take advantage of the data produced by other applications (eg. combining payments and reputation systems is perhaps the largest gain here)nnll of those things are valuable indirectly to billions of people around the world, potentially particularly in regions of the world where highly developed economic, financial and social infrastructure currently simply does not work at all (though technology will often need to be combined with political reforms to solve many of the problems), and blockchains are good at providing these properties. hey are particularly obviously valuable in finance, as finance is perhaps the most simultaneously computationally and trust-intensive industry in the world, but they are also valuable in many other spots in internet infrastructure. here do eist other architectures that can also provide these properties, butnnthey are slightly to moderately less goodnnthan blockchains are. avin ood has started describing this ideal computing platform as "the world computer" - a computer the state of which is shared among everyone and which a very large group of people, which anyone is free to join, are involved in maintaining.nnase ayer nfrastructurennike open source, by far the largest opportunity for gains out of blockchain technology are out of what can be called "base-layer infrastructure" services. ase-layer infrastructure services, as a general category, are characterized by the following propertiesnnependencynn- there eist many other services that intimately depend on the base-layer service for functionalitynnigh network effectsnn- there are substantial benefits from very large groups of people (or even everyone) using the same servicennigh switching costsnn- it is difficult for an individual to switch from one service to the othernnote that one concern that is not in there is any notion of raw "necessity" or "importance" there can be fairly unimportant base layers (eg.  feeds) and important non-base-layers (eg. food). ase-layer services have eisted ever since even before the dawn of civilization in the so-called "caveman days" the single most important base-layer service of all was language. n somewhat more recent times, the primary eamples became roads, the legal system and postal and transportation systems, in the th century we added telephone networks and financial systems, and at the end of the millennium emerged the internet. ow, however, the new base-layer services of the internet are almost entirely informational internet payment systems, identity, domain name systems, certificate authorities, reputation systems, cloud computing, various kinds of data feeds, and perhaps in the near futurennprediction marketsnn.nnn ten years time, the highly networked and interdependent nature of these services may make it such that it is harder for individuals to switch from one system to another than it is for them to even switch which government they are living under - and that means that making sure that these services are built correctly and that their governance process does not put a few private entities in positions of etreme power is of utmost importance. ight now, many of these systems are built in a highly centralized fashion, and this is in part simply due to the fact that the original design of the orld ide eb failed to realize the importance of these services and include defaults - and so, even today, most websites ask you to "sign in with oogle" or "sign in with acebook", and certificate authorities run intonnproblems like thisnn" solo ranian hacker on aturday claimed responsibility for stealing multiple  certificates belonging to some of the eb's biggest sites, including oogle, icrosoft, kype and ahoo.nnarly reaction from security eperts was mied, with some believing the hacker's claim, while others were dubious.nnast week, conjecture had focused on a state-sponsored attack, perhaps funded or conducted by the ranian government, that hacked a certificate reseller affiliated with ..-based omodo.nnn arch , omodo acknowledged the attack, saying that eight days earlier, hackers had obtained nine bogus certificates for the log-on sites of icrosoft's otmail, oogle's mail, the nternet phone and chat service kype and ahoo ail.  certificate for ozilla's irefo add-on site was also acquired."nnhy shouldn't certificate authorities be decentralized at least to the point of an -of- system again (ote that the case for much more widespread use of -of- is logically separable from the case for blockchains, but blockchains happen to be a good platform to run -of- on).nndentitynnet us take a particular use case, "identity on the blockchain", and run with it. n general, what do you need in order to have an identity he simplest answer is one we already know you need to have a public and private key. ou publish the public key, which becomes your , and you digitally sign every message you send with your private key, allowing anyone to verify that those messages were produced by you (where, from their point of view, "you" means "the entity that holds that particular public key"). owever, there are a few challengesnnhat happens if your key gets stolen, and you need to switch to a new onennhat happens if you lose your keynnhat if you want to refer to other users by their names, and not just a random -byte string of cryptographic datannhat if you want to use a more advanced approach for security such as multisig, and not just a single keynnet us try solving these challenges one-by-one. e can start off with the fourth.  simple solution is this instead of requiring one particular cryptographic signature type, your public key becomes a program, and a valid signature becomes a string that, when fed into the program together with the message, returns . heoretically, any single-key, multi-key or whatever other kind of ruleset can be encoded into such a paradigm.nnowever, this has a problem the public keys will get too long. e can solve this by putting the actual "public key" into some data store (eg. anndistributed hash tablennif we want decentralization) and using the hash of the "public key" as the user's . his does not yet require blockchains - although, in the latest designs, in the limit scalable blockchains are really not that different in design from s and so it is entirely possible that, in ten years time, every kind of decentralized system used for anything will accidentally or intentionally converge into some kind of scalable blockchain.nnow, consider the first problem. e can think of this as thenncertificate revocationnnproblem if you want to "revoke" a particular key, how do you ensure that it gets around to everyone who needs to see it his by itself can once again be solved by a distributed hash table. owever, this leads to the net problem if you want to revoke a key, what do you replace it with f your key is stolen, you and the attacker both have it, and so neither of you can be convincingly more authoritative. ne solution is to have three keys, and then if one gets revoked then require a signature from two or all of them to approve the net key. ut this leads to a "nothing at stake" problem if the attackernneventuallynnmanages to steal all three of your keys from some point in history, then they can simulate a history of assigning a new key, assigning further new keys from there, and your own history is no longer more authoritative.nnhisnnis a timestamping problem, and so here blockchains can actually help.nnor the second problem, holding multiple keys and reassigning also works reasonably well - and here, blockchains are not needed. n fact, you do not need to re-assign with clever use ofnnsecret sharingnnyou can actually recover from key losses simply by keeping your key in "shards", such that if you lose any single shard you can always use secret sharing math to simply recover it from the others. or the third problem, blockchain-based name registries are the simplest solution.nnowever, in practice most people are not well-equipped to securely store multiple keys, and there are always going to be mishaps, and often centralized services play an important role helping people get their accounts back in the event of a mistake. n this case, the blockchain-based solution is simple social -of- backup.nnou pick eight entities they may be your friends, your employer, some corporation, nonprofit or even in the future a government, and if anything goes wrong a combination of five of them can recover your key. his concept of social multi-signature backup is perhaps one of the most powerful mechanisms to use in any kind of decentralized system design, and provides a very high amount of security very cheaply and without relying on centralized trust. ote that blockchain-based identity, particularly with thereum's contract model, makes all of this very easy to program in the name registry, register your name and point it at a contract, and have that contract maintain the current main key and backup keys associated with the identity as well as the logic for updating them over time. n identity system, safe and easy-to-use enough for grandma, done without any individual entity (ecept for you!) in control.nndentity is not the only problem that blockchains can alleviate. nother component, intimately tied up with identity, is reputation. urrently, what passes for "reputation systems" in the modern world are invariably either insecure, due to their inability to ensure that an entity rating another entitynnactually interacted with themnn, or centralized, tying reputation data to a particular platform and having the reputation data eist under that platform's control. hen you switch from ber to yft, your ber rating does not carry over.nn decentralized reputation system would ideally consist of two separate layers data and evaluation. ata would consist of individuals making independent ratings about others, ratings tied to transactions (eg. with blockchain-based payments one can create an open system such that you can only give merchants a rating if you actually pay them), and a collection of other sources, and anyone can run their own algorithm to evaluate their data "light-client friendly" algorithms that can evaluate a proof of reputation from a particular dataset quickly may become an important research area (many naive reputation algorithms involve matri math, which has nearly cubic computational compleity in the underlying data and so is hard to decentralize). "ero-knowledge" reputation systems that allow a user to provide some kind of cryptographic certificate proving that they have at leastnnnnreputation points according to a particular metric without revealing anything else are also promising.nnhe case of reputation is interesting because it combines together multiple benefits of the blockchain as a platformnnts use as a data store for identitynnts use as a data store for reputational recordsnnnter-application interoperability (ratings tied to proof of payment, ability for any algorithm to work over the same underlying set of data, etc)nn guarantee that the underlying data will be portable going into the future (companies may voluntarily provide a reputation certificate in an eportable format, but they have no way tonnpre-commitnnto continuing to have that functionality going into the future)nnhe use of a decentralized platform more generally to guarantee that the reputation wasn't manipulated at the point of calculationnnow, for all of these benefits, there are substitutes we can trust isa and astercard to provide cryptographically signed receipts that a particular transaction took place, we can store reputational records on archive.org, we can have servers talk to each other, we can have private companies specify in their terms of service that they agree to be nice, and so forth. ll of these options are reasonably effective, but they arennnot nearly as nicennas simply putting everything out into the open, running it on "the world computer" and letting cryptographic verification and proofs do the work. nd a similar argument can be made for every other use case.nnutting ostsnnf the largest value from blockchain technology comes at the long tail, as this thesis suggests, then that leads to an important conclusionnnthe per-transaction gain from using a blockchain is very smallnn. ence, the problem of cutting costs of consensus and increasing blockchain scalability becomes paramount. ith centralized solutions, users and businesses are used to paying essentially $ per "transaction" although individuals looking to donate to ikileaks may be willing to pay even a fee of $ to get their transaction through, someone trying to upload a reputation record may well only be willing to pay a fee of $..nnence, the problem of making consensus cheaper, both in the absolute sense (ie. proof of stake) and in the per-transaction sense (ie.nnthroughnnscalablennblockchainnnalgorithmsnnwhere at mostnna few hundred nodesnnprocessnneach transactionnn), is absolutely paramount. dditionally, blockchain developers should keep in mind that the last forty years of software development has been a history of moving to progressively less and less efficient programming languages and paradigms solely because they allow developers to be less eperienced and lazier, and similarly work to design blockchain algorithms that work around the principle that developers are really not going to be all that smart and judicious about what they put on the blockchain and what they keep off - though a well-designed system of transaction fees will likely lead to developers naturally learning most of the important points through personal eperience.nnence, there is substantial hope for a future that can be, to a substantial degree, more decentralized however, the days of easy gains are over. ow is the time for a much harder, and longer, slog of looking into the real world, and seeing how the technologies that we have built can actually benefit the world. uring this stage, we will likely discover that at some point we will hit an inflection point, where most instances of "blockchain for " will be madennnotnnby blockchain enthusiasts looking for something useful to do, coming upon , and trying to do it, but rather bynn enthusiastsnnwho look at blockchains and realize that they are a fairly useful tool for doing some part of . hether  is internet of things, financial infrastructure for the developing world, bottom-up social, cultural and economic institutions, better data aggregation and protection for healthcare, or simply controversial charities and uncensorable marketplaces. n the latter two cases, the inflection point has likely already hit many of the original crowd of blockchain enthusiastsnnbecamennblockchain enthusiasts because of the politics. nce it hits in the other cases, however, then we will truly know that it has gone mainstream, and that the largest humanitarian gains are soon to come.nndditionally, we will likely discover that the concept of "the blockchain community" will cease to be meaningful as any kind of quasi-political movement in its own right if any label applies at all, "crypto ." is likely to be the most defensible one. he reason is similar to why we do not have a concept of "the distributed hash table community", and "the database community", while eistent, is really simply a set of computer scientists who happen to specialize in databases blockchains are just one technology, and so ultimately the greatest progress can only be achieved by working on combination with a whole set of other set of decentralized (and decentralization-friendly) technologiesnnreputation systemsnn, distributed hash tables, "nnpeer-to-peer hypermedia platformsnn", distributed messaging protocols, prediction markets, zero-knowledge proofs and likely many more that have not yet been discovered.