Titre: eth2 quick update no. 4\nAuteur: Danny Ryan\nDate: November 21, 2019\nURL: https://blog.ethereum.org/2019/11/21/eth2-quick-update-no-4\nCatÃ©gorie: Non catÃ©gorisÃ©\n\n==================================================\n\nelcome to the fourth installment ofnneth quick updatenn. here are a lot of moving pieces to talk about this week. ther than the heroic eth client development going on, these are the highlightsnntldrnnrant to igma rime fornneth differential fuzzingnnight lient ask orcennis formednnome notes on the uni-directional bridge between eth and ethnnifferential fuzzing grantnnigma rime has been awarded a grant to lead thenndifferential fuzzing effortnnfor eth clients. his effort is critical to the success of launching a multi-client network by aiding in catching consensus issues prior to mainnet.nnhe act of "fuzzing" is the act of throwing many random inputs at a piece of software to see how it reacts. hen fuzzing a single piece of software, the goal is often to find inputs that lead to unepected crashes. hen we find such inputs, we then figure out what went wrong and harden the software to this type of input.nnifferentialnnfuzzing is a bit different. nstead of eplicitly looking for crashes, we look for instances in which different implementations of a protocol have a different output for the same input. n a blockchain contet, we use differential fuzzing to find cases in which a series of blocks leads to a different resulting state on two different clients. deally in production there are no such cases.nnight client task forcennhainsafe/nnodestarnn, the recipients of an thereum oundation grant for research and development on eth light clients, has formed thennight lient ask orcenn. his group has tasked themselves with ensuring that light clients are first class citizens in eth. o this end, they are hosting annmonthly callnnaimed at driving light client research, standards, specs, and education.nnhe need for a rich ecosystem of light clients and light client servers is only amplified in a sharded protocol like eth. ven if a client is syncing some subset of the protocol (e.g. just a couple of shards), a user will very often need to get information about accounts, contracts, and the general state of things on another shard.  client could inefficiently sync the entire additional shard, but more often than not, lightly requesting information about specific accounts on the shard with succinct proofs will be the way to go.nnune in to the netnnight lient ask orce callnnto stay up-to-date on all things light in eth.nneth - ethnnn the early days of eth, the transfer of ether from the eisting ethereum chain (eth) into the new beacon chain (eth) will be uni-directional. hat is, the ether moved into staking on eth will not be transferable (to start) back to eth. he choice of a single directional transfer into validation is in an effort to minimize the risk profile that eth induces upon eth, and to allow for a quicker development cycle on eth without having to fork eth in the process. here is some movement around creating a bi-directional bridge, but 'll save discussion of the bridge mechanics and the trade-offs for a later post. oday, 'd like to get more intonnhownnthis uni-directional transfer works and how it can be safely implemented without changing eth.nnn the eisting ethereum o chain, we will deploy thenneth validator contractnn. his contract has a single function callednndepositnnwhich takes in a number of parameters to initialize a new validator (e.g. public key, withdrawal credentials, an  deposit, etc). here is nonnwithdrawalnnfunction on this contract. arring a fork to add in a bi-directional bridge, this deposited  now only eists in eth on the beacon chain.nnt is then the validators' responsibility on the beacon chain to come to consensus on the state of this contract such that new deposits can be processed. his is done by eth block proposers embedding recent eth data into a beacon block field callednneth_datann. hen enough block proposers during a voting period agree on recentnneth_datann, this data is enshrined in the beacon chain state allowing for new deposits to be processed.nnn important note about this mechanism is that thenneth_datannis deep in the eth o chain -- ~ blocks of "follow distance". his follow distance induces a high latency in processing new validator deposits, but provides a high degree of safety in the coupling of these two systems. he eth chain would have to re-org deeper than  blocks to break the link, and in such a case would require some manual intervention to overcome.nne are researching and prototyping the utilization of the beacon chain to finalize eth (i.e. the finality gadget). his would require eth to defer its fork choice ultimately to the beacon chain, gaining security from the o validators, and allowing for a much quicker eth to eth deposits. he finality gadget also opens up other fun things such as the bi-directional bridge and eposing the eth data-layer to eth. ore on all of this in a later post ðŸš€.