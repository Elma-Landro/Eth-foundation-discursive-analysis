Titre: Ethereum in practice part 3: how to build your own transparent bank on the blockchain\nAuteur: Alex Van de Sande\nDate: December 7, 2015\nURL: https://blog.ethereum.org/2015/12/07/ethereum-in-practice-part-3-how-to-build-your-own-transparent-bank-on-the-blockchain\nCatégorie: Non catégorisé\n\n==================================================\n\nhis is the third and final post on a series on how to use the thereum allet to create your own autonomous organisations. n thennfirst post we detailed how to create a tokennn, and on thennsecond we shown how to generate a digital democracy controlled by these tokensnn. ow we will do the full circle and create a tokennncontrollednnby the rganisation!nne are going to modify the token contract to allow it to be minted by your . o save the address of your current  in a note pad (pay attention to the icon) andnngrab this source codennand you know the drillnncontracts  deploy new contract  solidity source code  pick contractnnou can fill the parameters any way you want (yes, emojis are permitted on the string fields) but you'll notice one new field that didn't eist before entral inter. ere add the address of your newly created democracy contract.nnlick eploy and let's wait for the transaction to be picked up. fter it has at least two confirmations, go to your democracy contract and you'll notice that now it owns a million of your new coins. ow if you go to the ontracts tab you'll see that there is a newnn dollar (admin page)nncontract on your collection.nnelect the "mintoken" function to your right and then put any address you own as the "target", and then the amount of new mints you want to create from thin air in their account. ress "nneecutenn" butnndon't press sendnn! ou'll notice that there is a warning saying that the transaction can't be eecuted. his happens because only thenninternn(which is currently set to the  address) can call that function and you are calling it with your main account. ut the calling code is the same, which is why you can simply copy it.nnnstead,nncopy the contract eecution code from the "data" fieldnnand put it aside on a notepad. lso get the address of your new "int" contract and save it somewhere.nnow go back to the democracy contract and create a new proposal with these parametersnns thennbeneficiarynn, put the address of your new tokennneavennethermountnnblanknnn thennjobescriptionnnjust write a small description that you are minting new coinsnnn thenntransactionytecodenn, paste the bytecode you saved from the data field on the previous stepnnn a few seconds you should be able to see that the details on the proposal. nlike the other fields, transactionytecode can be etremely lengthy and therefore epensive to store on the blockchain. o instead of archiving it, the person eecuting the call later will provide the bytecode.nnut that of course creates a security hole how can a proposal be voted without the actual code being there nd what prevents a user from eecuting a different code after the proposal has been voted on hat's why we keep the hash of the bytecode. croll a bit on the "read from contract" function list and you'll see a proposal checker function, where anyone can put all the function parameters and check if they match the one being voted on. his also guarantees that proposals don't get eecuted unless the hash of the bytecode matches eactly the one on the provided code.nnt's an older code, but it checks outnnow everyone can vote on the proposal and after the voting period has passed, anyone with the correct bytecode can ask the votes to be tallied up and the contract to be eecuted. f the proposal has enough support then the newly minted coins should appear on lice's account, as if it was a transfer from address ero.nnhy a transfer from address zero ecause doing the opposite, sending a coin to  is a way to effectively destroy it, but more importantly, because it says so on the contract code. ou can change that as you prefer.nnnd now you have a central minter contract that eists solely on the blockchain, completelly fraud-proof as all their activities are logged transparently. he mint can also take coins from circulation by simply sending the coins it has to address ero, or by freezing the funds on any account, but it'snnmathematically impossiblennfor the int to do any of those actions or generate more coins without the support of enough shareholders of the mint.nnossible uses of this nnhe creation of a universal stable crypto currency. y controlling the total amount of coins in circulation the int shareholders can attempt to create an asset whose value doesn't fluctuate too wildly.nnssuance of certificates of backed assets the coins can represent an eternal currency or items that the int owns and can prove to it's shareholders and token holders. hen the int acquires or sells more of these assets it can burn or generate more assets to guarantee that their digital inventory will always match their real counterpartnnigitally backed assets. he int can hold ether or other ethereum based digital currencies and use that to back the value of the currencies circulatingnnmprovements uggestionsnnhere are multiple ways that this structure can be yet improved, but we will leave it as an eercise and challenge to the readernnight now votes are made by shareholders based on freely tradable tokens. an instead membership be based on invitation, each member getting a single vote (or maybe usennquadratic votingnnornnliquid democracynn)nnhat about other voting mechanisms aybe the vote instead of being a boolean could be a more fleible arrangement you could vote to postpone the decision, or you can make a vote that is neutral but still count to the quorumnnurrently all proposals have the same debating period. an you make that proportional to the value transfer being proposed ow would you calculate that to tokensnnan you create a better token that can be automatically created by sending ether into it, which can then be retrieved by burning the token, at a fluctuating market pricennhat else can the  own or do, besides tokens