Titre: More Thoughts on Scripting and Future-Compatibility\nAuteur: Vitalik Buterin\nDate: February 5, 2014\nURL: https://blog.ethereum.org/2014/02/05/more-thoughts-on-scripting-and-future-compatibility\nCatégorie: Non catégorisé\n\n==================================================\n\ny previous post introducingnnthereum cript .nnwas met with a number of responses, some highly supportive, others suggesting that we switch to their own preferred stack-based / assembly-based / functional paradigm, and offering various specific criticisms that we are looking hard at. erhaps the strongest criticism this time came fromnnergio amian ernernn, itcoin security researcher, developer of ioin and to whom we are grateful for hisnnanalysis of aggernn. ergio particularly criticizes two aspects of the change the fee system, which is changed from a simple one-variable design where everything is a fied multiple of the , and the loss of the crypto opcodes.nnhe crypto opcodes are the more important part of ergio’s argument, and  will handle that issue first. n thereum cript ., the opcode set had a collection of opcodes that are specialized around certain cryptographic functions – for eample, there was an opcode , which would take a length and a starting memory inde off the stack and then push the  of the string taken from the desired number of blocks in memory starting from the starting inde. here were similar opcodes for and  and there were also crypto opcodes oriented around secpk elliptic curve operations. n , those opcodes are gone. nstead, they are replaced by a fluid system where people will need to write  in  manually (in practice, we would offer a commision or bounty for this), and then later on smart interpreters can seamlessly replace the   script with a plain old machine-code (or even hardware) version of  of the sort that you use when you call  in ++. rom an outside view,   and machine code  are indistinguishable they both compute the same function and therefore make the same transformations to the stack, the only difference is that the latter is hundreds of times faster, giving us the same efficiency as if  was an opcode.  fleible fee system can then also be implemented to make  cheaper to accommodate its reduced computation time, ideally making it as cheap as an opcode is now.nnergio, however, prefers a different approach coming with lots of crypto opcodes out of the bo, and using hard-forking protocol changes to add new ones if necessary further down the line. e writesnnirst, after  years of watching itcoin closely  came to understand thatnna cryptocurrency is not a protocol, nor a contract, nor a computer-network.  cryptocurrency is a communitynn. ith the eception of a very few set of constants, such as the money supply function and the global balance, anything can be changed in the future, as long as the change is announced in advance. itcoin protocol worked well until now, but we know that in the long term it will face scalability issues and it will need to change accordingly. hort term benefits, such as the simplicity of the protocol and the code base, helped the itcoin get worldwide acceptance and network effect. s the reference code of itcoin version . as simple as the . version not at all. ow there are caches and optimizations everywhere to achieve maimum performance and higher o security, but no one cares about this (and nobody should).  cryptocurrency is bootstrapped by starting with a simple value proposition that works in the short/mid term.nnhis is a point that is often brought up with regard to itcoin. owever, the more  look at what is actually going on in itcoin development, the more  become firmly set in my position that, with the eception of very early-stage cryptographic protocols that are in their infancy and seeing very low practical usage, the argument is absolutely false. here are currently many flaws in itcoin that can be changed if only we had the collective will to. o take a few eamplesnnhe   block size limitnn. urrently, there is a hard limit that a itcoin block cannot have more than   of transactions in it – a cap of about seven transactions per second. e are starting to brush against this limit already, with about   in each block, and it’s putting pressure on transaction fees already. n most of itcoin’s history, fees were around $., and every time the price rose the default -denominated fee that miners accept was adjusted down. ow, however, the fee is stuck at $., and the developers are not adjusting it down arguably because adjusting the fee back down to $. would cause the number of transactions to brush against the   limit. emoving this limit, or at the very least setting it to a more appropriate value like  , is a trivial change it is only a single number in the source code, and it would clearly do a lot of good in making sure that itcoin continues to be used in the medium term. nd yet, itcoin developers have completely failed to do it.nnhe _ bugnn. here is a well-known bug in the _ operator, used to implement multisig transactions in itcoin, where it requires an additional dummy zero as an argument which is simply popped off the stack and not used. his is highly non-intuitive, and confusing when  personally was working on implementing multisig fornnpybitcointoolsnn,  was stuck for days trying to figure out whether the dummy zero was supposed to be at the front or take the place of the missing public key in a -of- multisig, and whether there are supposed to be two dummy zeroes in a -of- multisig. ventually,  figured it out, but  would have figured it out much faster had the operation of the_ operator been more intuitive. nd yet, the bug has not been fied.nnhe bitcoind clientnn. he bitcoind client is well-known for being a very unwieldy and non-modular contraption in fact, the problem is so serious that everyone looking to build a bitcoind alternative that is more scalable and enterprise-friendly is not using bitcoind at all, instead starting from scratch. his is not a core protocol issue, and theoretically changing the bitcoind client need not involve any hard-forking changes at all, but the needed reforms are still not being done.nnll of these problems are not there because the itcoin developers are incompetent. hey are not in fact, they are very skilled programmers with deep knowledge of cryptography and the database and networking issues inherent in cryptocurrency client design. he problems are there because the itcoin developers very well realize that itcoin is a -billion-dollar train hurtling along at  kilometers per hour, and if they try to change the engine midway through and even the tiniest bolt comes loose the whole thing could come crashing to a halt.  change as simple as swapping the database back in arch nnalmost didnn. his is why in my opinion it is irresponsible to leave a poorly designed, non-future-proof protocol, and simply say that the protocol can be updated in due time. n the contrary, the protocol must be designed to have an appropriate degree of fleibility from the start, so that changes can be made by consensus to automatically without needing to update any software.nnow, to address ergio’s second issue, his main qualm with modifiable fees if fees can go up and down, it becomes very difficult for contracts to set their own fees, and if a fee goes up unepectedly then that may open up a vulnerability through which an attacker may even be able to force a contract to go bankrupt.  must thank ergio for making this point it is something that  had not yet sufficiently considered, and we will need to think carefully about when making our design. owever, his solution, manual protocol updates, is arguably no better protocol updates that change fee structures can epose new economic vulnerabilities in contracts as well, and they are arguably even harder to compensate for because there are absolutely no restrictions on what content manual protocol updates can contain.nno what can we do irst of all, there are many intermediate solutions between ergio’s approach – coming with a limited fied set of opcodes that can be added to only with a hard-forking protocol change – and the idea  provided in the  blogpost of having miners vote on fluidly changing fees for every script. ne approach might be to make the voting system more discrete, so that there would be a hard line between a script having to pay % fees and a script being “promoted” to being an opcode that only needs to pay a  . his could be done via some combination of usage counting, miner voting, ether holder voting or other mechanisms. his is essentially a built-in mechanism for doing hardforks that does not technically require any source code updates to apply, making it much more fluid and non-disruptive than a manual hardfork approach. econd, it is important to point out once again that the ability to efficiently do strong crypto is not gone, even from the genesis block when we launch thereum, we will create a  contract, a  contract, etc and “premine” them into pseudo-opcode status right from the start. o thereum will come with batteries included the difference is that the batteries will be included in a way that seamlessly allows for the inclusion of more batteries in the future.nnut it is important to note that  consider this ability to add in efficient optimized crypto ops in the future to be mandatory. heoretically, it is possible to have a “erocoin” contract inside of thereum, or a contract using cryptographic proofs of computation () and fully homomorphic encryption so you can actually use thereum as the “decentralized mazon  instance” for cloud computing that many people now incorrectly believe it to be. nce quantum computing comes out, we might need to move to contracts that rely on  one  or  come out we might need to move to contracts that rely on them. ncennobfuscation technologynnmatures, contracts will want to rely on that to store private data. ut in order for all of that to be possible with anything less than a $ fee per transaction, the underlying cryptography would need to be implemented in ++ or machine code, and there would need to be a fee structure that reduces the fee for the operations appropriately once the optimizations have been made. his is a challenge to which  do not see any easy answers, and comments and suggestions are very much welcome.