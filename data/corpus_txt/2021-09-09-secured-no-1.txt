Titre: Secured no. 1\nAuteur: Antonio Sanso\nDate: September 9, 2021\nURL: https://blog.ethereum.org/2021/09/09/secured-no-1\nCatÃ©gorie: Non catÃ©gorisÃ©\n\n==================================================\n\narlier this year, we launched annbug bounty programnnfocused on finding issues in the beacon chain specification, and/or in client implementations (ighthouse, imbus, eku, rysm etc...). he results (and vulnerability reports) have been enlightening as have the lessons learned while patching potential issues.nnn this new series, we aim to eplore and share some of the insight we've gained from security work to date and as we move forward.nnhis first post will analyze some of the submissions specifically targeting  primitives.nnisclaimernn ll bugs mentioned in this post have been already fied.nn is everywherenn few years ago,nniego . ranhanngave a talk at thennst orkshop on lliptic urve ryptographynnwith the titlennairings are not dead, just resting.nnow prophetic.nnere we are in , and pairings are one of the primary actors behind many of the cryptographic primitives used in the blockchain space (and beyond)nnnnaggregate signatures, - systems, etc.nnevelopment and standardization work related to  signatures has been an ongoing project for  researchers for a while now, driven in-part bynnustin rakennand summarized innna recent post of his on redditnn.nnhe latest and greatestnnn the meantime, there have been plenty of updates.nn-nnis now universally recognized asnnthe pairing curvennto be usednngiven our present knowledgenn.nnhree different  drafts are currently under developmentnnairing-riendly urvesnn signaturesnnashing to lliptic urvesnnoreover, thennbeacon chain specificationnnhas matured and is already partially deployed. s mentioned above,nn signaturesnnare an important piece of the puzzle behind proof-of-stake (o) and the beacon chain.nnecent lessons learnednnfter collecting submissions targeting the  primitives used in the consensus-layer, we're able to split reported bugs into three areasnn draft oversightsnnmplementation mistakesnn draft implementation violationsnnet's zoom into each section.nn draft oversightsnnne of the reporters, (nnguyen hoi inh uannn), found discrepancies in thenn draftnn, and published two white papers with findingsnn"plitting zero" attacknnttacks and weaknesses of  aggregates signaturesnnhile the specific inconsistencies are still subjectnnfor debatenn, he found some interestingnnimplementationnnissuesnnwhile conducting his research.nnmplementation mistakesnnuido rankennnwas able to uncover several "little" issues innnnnusingnndifferential fuzzingnn. ee eamples of those belownnblst nverse modulo hangs on i if input is  or multiple of modulonnblst sing non-standard 'dst' parameter branches on uninitialized memorynne topped this off with discovery of a moderate vulnerability affecting thenn's blst_fp_eucl_inverse functionnn.nn draft implementation violationsnn third category of bug was related to  draft implementation violations. he first one affected thennrysm clientnn.nnn order to describe this we need first to provide a bit of background. henn signaturesnn draft includes  schemesnnasic schemennessage augmentationnnroof of possessionnnhennrysm clientnndoesn't make any distinction between the  in its , which is unique among implementations (e.g.nnpy_eccnn). ne peculiarity about thennbasic schemennisnnquoting verbatimnnnn'his function first ensures that all messages are distinct'nn. his was not ensured in thennggregateerifynnfunction. rysm fied this discrepancy bynndeprecating the usagennofnnggregateerifynn(which is not used anywhere in the beacon chain specification).nn second issue impactednnpy_eccnn. n this case, the serialization process described in thennash - specificationnnthat stores integers are always within the range ofnn, p - ]nn. hennpy_eccnnimplementation did this check for the  group of - only for thennreal partnnbut did not perform the modulus operation for thennimaginary partnn. he issue was fied with the following pull requestnnnsufficient alidation on decompress_ eserialization in py_eccnn.nnrapping upnnoday, we took a look at the  related reports we have received as part of ournnbug bounty programnn, but this is definitely not the end of the story for security work or for adventures related to .nnennstronglynnencouragennyounnto help ensure the consensus-layer continues to grow safer over time. ith that, we look forward hearing from you and encourage you to ! f you think you've found a security vulnerability or any bug related to the beacon chain or related clients,nnsubmit a bug reportnn! ðŸ’œðŸ¦„